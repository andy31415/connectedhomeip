// DO NOT EDIT - Generated file
//
// Application configuration for {{ cluster_name }}
#pragma once

#include <app-common/zap-generated/cluster-enums.h>
#include <app/util/cluster-config.h>
#include <lib/support/BitFlags.h>

#include <array>

namespace chip {
namespace app {
namespace Clusters {
namespace {{ cluster_name }} {
namespace ApplicationConfig {

{% if config.feature_bitmap_type -%}
using FeatureBitmapType = BitFlags<Feature>; {#- Bitmap is ALWAYS named Feature, even if the data type is <CLUSTER_NAME>Feature #}
{%- else -%}
using FeatureBitmapType = uint32_t;
{%- endif %}

inline constexpr std::array<ClusterEndpointConfiguration<FeatureBitmapType>, {{config.endpoint_configs | length}}> kFixedEndpoints = { {
{%- for endpoint_config in config.endpoint_configs %}
    {
        .endpointNumber = {{ endpoint_config.endpoint_number }},
        .featureMap = {# Ensure a space here before brace/value #}
    {%- if config.feature_bitmap_type -%}
          FeatureBitmapType {
      {%- for feature in endpoint_config.features %}
            Feature::{{ feature.name }}
        {%- if not loop.last -%}, {%- endif %} // feature bit {{ "0x%0X" | format(feature.value) }}
      {%- endfor %}
        }
    {%- else -%}
        {{ "0x%0X" | format(endpoint_config.feature_map) }}
    {%- endif -%}
        ,
        .clusterRevision = {{ endpoint_config.cluster_revision }},
    },
{%- endfor %}
} };

} // namespace ApplicationConfig
} // namespace {{ cluster_name }}
} // namespace Clusters
} // namespace app
} // namespace namespace chip

