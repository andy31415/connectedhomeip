import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterWriteMapping {
  public Map<String, Map<String, InteractionInfo>> getWriteAttributeMap() {
    Map<String, Map<String, InteractionInfo>> writeAttributeMap = new HashMap<>();

    {%- for cluster in clientClusters | sort(attribute='name') %}
    Map<String, InteractionInfo> write{{cluster.name}}InteractionInfo = new LinkedHashMap<>();

      {% - for attribute in cluster.attributes %}
        {# TODO: add support for struct-typed attributes 
           # OLD LOGIC: {{#unless (isStrEqual chipCallback.name "Unsupported")}}
         #}
        {% if not attribute.field.is_list and attribute.is_writable %}
    Map<String, CommandParameterInfo> write{{cluster.name}}{{attribute.name}}CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo {{cluster.name | lowercamelcase}}{{attribute.name|lowercamelcase}}CommandParameterInfo =
        new CommandParameterInfo(
            "value", 
            FIXME, {# {{asJavaType type null parent.parent.name removeGenericType=true}}.class, #}
            FIXME, {# {{asJavaType type null parent.parent.name underlyingType=true}}.class #}
        );
    write{{cluster.name}}{{attribute.name}}CommandParams.put(
        "value",
        {{cluster.name | lowercamelcase}}{{attribute.name | lowercamelcase}}CommandParameterInfo
    );
    InteractionInfo write{{cluster.name}}{{attribute.name}}AttributeInteractionInfo = new InteractionInfo(
      (cluster, callback, commandArguments) -> {
        ((ChipClusters.{{cluster.name}}Cluster) cluster).write{{cluster.name}}Attribute(
          (DefaultClusterCallback) callback,
          FIXME, {# ({{asJavaBoxedType type chipType}}) #}
          commandArguments.get("value")
          FIXME, {# {{#if mustUseTimedWrite}}, 10000{{/if}} #}
        );
      },
      () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
      write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams
    );
    write{{cluster.name}}InteractionInfo.put("write{{attribute.name}}Attribute", write{{cluster.name}}{{attribute.name}}AttributeInteractionInfo);
        {% endif %}
      {% endfor %}

    writeAttributeMap.put("{{cluster.name | lowercamelcase}}", write{{cluster.name}}InteractionInfo);
    {%  endfor %}

    {#
    FIXME:
        {{#chip_server_cluster_attributes}}
        {{! TODO: Add support for struct-typed attributes }}
        {{#unless (isStrEqual chipCallback.name "Unsupported")}}
        {{#if isWritableAttribute}}
        {{#unless isArray}}
        Map<String, CommandParameterInfo> write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        CommandParameterInfo {{asLowerCamelCase ../name}}{{asLowerCamelCase name}}CommandParameterInfo = new CommandParameterInfo("value", {{asJavaType type null parent.parent.name removeGenericType=true}}.class, {{asJavaType type null parent.parent.name underlyingType=true}}.class);
        write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams.put("value",{{asLowerCamelCase ../name}}{{asLowerCamelCase name}}CommandParameterInfo);
        InteractionInfo write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}AttributeInteractionInfo = new InteractionInfo(
          (cluster, callback, commandArguments) -> {
            ((ChipClusters.{{asUpperCamelCase ../name}}Cluster) cluster).write{{asUpperCamelCase name}}Attribute(
              (DefaultClusterCallback) callback,
              ({{asJavaBoxedType type chipType}})
              commandArguments.get("value")
              {{#if mustUseTimedWrite}}, 10000{{/if}}
            );
          },
          () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
          write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams
        );
        write{{asUpperCamelCase ../name}}InteractionInfo.put("write{{asUpperCamelCase name}}Attribute", write{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}AttributeInteractionInfo);
        {{/unless}}
        {{/if}}
        {{/unless}}
        {{/chip_server_cluster_attributes}}
    #}

    return writeAttributeMap;
  }
}
