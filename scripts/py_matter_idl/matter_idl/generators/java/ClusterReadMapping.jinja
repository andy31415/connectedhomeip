/*
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package chip.devicecontroller;

import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.InteractionInfo;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterReadMapping {
    public Map<String, Map<String, InteractionInfo>> getReadAttributeMap() {
        Map<String, Map<String, InteractionInfo>> readAttributeMap = new HashMap<>();

    {%- for cluster in clientClusters | sort(attribute='code') %}
      {%-  set typeLookup = idl | createLookupContext(cluster) %}
        Map<String, InteractionInfo> read{{cluster.name | lowfirst_except_acronym}}InteractionInfo = new LinkedHashMap<>();
{#
        {{#chip_server_cluster_attributes}}
        {{! TODO: Add support for struct-typed attributes }}
        {{#unless (isStrEqual chipCallback.name "Unsupported")}}
        Map<String, CommandParameterInfo> read{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo read{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}AttributeInteractionInfo = new InteractionInfo(
          (cluster, callback, commandArguments) -> {
            ((ChipClusters.{{asUpperCamelCase ../name}}Cluster) cluster).read{{asUpperCamelCase name}}Attribute(
              ({{#if_basic_global_response}}
                ChipClusters.{{convertAttributeCallbackTypeToJavaName chipCallback.type}}AttributeCallback
              {{else}}
                ChipClusters.{{asUpperCamelCase ../name}}Cluster.{{asUpperCamelCase name}}AttributeCallback
              {{/if_basic_global_response}}) callback
            );
          },
          {{#if_basic_global_response}}
            () -> new ClusterInfoMapping.Delegated{{convertAttributeCallbackTypeToJavaName chipCallback.type}}AttributeCallback(),
          {{else}}
            () -> new ClusterInfoMapping.Delegated{{asUpperCamelCase parent.name}}Cluster{{asUpperCamelCase name}}AttributeCallback(),
          {{/if_basic_global_response}}
          read{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}CommandParams
        );
        read{{asUpperCamelCase ../name}}InteractionInfo.put("read{{asUpperCamelCase name}}Attribute", read{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}AttributeInteractionInfo);
        {{/unless}}
        {{/chip_server_cluster_attributes}}
#} 
        readAttributeMap.put("{{cluster.name | lowfirst_except_acronym}}", read{{cluster.name}}InteractionInfo);
    {%- endfor -%}
        return readAttributeMap;
    }
}

