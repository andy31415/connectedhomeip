/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include "CHIPInvokeCallbacks.h"
#include <jni/CHIPCallbackTypes.h>

#include <app-common/zap-generated/cluster-objects.h>
#include <jni.h>
#include <lib/support/CHIPJNIError.h>
#include <lib/support/CodeUtils.h>
#include <lib/support/JniReferences.h>
#include <lib/support/JniTypeWrappers.h>
#include <platform/PlatformManager.h>

namespace chip {

CHIPIdentifyClusterIdentifyCallback::CHIPIdentifyClusterIdentifyCallback(jobject javaCallback) :
    Callback::Callback<CHIPIdentifyClusterIdentifyCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPIdentifyClusterIdentifyCallback::~CHIPIdentifyClusterIdentifyCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPIdentifyClusterIdentifyCallback::CallbackFn(
    void * context, const chip::app::Clusters::Identify::Commands::Identify::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPIdentifyClusterIdentifyCallback, void (*)(CHIPIdentifyClusterIdentifyCallback *)> cppCallback(
        reinterpret_cast<CHIPIdentifyClusterIdentifyCallback *>(context),
        chip::Platform::Delete<CHIPIdentifyClusterIdentifyCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject IdentifyTime;
    std::string IdentifyTimeClassName     = "java/lang/Integer";
    std::string IdentifyTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(IdentifyTimeClassName.c_str(), IdentifyTimeCtorSignature.c_str(),
                                                                   dataResponse.identifyTime, IdentifyTime);

    env->CallVoidMethod(javaCallbackRef, javaMethod, IdentifyTime);
}
CHIPIdentifyClusterTriggerEffectCallback::CHIPIdentifyClusterTriggerEffectCallback(jobject javaCallback) :
    Callback::Callback<CHIPIdentifyClusterTriggerEffectCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPIdentifyClusterTriggerEffectCallback::~CHIPIdentifyClusterTriggerEffectCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPIdentifyClusterTriggerEffectCallback::CallbackFn(
    void * context, const chip::app::Clusters::Identify::Commands::TriggerEffect::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPIdentifyClusterTriggerEffectCallback, void (*)(CHIPIdentifyClusterTriggerEffectCallback *)> cppCallback(
        reinterpret_cast<CHIPIdentifyClusterTriggerEffectCallback *>(context),
        chip::Platform::Delete<CHIPIdentifyClusterTriggerEffectCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject EffectIdentifier;
    std::string EffectIdentifierClassName     = "java/lang/Integer";
    std::string EffectIdentifierCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        EffectIdentifierClassName.c_str(), EffectIdentifierCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.effectIdentifier), EffectIdentifier);
    jobject EffectVariant;
    std::string EffectVariantClassName     = "java/lang/Integer";
    std::string EffectVariantCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(EffectVariantClassName.c_str(),
                                                                  EffectVariantCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.effectVariant), EffectVariant);

    env->CallVoidMethod(javaCallbackRef, javaMethod, EffectIdentifier, EffectVariant);
}
CHIPGroupsClusterAddGroupCallback::CHIPGroupsClusterAddGroupCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterAddGroupCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterAddGroupCallback::~CHIPGroupsClusterAddGroupCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterAddGroupCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::AddGroup::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterAddGroupCallback, void (*)(CHIPGroupsClusterAddGroupCallback *)> cppCallback(
        reinterpret_cast<CHIPGroupsClusterAddGroupCallback *>(context), chip::Platform::Delete<CHIPGroupsClusterAddGroupCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/String;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject GroupName;
    GroupName = env->NewStringUTF(std::string(dataResponse.groupName.data(), dataResponse.groupName.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, GroupName);
}
CHIPGroupsClusterViewGroupCallback::CHIPGroupsClusterViewGroupCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterViewGroupCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterViewGroupCallback::~CHIPGroupsClusterViewGroupCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterViewGroupCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::ViewGroup::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterViewGroupCallback, void (*)(CHIPGroupsClusterViewGroupCallback *)> cppCallback(
        reinterpret_cast<CHIPGroupsClusterViewGroupCallback *>(context),
        chip::Platform::Delete<CHIPGroupsClusterViewGroupCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID);
}
CHIPGroupsClusterGetGroupMembershipCallback::CHIPGroupsClusterGetGroupMembershipCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterGetGroupMembershipCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterGetGroupMembershipCallback::~CHIPGroupsClusterGetGroupMembershipCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterGetGroupMembershipCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::GetGroupMembership::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterGetGroupMembershipCallback, void (*)(CHIPGroupsClusterGetGroupMembershipCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupsClusterGetGroupMembershipCallback *>(context),
                    chip::Platform::Delete<CHIPGroupsClusterGetGroupMembershipCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupList;
    chip::JniReferences::GetInstance().CreateArrayList(GroupList);

    auto iter_GroupList_0 = dataResponse.groupList.begin();
    while (iter_GroupList_0.Next())
    {
        auto & entry_0 = iter_GroupList_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(newElement_0ClassName.c_str(),
                                                                       newElement_0CtorSignature.c_str(), entry_0, newElement_0);
        chip::JniReferences::GetInstance().AddToList(GroupList, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupList);
}
CHIPGroupsClusterRemoveGroupCallback::CHIPGroupsClusterRemoveGroupCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterRemoveGroupCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterRemoveGroupCallback::~CHIPGroupsClusterRemoveGroupCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterRemoveGroupCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::RemoveGroup::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterRemoveGroupCallback, void (*)(CHIPGroupsClusterRemoveGroupCallback *)> cppCallback(
        reinterpret_cast<CHIPGroupsClusterRemoveGroupCallback *>(context),
        chip::Platform::Delete<CHIPGroupsClusterRemoveGroupCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID);
}
CHIPGroupsClusterRemoveAllGroupsCallback::CHIPGroupsClusterRemoveAllGroupsCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterRemoveAllGroupsCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterRemoveAllGroupsCallback::~CHIPGroupsClusterRemoveAllGroupsCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterRemoveAllGroupsCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::RemoveAllGroups::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterRemoveAllGroupsCallback, void (*)(CHIPGroupsClusterRemoveAllGroupsCallback *)> cppCallback(
        reinterpret_cast<CHIPGroupsClusterRemoveAllGroupsCallback *>(context),
        chip::Platform::Delete<CHIPGroupsClusterRemoveAllGroupsCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPGroupsClusterAddGroupIfIdentifyingCallback::CHIPGroupsClusterAddGroupIfIdentifyingCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupsClusterAddGroupIfIdentifyingCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupsClusterAddGroupIfIdentifyingCallback::~CHIPGroupsClusterAddGroupIfIdentifyingCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupsClusterAddGroupIfIdentifyingCallback::CallbackFn(
    void * context, const chip::app::Clusters::Groups::Commands::AddGroupIfIdentifying::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupsClusterAddGroupIfIdentifyingCallback, void (*)(CHIPGroupsClusterAddGroupIfIdentifyingCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupsClusterAddGroupIfIdentifyingCallback *>(context),
                    chip::Platform::Delete<CHIPGroupsClusterAddGroupIfIdentifyingCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/String;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject GroupName;
    GroupName = env->NewStringUTF(std::string(dataResponse.groupName.data(), dataResponse.groupName.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, GroupName);
}
CHIPScenesClusterAddSceneCallback::CHIPScenesClusterAddSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterAddSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterAddSceneCallback::~CHIPScenesClusterAddSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterAddSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::AddScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterAddSceneCallback, void (*)(CHIPScenesClusterAddSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterAddSceneCallback *>(context), chip::Platform::Delete<CHIPScenesClusterAddSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject SceneName;
    SceneName = env->NewStringUTF(std::string(dataResponse.sceneName.data(), dataResponse.sceneName.size()).c_str());
    jobject ExtensionFieldSets;
    chip::JniReferences::GetInstance().CreateArrayList(ExtensionFieldSets);

    auto iter_ExtensionFieldSets_0 = dataResponse.extensionFieldSets.begin();
    while (iter_ExtensionFieldSets_0.Next())
    {
        auto & entry_0 = iter_ExtensionFieldSets_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_clusterID;
        std::string newElement_0_clusterIDClassName     = "java/lang/Long";
        std::string newElement_0_clusterIDCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(newElement_0_clusterIDClassName.c_str(),
                                                                       newElement_0_clusterIDCtorSignature.c_str(),
                                                                       entry_0.clusterID, newElement_0_clusterID);
        jobject newElement_0_attributeValueList;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_attributeValueList);

        auto iter_newElement_0_attributeValueList_2 = entry_0.attributeValueList.begin();
        while (iter_newElement_0_attributeValueList_2.Next())
        {
            auto & entry_2 = iter_newElement_0_attributeValueList_2.GetValue();
            jobject newElement_2;
            jobject newElement_2_attributeID;
            if (!entry_2.attributeID.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr, newElement_2_attributeID);
            }
            else
            {
                jobject newElement_2_attributeIDInsideOptional;
                std::string newElement_2_attributeIDInsideOptionalClassName     = "java/lang/Long";
                std::string newElement_2_attributeIDInsideOptionalCtorSignature = "(J)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
                    newElement_2_attributeIDInsideOptionalClassName.c_str(),
                    newElement_2_attributeIDInsideOptionalCtorSignature.c_str(), entry_2.attributeID.Value(),
                    newElement_2_attributeIDInsideOptional);
                chip::JniReferences::GetInstance().CreateOptional(newElement_2_attributeIDInsideOptional, newElement_2_attributeID);
            }
            jobject newElement_2_attributeValue;
            chip::JniReferences::GetInstance().CreateArrayList(newElement_2_attributeValue);

            auto iter_newElement_2_attributeValue_4 = entry_2.attributeValue.begin();
            while (iter_newElement_2_attributeValue_4.Next())
            {
                auto & entry_4 = iter_newElement_2_attributeValue_4.GetValue();
                jobject newElement_4;
                std::string newElement_4ClassName     = "java/lang/Integer";
                std::string newElement_4CtorSignature = "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    newElement_4ClassName.c_str(), newElement_4CtorSignature.c_str(), entry_4, newElement_4);
                chip::JniReferences::GetInstance().AddToList(newElement_2_attributeValue, newElement_4);
            }

            jclass attributeValuePairStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ScenesClusterAttributeValuePair", attributeValuePairStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ScenesClusterAttributeValuePair");
                return;
            }
            jmethodID attributeValuePairStructCtor_3 =
                env->GetMethodID(attributeValuePairStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/ArrayList;)V");
            if (attributeValuePairStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ScenesClusterAttributeValuePair constructor");
                return;
            }

            newElement_2 = env->NewObject(attributeValuePairStructClass_3, attributeValuePairStructCtor_3, newElement_2_attributeID,
                                          newElement_2_attributeValue);
            chip::JniReferences::GetInstance().AddToList(newElement_0_attributeValueList, newElement_2);
        }

        jclass extensionFieldSetStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ScenesClusterExtensionFieldSet", extensionFieldSetStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ScenesClusterExtensionFieldSet");
            return;
        }
        jmethodID extensionFieldSetStructCtor_1 =
            env->GetMethodID(extensionFieldSetStructClass_1, "<init>", "(Ljava/lang/Long;Ljava/util/ArrayList;)V");
        if (extensionFieldSetStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ScenesClusterExtensionFieldSet constructor");
            return;
        }

        newElement_0 = env->NewObject(extensionFieldSetStructClass_1, extensionFieldSetStructCtor_1, newElement_0_clusterID,
                                      newElement_0_attributeValueList);
        chip::JniReferences::GetInstance().AddToList(ExtensionFieldSets, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID, TransitionTime, SceneName, ExtensionFieldSets);
}
CHIPScenesClusterViewSceneCallback::CHIPScenesClusterViewSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterViewSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterViewSceneCallback::~CHIPScenesClusterViewSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterViewSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::ViewScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterViewSceneCallback, void (*)(CHIPScenesClusterViewSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterViewSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterViewSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID);
}
CHIPScenesClusterRemoveSceneCallback::CHIPScenesClusterRemoveSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterRemoveSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterRemoveSceneCallback::~CHIPScenesClusterRemoveSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterRemoveSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterRemoveSceneCallback, void (*)(CHIPScenesClusterRemoveSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterRemoveSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterRemoveSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID);
}
CHIPScenesClusterRemoveAllScenesCallback::CHIPScenesClusterRemoveAllScenesCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterRemoveAllScenesCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterRemoveAllScenesCallback::~CHIPScenesClusterRemoveAllScenesCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterRemoveAllScenesCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RemoveAllScenes::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterRemoveAllScenesCallback, void (*)(CHIPScenesClusterRemoveAllScenesCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterRemoveAllScenesCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterRemoveAllScenesCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID);
}
CHIPScenesClusterStoreSceneCallback::CHIPScenesClusterStoreSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterStoreSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterStoreSceneCallback::~CHIPScenesClusterStoreSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterStoreSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::StoreScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterStoreSceneCallback, void (*)(CHIPScenesClusterStoreSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterStoreSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterStoreSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID);
}
CHIPScenesClusterRecallSceneCallback::CHIPScenesClusterRecallSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterRecallSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterRecallSceneCallback::~CHIPScenesClusterRecallSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterRecallSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::RecallScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterRecallSceneCallback, void (*)(CHIPScenesClusterRecallSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterRecallSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterRecallSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);
    jobject TransitionTime;
    if (!dataResponse.transitionTime.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, TransitionTime);
    }
    else
    {
        jobject TransitionTimeInsideOptional;
        if (dataResponse.transitionTime.Value().IsNull())
        {
            TransitionTimeInsideOptional = nullptr;
        }
        else
        {
            std::string TransitionTimeInsideOptionalClassName     = "java/lang/Integer";
            std::string TransitionTimeInsideOptionalCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
                TransitionTimeInsideOptionalClassName.c_str(), TransitionTimeInsideOptionalCtorSignature.c_str(),
                dataResponse.transitionTime.Value().Value(), TransitionTimeInsideOptional);
        }
        chip::JniReferences::GetInstance().CreateOptional(TransitionTimeInsideOptional, TransitionTime);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID, TransitionTime);
}
CHIPScenesClusterGetSceneMembershipCallback::CHIPScenesClusterGetSceneMembershipCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterGetSceneMembershipCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterGetSceneMembershipCallback::~CHIPScenesClusterGetSceneMembershipCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterGetSceneMembershipCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::GetSceneMembership::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterGetSceneMembershipCallback, void (*)(CHIPScenesClusterGetSceneMembershipCallback *)>
        cppCallback(reinterpret_cast<CHIPScenesClusterGetSceneMembershipCallback *>(context),
                    chip::Platform::Delete<CHIPScenesClusterGetSceneMembershipCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID);
}
CHIPScenesClusterEnhancedAddSceneCallback::CHIPScenesClusterEnhancedAddSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterEnhancedAddSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterEnhancedAddSceneCallback::~CHIPScenesClusterEnhancedAddSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterEnhancedAddSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::EnhancedAddScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterEnhancedAddSceneCallback, void (*)(CHIPScenesClusterEnhancedAddSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterEnhancedAddSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterEnhancedAddSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject SceneName;
    SceneName = env->NewStringUTF(std::string(dataResponse.sceneName.data(), dataResponse.sceneName.size()).c_str());
    jobject ExtensionFieldSets;
    chip::JniReferences::GetInstance().CreateArrayList(ExtensionFieldSets);

    auto iter_ExtensionFieldSets_0 = dataResponse.extensionFieldSets.begin();
    while (iter_ExtensionFieldSets_0.Next())
    {
        auto & entry_0 = iter_ExtensionFieldSets_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_clusterID;
        std::string newElement_0_clusterIDClassName     = "java/lang/Long";
        std::string newElement_0_clusterIDCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(newElement_0_clusterIDClassName.c_str(),
                                                                       newElement_0_clusterIDCtorSignature.c_str(),
                                                                       entry_0.clusterID, newElement_0_clusterID);
        jobject newElement_0_attributeValueList;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_attributeValueList);

        auto iter_newElement_0_attributeValueList_2 = entry_0.attributeValueList.begin();
        while (iter_newElement_0_attributeValueList_2.Next())
        {
            auto & entry_2 = iter_newElement_0_attributeValueList_2.GetValue();
            jobject newElement_2;
            jobject newElement_2_attributeID;
            if (!entry_2.attributeID.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr, newElement_2_attributeID);
            }
            else
            {
                jobject newElement_2_attributeIDInsideOptional;
                std::string newElement_2_attributeIDInsideOptionalClassName     = "java/lang/Long";
                std::string newElement_2_attributeIDInsideOptionalCtorSignature = "(J)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
                    newElement_2_attributeIDInsideOptionalClassName.c_str(),
                    newElement_2_attributeIDInsideOptionalCtorSignature.c_str(), entry_2.attributeID.Value(),
                    newElement_2_attributeIDInsideOptional);
                chip::JniReferences::GetInstance().CreateOptional(newElement_2_attributeIDInsideOptional, newElement_2_attributeID);
            }
            jobject newElement_2_attributeValue;
            chip::JniReferences::GetInstance().CreateArrayList(newElement_2_attributeValue);

            auto iter_newElement_2_attributeValue_4 = entry_2.attributeValue.begin();
            while (iter_newElement_2_attributeValue_4.Next())
            {
                auto & entry_4 = iter_newElement_2_attributeValue_4.GetValue();
                jobject newElement_4;
                std::string newElement_4ClassName     = "java/lang/Integer";
                std::string newElement_4CtorSignature = "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    newElement_4ClassName.c_str(), newElement_4CtorSignature.c_str(), entry_4, newElement_4);
                chip::JniReferences::GetInstance().AddToList(newElement_2_attributeValue, newElement_4);
            }

            jclass attributeValuePairStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ScenesClusterAttributeValuePair", attributeValuePairStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ScenesClusterAttributeValuePair");
                return;
            }
            jmethodID attributeValuePairStructCtor_3 =
                env->GetMethodID(attributeValuePairStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/ArrayList;)V");
            if (attributeValuePairStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ScenesClusterAttributeValuePair constructor");
                return;
            }

            newElement_2 = env->NewObject(attributeValuePairStructClass_3, attributeValuePairStructCtor_3, newElement_2_attributeID,
                                          newElement_2_attributeValue);
            chip::JniReferences::GetInstance().AddToList(newElement_0_attributeValueList, newElement_2);
        }

        jclass extensionFieldSetStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ScenesClusterExtensionFieldSet", extensionFieldSetStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ScenesClusterExtensionFieldSet");
            return;
        }
        jmethodID extensionFieldSetStructCtor_1 =
            env->GetMethodID(extensionFieldSetStructClass_1, "<init>", "(Ljava/lang/Long;Ljava/util/ArrayList;)V");
        if (extensionFieldSetStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ScenesClusterExtensionFieldSet constructor");
            return;
        }

        newElement_0 = env->NewObject(extensionFieldSetStructClass_1, extensionFieldSetStructCtor_1, newElement_0_clusterID,
                                      newElement_0_attributeValueList);
        chip::JniReferences::GetInstance().AddToList(ExtensionFieldSets, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID, TransitionTime, SceneName, ExtensionFieldSets);
}
CHIPScenesClusterEnhancedViewSceneCallback::CHIPScenesClusterEnhancedViewSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterEnhancedViewSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterEnhancedViewSceneCallback::~CHIPScenesClusterEnhancedViewSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterEnhancedViewSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::EnhancedViewScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterEnhancedViewSceneCallback, void (*)(CHIPScenesClusterEnhancedViewSceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterEnhancedViewSceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterEnhancedViewSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupID;
    std::string GroupIDClassName     = "java/lang/Integer";
    std::string GroupIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIDClassName.c_str(), GroupIDCtorSignature.c_str(),
                                                                   dataResponse.groupID, GroupID);
    jobject SceneID;
    std::string SceneIDClassName     = "java/lang/Integer";
    std::string SceneIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIDClassName.c_str(), SceneIDCtorSignature.c_str(),
                                                                  dataResponse.sceneID, SceneID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupID, SceneID);
}
CHIPScenesClusterCopySceneCallback::CHIPScenesClusterCopySceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPScenesClusterCopySceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPScenesClusterCopySceneCallback::~CHIPScenesClusterCopySceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPScenesClusterCopySceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::Scenes::Commands::CopyScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPScenesClusterCopySceneCallback, void (*)(CHIPScenesClusterCopySceneCallback *)> cppCallback(
        reinterpret_cast<CHIPScenesClusterCopySceneCallback *>(context),
        chip::Platform::Delete<CHIPScenesClusterCopySceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Mode;
    std::string ModeClassName     = "java/lang/Integer";
    std::string ModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(ModeClassName.c_str(), ModeCtorSignature.c_str(),
                                                                  dataResponse.mode.Raw(), Mode);
    jobject GroupIdentifierFrom;
    std::string GroupIdentifierFromClassName     = "java/lang/Integer";
    std::string GroupIdentifierFromCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIdentifierFromClassName.c_str(),
                                                                   GroupIdentifierFromCtorSignature.c_str(),
                                                                   dataResponse.groupIdentifierFrom, GroupIdentifierFrom);
    jobject SceneIdentifierFrom;
    std::string SceneIdentifierFromClassName     = "java/lang/Integer";
    std::string SceneIdentifierFromCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIdentifierFromClassName.c_str(),
                                                                  SceneIdentifierFromCtorSignature.c_str(),
                                                                  dataResponse.sceneIdentifierFrom, SceneIdentifierFrom);
    jobject GroupIdentifierTo;
    std::string GroupIdentifierToClassName     = "java/lang/Integer";
    std::string GroupIdentifierToCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(GroupIdentifierToClassName.c_str(),
                                                                   GroupIdentifierToCtorSignature.c_str(),
                                                                   dataResponse.groupIdentifierTo, GroupIdentifierTo);
    jobject SceneIdentifierTo;
    std::string SceneIdentifierToClassName     = "java/lang/Integer";
    std::string SceneIdentifierToCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SceneIdentifierToClassName.c_str(),
                                                                  SceneIdentifierToCtorSignature.c_str(),
                                                                  dataResponse.sceneIdentifierTo, SceneIdentifierTo);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Mode, GroupIdentifierFrom, SceneIdentifierFrom, GroupIdentifierTo,
                        SceneIdentifierTo);
}
CHIPOnOffClusterOffCallback::CHIPOnOffClusterOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterOffCallback::~CHIPOnOffClusterOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterOffCallback::CallbackFn(void * context,
                                             const chip::app::Clusters::OnOff::Commands::Off::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterOffCallback, void (*)(CHIPOnOffClusterOffCallback *)> cppCallback(
        reinterpret_cast<CHIPOnOffClusterOffCallback *>(context), chip::Platform::Delete<CHIPOnOffClusterOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOnOffClusterOnCallback::CHIPOnOffClusterOnCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterOnCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterOnCallback::~CHIPOnOffClusterOnCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterOnCallback::CallbackFn(void * context,
                                            const chip::app::Clusters::OnOff::Commands::On::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterOnCallback, void (*)(CHIPOnOffClusterOnCallback *)> cppCallback(
        reinterpret_cast<CHIPOnOffClusterOnCallback *>(context), chip::Platform::Delete<CHIPOnOffClusterOnCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOnOffClusterToggleCallback::CHIPOnOffClusterToggleCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterToggleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterToggleCallback::~CHIPOnOffClusterToggleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterToggleCallback::CallbackFn(void * context,
                                                const chip::app::Clusters::OnOff::Commands::Toggle::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterToggleCallback, void (*)(CHIPOnOffClusterToggleCallback *)> cppCallback(
        reinterpret_cast<CHIPOnOffClusterToggleCallback *>(context), chip::Platform::Delete<CHIPOnOffClusterToggleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOnOffClusterOffWithEffectCallback::CHIPOnOffClusterOffWithEffectCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterOffWithEffectCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterOffWithEffectCallback::~CHIPOnOffClusterOffWithEffectCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterOffWithEffectCallback::CallbackFn(
    void * context, const chip::app::Clusters::OnOff::Commands::OffWithEffect::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterOffWithEffectCallback, void (*)(CHIPOnOffClusterOffWithEffectCallback *)> cppCallback(
        reinterpret_cast<CHIPOnOffClusterOffWithEffectCallback *>(context),
        chip::Platform::Delete<CHIPOnOffClusterOffWithEffectCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject EffectIdentifier;
    std::string EffectIdentifierClassName     = "java/lang/Integer";
    std::string EffectIdentifierCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        EffectIdentifierClassName.c_str(), EffectIdentifierCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.effectIdentifier), EffectIdentifier);
    jobject EffectVariant;
    std::string EffectVariantClassName     = "java/lang/Integer";
    std::string EffectVariantCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        EffectVariantClassName.c_str(), EffectVariantCtorSignature.c_str(), dataResponse.effectVariant, EffectVariant);

    env->CallVoidMethod(javaCallbackRef, javaMethod, EffectIdentifier, EffectVariant);
}
CHIPOnOffClusterOnWithRecallGlobalSceneCallback::CHIPOnOffClusterOnWithRecallGlobalSceneCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterOnWithRecallGlobalSceneCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterOnWithRecallGlobalSceneCallback::~CHIPOnOffClusterOnWithRecallGlobalSceneCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterOnWithRecallGlobalSceneCallback::CallbackFn(
    void * context, const chip::app::Clusters::OnOff::Commands::OnWithRecallGlobalScene::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterOnWithRecallGlobalSceneCallback, void (*)(CHIPOnOffClusterOnWithRecallGlobalSceneCallback *)>
        cppCallback(reinterpret_cast<CHIPOnOffClusterOnWithRecallGlobalSceneCallback *>(context),
                    chip::Platform::Delete<CHIPOnOffClusterOnWithRecallGlobalSceneCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOnOffClusterOnWithTimedOffCallback::CHIPOnOffClusterOnWithTimedOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPOnOffClusterOnWithTimedOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOnOffClusterOnWithTimedOffCallback::~CHIPOnOffClusterOnWithTimedOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOnOffClusterOnWithTimedOffCallback::CallbackFn(
    void * context, const chip::app::Clusters::OnOff::Commands::OnWithTimedOff::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOnOffClusterOnWithTimedOffCallback, void (*)(CHIPOnOffClusterOnWithTimedOffCallback *)> cppCallback(
        reinterpret_cast<CHIPOnOffClusterOnWithTimedOffCallback *>(context),
        chip::Platform::Delete<CHIPOnOffClusterOnWithTimedOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OnOffControl;
    std::string OnOffControlClassName     = "java/lang/Integer";
    std::string OnOffControlCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OnOffControlClassName.c_str(), OnOffControlCtorSignature.c_str(),
                                                                  dataResponse.onOffControl.Raw(), OnOffControl);
    jobject OnTime;
    std::string OnTimeClassName     = "java/lang/Integer";
    std::string OnTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(OnTimeClassName.c_str(), OnTimeCtorSignature.c_str(),
                                                                   dataResponse.onTime, OnTime);
    jobject OffWaitTime;
    std::string OffWaitTimeClassName     = "java/lang/Integer";
    std::string OffWaitTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(OffWaitTimeClassName.c_str(), OffWaitTimeCtorSignature.c_str(),
                                                                   dataResponse.offWaitTime, OffWaitTime);

    env->CallVoidMethod(javaCallbackRef, javaMethod, OnOffControl, OnTime, OffWaitTime);
}
CHIPLevelControlClusterMoveToLevelCallback::CHIPLevelControlClusterMoveToLevelCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterMoveToLevelCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterMoveToLevelCallback::~CHIPLevelControlClusterMoveToLevelCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterMoveToLevelCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::MoveToLevel::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterMoveToLevelCallback, void (*)(CHIPLevelControlClusterMoveToLevelCallback *)> cppCallback(
        reinterpret_cast<CHIPLevelControlClusterMoveToLevelCallback *>(context),
        chip::Platform::Delete<CHIPLevelControlClusterMoveToLevelCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Level;
    std::string LevelClassName     = "java/lang/Integer";
    std::string LevelCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(LevelClassName.c_str(), LevelCtorSignature.c_str(),
                                                                  dataResponse.level, Level);
    jobject TransitionTime;
    if (dataResponse.transitionTime.IsNull())
    {
        TransitionTime = nullptr;
    }
    else
    {
        std::string TransitionTimeClassName     = "java/lang/Integer";
        std::string TransitionTimeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TransitionTimeClassName.c_str(),
                                                                       TransitionTimeCtorSignature.c_str(),
                                                                       dataResponse.transitionTime.Value(), TransitionTime);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Level, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterMoveCallback::CHIPLevelControlClusterMoveCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterMoveCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterMoveCallback::~CHIPLevelControlClusterMoveCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterMoveCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::Move::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterMoveCallback, void (*)(CHIPLevelControlClusterMoveCallback *)> cppCallback(
        reinterpret_cast<CHIPLevelControlClusterMoveCallback *>(context),
        chip::Platform::Delete<CHIPLevelControlClusterMoveCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    if (dataResponse.rate.IsNull())
    {
        Rate = nullptr;
    }
    else
    {
        std::string RateClassName     = "java/lang/Integer";
        std::string RateCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                      dataResponse.rate.Value(), Rate);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterStepCallback::CHIPLevelControlClusterStepCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterStepCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterStepCallback::~CHIPLevelControlClusterStepCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterStepCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::Step::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterStepCallback, void (*)(CHIPLevelControlClusterStepCallback *)> cppCallback(
        reinterpret_cast<CHIPLevelControlClusterStepCallback *>(context),
        chip::Platform::Delete<CHIPLevelControlClusterStepCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                  dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    if (dataResponse.transitionTime.IsNull())
    {
        TransitionTime = nullptr;
    }
    else
    {
        std::string TransitionTimeClassName     = "java/lang/Integer";
        std::string TransitionTimeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TransitionTimeClassName.c_str(),
                                                                       TransitionTimeCtorSignature.c_str(),
                                                                       dataResponse.transitionTime.Value(), TransitionTime);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterStopCallback::CHIPLevelControlClusterStopCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterStopCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterStopCallback::~CHIPLevelControlClusterStopCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterStopCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::Stop::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterStopCallback, void (*)(CHIPLevelControlClusterStopCallback *)> cppCallback(
        reinterpret_cast<CHIPLevelControlClusterStopCallback *>(context),
        chip::Platform::Delete<CHIPLevelControlClusterStopCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterMoveToLevelWithOnOffCallback::CHIPLevelControlClusterMoveToLevelWithOnOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterMoveToLevelWithOnOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterMoveToLevelWithOnOffCallback::~CHIPLevelControlClusterMoveToLevelWithOnOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterMoveToLevelWithOnOffCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::MoveToLevelWithOnOff::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterMoveToLevelWithOnOffCallback,
                    void (*)(CHIPLevelControlClusterMoveToLevelWithOnOffCallback *)>
        cppCallback(reinterpret_cast<CHIPLevelControlClusterMoveToLevelWithOnOffCallback *>(context),
                    chip::Platform::Delete<CHIPLevelControlClusterMoveToLevelWithOnOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Level;
    std::string LevelClassName     = "java/lang/Integer";
    std::string LevelCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(LevelClassName.c_str(), LevelCtorSignature.c_str(),
                                                                  dataResponse.level, Level);
    jobject TransitionTime;
    if (dataResponse.transitionTime.IsNull())
    {
        TransitionTime = nullptr;
    }
    else
    {
        std::string TransitionTimeClassName     = "java/lang/Integer";
        std::string TransitionTimeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TransitionTimeClassName.c_str(),
                                                                       TransitionTimeCtorSignature.c_str(),
                                                                       dataResponse.transitionTime.Value(), TransitionTime);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Level, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterMoveWithOnOffCallback::CHIPLevelControlClusterMoveWithOnOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterMoveWithOnOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterMoveWithOnOffCallback::~CHIPLevelControlClusterMoveWithOnOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterMoveWithOnOffCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::MoveWithOnOff::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterMoveWithOnOffCallback, void (*)(CHIPLevelControlClusterMoveWithOnOffCallback *)>
        cppCallback(reinterpret_cast<CHIPLevelControlClusterMoveWithOnOffCallback *>(context),
                    chip::Platform::Delete<CHIPLevelControlClusterMoveWithOnOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    if (dataResponse.rate.IsNull())
    {
        Rate = nullptr;
    }
    else
    {
        std::string RateClassName     = "java/lang/Integer";
        std::string RateCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                      dataResponse.rate.Value(), Rate);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterStepWithOnOffCallback::CHIPLevelControlClusterStepWithOnOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterStepWithOnOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterStepWithOnOffCallback::~CHIPLevelControlClusterStepWithOnOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterStepWithOnOffCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::StepWithOnOff::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterStepWithOnOffCallback, void (*)(CHIPLevelControlClusterStepWithOnOffCallback *)>
        cppCallback(reinterpret_cast<CHIPLevelControlClusterStepWithOnOffCallback *>(context),
                    chip::Platform::Delete<CHIPLevelControlClusterStepWithOnOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                  dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    if (dataResponse.transitionTime.IsNull())
    {
        TransitionTime = nullptr;
    }
    else
    {
        std::string TransitionTimeClassName     = "java/lang/Integer";
        std::string TransitionTimeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TransitionTimeClassName.c_str(),
                                                                       TransitionTimeCtorSignature.c_str(),
                                                                       dataResponse.transitionTime.Value(), TransitionTime);
    }
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterStopWithOnOffCallback::CHIPLevelControlClusterStopWithOnOffCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterStopWithOnOffCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterStopWithOnOffCallback::~CHIPLevelControlClusterStopWithOnOffCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterStopWithOnOffCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::StopWithOnOff::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterStopWithOnOffCallback, void (*)(CHIPLevelControlClusterStopWithOnOffCallback *)>
        cppCallback(reinterpret_cast<CHIPLevelControlClusterStopWithOnOffCallback *>(context),
                    chip::Platform::Delete<CHIPLevelControlClusterStopWithOnOffCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask.Raw(), OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsOverrideClassName.c_str(),
                                                                  OptionsOverrideCtorSignature.c_str(),
                                                                  dataResponse.optionsOverride.Raw(), OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, OptionsMask, OptionsOverride);
}
CHIPLevelControlClusterMoveToClosestFrequencyCallback::CHIPLevelControlClusterMoveToClosestFrequencyCallback(jobject javaCallback) :
    Callback::Callback<CHIPLevelControlClusterMoveToClosestFrequencyCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLevelControlClusterMoveToClosestFrequencyCallback::~CHIPLevelControlClusterMoveToClosestFrequencyCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLevelControlClusterMoveToClosestFrequencyCallback::CallbackFn(
    void * context, const chip::app::Clusters::LevelControl::Commands::MoveToClosestFrequency::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLevelControlClusterMoveToClosestFrequencyCallback,
                    void (*)(CHIPLevelControlClusterMoveToClosestFrequencyCallback *)>
        cppCallback(reinterpret_cast<CHIPLevelControlClusterMoveToClosestFrequencyCallback *>(context),
                    chip::Platform::Delete<CHIPLevelControlClusterMoveToClosestFrequencyCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Frequency;
    std::string FrequencyClassName     = "java/lang/Integer";
    std::string FrequencyCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(FrequencyClassName.c_str(), FrequencyCtorSignature.c_str(),
                                                                   dataResponse.frequency, Frequency);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Frequency);
}
CHIPActionsClusterInstantActionCallback::CHIPActionsClusterInstantActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterInstantActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterInstantActionCallback::~CHIPActionsClusterInstantActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterInstantActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::InstantAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterInstantActionCallback, void (*)(CHIPActionsClusterInstantActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterInstantActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterInstantActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterInstantActionWithTransitionCallback::CHIPActionsClusterInstantActionWithTransitionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterInstantActionWithTransitionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterInstantActionWithTransitionCallback::~CHIPActionsClusterInstantActionWithTransitionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterInstantActionWithTransitionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::InstantActionWithTransition::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterInstantActionWithTransitionCallback,
                    void (*)(CHIPActionsClusterInstantActionWithTransitionCallback *)>
        cppCallback(reinterpret_cast<CHIPActionsClusterInstantActionWithTransitionCallback *>(context),
                    chip::Platform::Delete<CHIPActionsClusterInstantActionWithTransitionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID, TransitionTime);
}
CHIPActionsClusterStartActionCallback::CHIPActionsClusterStartActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterStartActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterStartActionCallback::~CHIPActionsClusterStartActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterStartActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::StartAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterStartActionCallback, void (*)(CHIPActionsClusterStartActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterStartActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterStartActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterStartActionWithDurationCallback::CHIPActionsClusterStartActionWithDurationCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterStartActionWithDurationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterStartActionWithDurationCallback::~CHIPActionsClusterStartActionWithDurationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterStartActionWithDurationCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::StartActionWithDuration::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterStartActionWithDurationCallback,
                    void (*)(CHIPActionsClusterStartActionWithDurationCallback *)>
        cppCallback(reinterpret_cast<CHIPActionsClusterStartActionWithDurationCallback *>(context),
                    chip::Platform::Delete<CHIPActionsClusterStartActionWithDurationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }
    jobject Duration;
    std::string DurationClassName     = "java/lang/Long";
    std::string DurationCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(DurationClassName.c_str(), DurationCtorSignature.c_str(),
                                                                   dataResponse.duration, Duration);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID, Duration);
}
CHIPActionsClusterStopActionCallback::CHIPActionsClusterStopActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterStopActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterStopActionCallback::~CHIPActionsClusterStopActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterStopActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::StopAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterStopActionCallback, void (*)(CHIPActionsClusterStopActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterStopActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterStopActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterPauseActionCallback::CHIPActionsClusterPauseActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterPauseActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterPauseActionCallback::~CHIPActionsClusterPauseActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterPauseActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::PauseAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterPauseActionCallback, void (*)(CHIPActionsClusterPauseActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterPauseActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterPauseActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterPauseActionWithDurationCallback::CHIPActionsClusterPauseActionWithDurationCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterPauseActionWithDurationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterPauseActionWithDurationCallback::~CHIPActionsClusterPauseActionWithDurationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterPauseActionWithDurationCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::PauseActionWithDuration::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterPauseActionWithDurationCallback,
                    void (*)(CHIPActionsClusterPauseActionWithDurationCallback *)>
        cppCallback(reinterpret_cast<CHIPActionsClusterPauseActionWithDurationCallback *>(context),
                    chip::Platform::Delete<CHIPActionsClusterPauseActionWithDurationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }
    jobject Duration;
    std::string DurationClassName     = "java/lang/Long";
    std::string DurationCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(DurationClassName.c_str(), DurationCtorSignature.c_str(),
                                                                   dataResponse.duration, Duration);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID, Duration);
}
CHIPActionsClusterResumeActionCallback::CHIPActionsClusterResumeActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterResumeActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterResumeActionCallback::~CHIPActionsClusterResumeActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterResumeActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::ResumeAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterResumeActionCallback, void (*)(CHIPActionsClusterResumeActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterResumeActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterResumeActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterEnableActionCallback::CHIPActionsClusterEnableActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterEnableActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterEnableActionCallback::~CHIPActionsClusterEnableActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterEnableActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::EnableAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterEnableActionCallback, void (*)(CHIPActionsClusterEnableActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterEnableActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterEnableActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterEnableActionWithDurationCallback::CHIPActionsClusterEnableActionWithDurationCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterEnableActionWithDurationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterEnableActionWithDurationCallback::~CHIPActionsClusterEnableActionWithDurationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterEnableActionWithDurationCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::EnableActionWithDuration::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterEnableActionWithDurationCallback,
                    void (*)(CHIPActionsClusterEnableActionWithDurationCallback *)>
        cppCallback(reinterpret_cast<CHIPActionsClusterEnableActionWithDurationCallback *>(context),
                    chip::Platform::Delete<CHIPActionsClusterEnableActionWithDurationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }
    jobject Duration;
    std::string DurationClassName     = "java/lang/Long";
    std::string DurationCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(DurationClassName.c_str(), DurationCtorSignature.c_str(),
                                                                   dataResponse.duration, Duration);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID, Duration);
}
CHIPActionsClusterDisableActionCallback::CHIPActionsClusterDisableActionCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterDisableActionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterDisableActionCallback::~CHIPActionsClusterDisableActionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterDisableActionCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::DisableAction::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterDisableActionCallback, void (*)(CHIPActionsClusterDisableActionCallback *)> cppCallback(
        reinterpret_cast<CHIPActionsClusterDisableActionCallback *>(context),
        chip::Platform::Delete<CHIPActionsClusterDisableActionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID);
}
CHIPActionsClusterDisableActionWithDurationCallback::CHIPActionsClusterDisableActionWithDurationCallback(jobject javaCallback) :
    Callback::Callback<CHIPActionsClusterDisableActionWithDurationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPActionsClusterDisableActionWithDurationCallback::~CHIPActionsClusterDisableActionWithDurationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPActionsClusterDisableActionWithDurationCallback::CallbackFn(
    void * context, const chip::app::Clusters::Actions::Commands::DisableActionWithDuration::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPActionsClusterDisableActionWithDurationCallback,
                    void (*)(CHIPActionsClusterDisableActionWithDurationCallback *)>
        cppCallback(reinterpret_cast<CHIPActionsClusterDisableActionWithDurationCallback *>(context),
                    chip::Platform::Delete<CHIPActionsClusterDisableActionWithDurationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ActionID;
    std::string ActionIDClassName     = "java/lang/Integer";
    std::string ActionIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ActionIDClassName.c_str(), ActionIDCtorSignature.c_str(),
                                                                   dataResponse.actionID, ActionID);
    jobject InvokeID;
    if (!dataResponse.invokeID.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, InvokeID);
    }
    else
    {
        jobject InvokeIDInsideOptional;
        std::string InvokeIDInsideOptionalClassName     = "java/lang/Long";
        std::string InvokeIDInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(InvokeIDInsideOptionalClassName.c_str(),
                                                                       InvokeIDInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.invokeID.Value(), InvokeIDInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(InvokeIDInsideOptional, InvokeID);
    }
    jobject Duration;
    std::string DurationClassName     = "java/lang/Long";
    std::string DurationCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(DurationClassName.c_str(), DurationCtorSignature.c_str(),
                                                                   dataResponse.duration, Duration);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ActionID, InvokeID, Duration);
}
CHIPBasicInformationClusterMfgSpecificPingCallback::CHIPBasicInformationClusterMfgSpecificPingCallback(jobject javaCallback) :
    Callback::Callback<CHIPBasicInformationClusterMfgSpecificPingCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPBasicInformationClusterMfgSpecificPingCallback::~CHIPBasicInformationClusterMfgSpecificPingCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPBasicInformationClusterMfgSpecificPingCallback::CallbackFn(
    void * context, const chip::app::Clusters::BasicInformation::Commands::MfgSpecificPing::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPBasicInformationClusterMfgSpecificPingCallback,
                    void (*)(CHIPBasicInformationClusterMfgSpecificPingCallback *)>
        cppCallback(reinterpret_cast<CHIPBasicInformationClusterMfgSpecificPingCallback *>(context),
                    chip::Platform::Delete<CHIPBasicInformationClusterMfgSpecificPingCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback::CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOtaSoftwareUpdateProviderClusterQueryImageCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback::~CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback::CallbackFn(
    void * context, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImage::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback,
                    void (*)(CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback *)>
        cppCallback(reinterpret_cast<CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback *>(context),
                    chip::Platform::Delete<CHIPOtaSoftwareUpdateProviderClusterQueryImageCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err =
        JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Long;Ljava/util/ArrayList;Ljava/"
                                                "util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V",
                                                &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject VendorID;
    std::string VendorIDClassName     = "java/lang/Integer";
    std::string VendorIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(VendorIDClassName.c_str(), VendorIDCtorSignature.c_str(),
                                                                   static_cast<uint16_t>(dataResponse.vendorID), VendorID);
    jobject ProductID;
    std::string ProductIDClassName     = "java/lang/Integer";
    std::string ProductIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ProductIDClassName.c_str(), ProductIDCtorSignature.c_str(),
                                                                   dataResponse.productID, ProductID);
    jobject SoftwareVersion;
    std::string SoftwareVersionClassName     = "java/lang/Long";
    std::string SoftwareVersionCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
        SoftwareVersionClassName.c_str(), SoftwareVersionCtorSignature.c_str(), dataResponse.softwareVersion, SoftwareVersion);
    jobject ProtocolsSupported;
    chip::JniReferences::GetInstance().CreateArrayList(ProtocolsSupported);

    auto iter_ProtocolsSupported_0 = dataResponse.protocolsSupported.begin();
    while (iter_ProtocolsSupported_0.Next())
    {
        auto & entry_0 = iter_ProtocolsSupported_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0ClassName.c_str(), newElement_0CtorSignature.c_str(), static_cast<uint8_t>(entry_0), newElement_0);
        chip::JniReferences::GetInstance().AddToList(ProtocolsSupported, newElement_0);
    }
    jobject HardwareVersion;
    if (!dataResponse.hardwareVersion.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, HardwareVersion);
    }
    else
    {
        jobject HardwareVersionInsideOptional;
        std::string HardwareVersionInsideOptionalClassName     = "java/lang/Integer";
        std::string HardwareVersionInsideOptionalCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            HardwareVersionInsideOptionalClassName.c_str(), HardwareVersionInsideOptionalCtorSignature.c_str(),
            dataResponse.hardwareVersion.Value(), HardwareVersionInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(HardwareVersionInsideOptional, HardwareVersion);
    }
    jobject Location;
    if (!dataResponse.location.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Location);
    }
    else
    {
        jobject LocationInsideOptional;
        LocationInsideOptional =
            env->NewStringUTF(std::string(dataResponse.location.Value().data(), dataResponse.location.Value().size()).c_str());
        chip::JniReferences::GetInstance().CreateOptional(LocationInsideOptional, Location);
    }
    jobject RequestorCanConsent;
    if (!dataResponse.requestorCanConsent.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, RequestorCanConsent);
    }
    else
    {
        jobject RequestorCanConsentInsideOptional;
        std::string RequestorCanConsentInsideOptionalClassName     = "java/lang/Boolean";
        std::string RequestorCanConsentInsideOptionalCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
            RequestorCanConsentInsideOptionalClassName.c_str(), RequestorCanConsentInsideOptionalCtorSignature.c_str(),
            dataResponse.requestorCanConsent.Value(), RequestorCanConsentInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(RequestorCanConsentInsideOptional, RequestorCanConsent);
    }
    jobject MetadataForProvider;
    if (!dataResponse.metadataForProvider.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, MetadataForProvider);
    }
    else
    {
        jobject MetadataForProviderInsideOptional;
        jbyteArray MetadataForProviderInsideOptionalByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.metadataForProvider.Value().size()));
        env->SetByteArrayRegion(MetadataForProviderInsideOptionalByteArray, 0,
                                static_cast<jsize>(dataResponse.metadataForProvider.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.metadataForProvider.Value().data()));
        MetadataForProviderInsideOptional = MetadataForProviderInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(MetadataForProviderInsideOptional, MetadataForProvider);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, VendorID, ProductID, SoftwareVersion, ProtocolsSupported, HardwareVersion,
                        Location, RequestorCanConsent, MetadataForProvider);
}
CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback::CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback::~CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback,
                    void (*)(CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback *>(context),
                    chip::Platform::Delete<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject UpdateToken;
    jbyteArray UpdateTokenByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.updateToken.size()));
    env->SetByteArrayRegion(UpdateTokenByteArray, 0, static_cast<jsize>(dataResponse.updateToken.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.updateToken.data()));
    UpdateToken = UpdateTokenByteArray;
    jobject NewVersion;
    std::string NewVersionClassName     = "java/lang/Long";
    std::string NewVersionCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(NewVersionClassName.c_str(), NewVersionCtorSignature.c_str(),
                                                                   dataResponse.newVersion, NewVersion);

    env->CallVoidMethod(javaCallbackRef, javaMethod, UpdateToken, NewVersion);
}
CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback::CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback::~CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback,
                    void (*)(CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback *)>
        cppCallback(reinterpret_cast<CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback *>(context),
                    chip::Platform::Delete<CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject UpdateToken;
    jbyteArray UpdateTokenByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.updateToken.size()));
    env->SetByteArrayRegion(UpdateTokenByteArray, 0, static_cast<jsize>(dataResponse.updateToken.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.updateToken.data()));
    UpdateToken = UpdateTokenByteArray;
    jobject SoftwareVersion;
    std::string SoftwareVersionClassName     = "java/lang/Long";
    std::string SoftwareVersionCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
        SoftwareVersionClassName.c_str(), SoftwareVersionCtorSignature.c_str(), dataResponse.softwareVersion, SoftwareVersion);

    env->CallVoidMethod(javaCallbackRef, javaMethod, UpdateToken, SoftwareVersion);
}
CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback::CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback::
    ~CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Commands::AnnounceOTAProvider::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback,
                    void (*)(CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback *)>
        cppCallback(reinterpret_cast<CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback *>(context),
                    chip::Platform::Delete<CHIPOtaSoftwareUpdateRequestorClusterAnnounceOTAProviderCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Long;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Optional;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ProviderNodeID;
    std::string ProviderNodeIDClassName     = "java/lang/Long";
    std::string ProviderNodeIDCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
        ProviderNodeIDClassName.c_str(), ProviderNodeIDCtorSignature.c_str(), dataResponse.providerNodeID, ProviderNodeID);
    jobject VendorID;
    std::string VendorIDClassName     = "java/lang/Integer";
    std::string VendorIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(VendorIDClassName.c_str(), VendorIDCtorSignature.c_str(),
                                                                   static_cast<uint16_t>(dataResponse.vendorID), VendorID);
    jobject AnnouncementReason;
    std::string AnnouncementReasonClassName     = "java/lang/Integer";
    std::string AnnouncementReasonCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        AnnouncementReasonClassName.c_str(), AnnouncementReasonCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.announcementReason), AnnouncementReason);
    jobject MetadataForNode;
    if (!dataResponse.metadataForNode.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, MetadataForNode);
    }
    else
    {
        jobject MetadataForNodeInsideOptional;
        jbyteArray MetadataForNodeInsideOptionalByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.metadataForNode.Value().size()));
        env->SetByteArrayRegion(MetadataForNodeInsideOptionalByteArray, 0,
                                static_cast<jsize>(dataResponse.metadataForNode.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.metadataForNode.Value().data()));
        MetadataForNodeInsideOptional = MetadataForNodeInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(MetadataForNodeInsideOptional, MetadataForNode);
    }
    jobject Endpoint;
    std::string EndpointClassName     = "java/lang/Integer";
    std::string EndpointCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(EndpointClassName.c_str(), EndpointCtorSignature.c_str(),
                                                                   dataResponse.endpoint, Endpoint);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ProviderNodeID, VendorID, AnnouncementReason, MetadataForNode, Endpoint);
}
CHIPGeneralCommissioningClusterArmFailSafeCallback::CHIPGeneralCommissioningClusterArmFailSafeCallback(jobject javaCallback) :
    Callback::Callback<CHIPGeneralCommissioningClusterArmFailSafeCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGeneralCommissioningClusterArmFailSafeCallback::~CHIPGeneralCommissioningClusterArmFailSafeCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGeneralCommissioningClusterArmFailSafeCallback::CallbackFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGeneralCommissioningClusterArmFailSafeCallback,
                    void (*)(CHIPGeneralCommissioningClusterArmFailSafeCallback *)>
        cppCallback(reinterpret_cast<CHIPGeneralCommissioningClusterArmFailSafeCallback *>(context),
                    chip::Platform::Delete<CHIPGeneralCommissioningClusterArmFailSafeCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Long;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ExpiryLengthSeconds;
    std::string ExpiryLengthSecondsClassName     = "java/lang/Integer";
    std::string ExpiryLengthSecondsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ExpiryLengthSecondsClassName.c_str(),
                                                                   ExpiryLengthSecondsCtorSignature.c_str(),
                                                                   dataResponse.expiryLengthSeconds, ExpiryLengthSeconds);
    jobject Breadcrumb;
    std::string BreadcrumbClassName     = "java/lang/Long";
    std::string BreadcrumbCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbClassName.c_str(), BreadcrumbCtorSignature.c_str(),
                                                                   dataResponse.breadcrumb, Breadcrumb);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ExpiryLengthSeconds, Breadcrumb);
}
CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback::CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPGeneralCommissioningClusterSetRegulatoryConfigCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback::~CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback::CallbackFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback,
                    void (*)(CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback *)>
        cppCallback(reinterpret_cast<CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback *>(context),
                    chip::Platform::Delete<CHIPGeneralCommissioningClusterSetRegulatoryConfigCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NewRegulatoryConfig;
    std::string NewRegulatoryConfigClassName     = "java/lang/Integer";
    std::string NewRegulatoryConfigCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        NewRegulatoryConfigClassName.c_str(), NewRegulatoryConfigCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.newRegulatoryConfig), NewRegulatoryConfig);
    jobject CountryCode;
    CountryCode = env->NewStringUTF(std::string(dataResponse.countryCode.data(), dataResponse.countryCode.size()).c_str());
    jobject Breadcrumb;
    std::string BreadcrumbClassName     = "java/lang/Long";
    std::string BreadcrumbCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbClassName.c_str(), BreadcrumbCtorSignature.c_str(),
                                                                   dataResponse.breadcrumb, Breadcrumb);

    env->CallVoidMethod(javaCallbackRef, javaMethod, NewRegulatoryConfig, CountryCode, Breadcrumb);
}
CHIPGeneralCommissioningClusterCommissioningCompleteCallback::CHIPGeneralCommissioningClusterCommissioningCompleteCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPGeneralCommissioningClusterCommissioningCompleteCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGeneralCommissioningClusterCommissioningCompleteCallback::~CHIPGeneralCommissioningClusterCommissioningCompleteCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGeneralCommissioningClusterCommissioningCompleteCallback::CallbackFn(
    void * context, const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGeneralCommissioningClusterCommissioningCompleteCallback,
                    void (*)(CHIPGeneralCommissioningClusterCommissioningCompleteCallback *)>
        cppCallback(reinterpret_cast<CHIPGeneralCommissioningClusterCommissioningCompleteCallback *>(context),
                    chip::Platform::Delete<CHIPGeneralCommissioningClusterCommissioningCompleteCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPNetworkCommissioningClusterScanNetworksCallback::CHIPNetworkCommissioningClusterScanNetworksCallback(jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterScanNetworksCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterScanNetworksCallback::~CHIPNetworkCommissioningClusterScanNetworksCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterScanNetworksCallback::CallbackFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterScanNetworksCallback,
                    void (*)(CHIPNetworkCommissioningClusterScanNetworksCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterScanNetworksCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterScanNetworksCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject SSID;
    if (!dataResponse.ssid.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, SSID);
    }
    else
    {
        jobject SSIDInsideOptional;
        if (dataResponse.ssid.Value().IsNull())
        {
            SSIDInsideOptional = nullptr;
        }
        else
        {
            jbyteArray SSIDInsideOptionalByteArray =
                env->NewByteArray(static_cast<jsize>(dataResponse.ssid.Value().Value().size()));
            env->SetByteArrayRegion(SSIDInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.ssid.Value().Value().size()),
                                    reinterpret_cast<const jbyte *>(dataResponse.ssid.Value().Value().data()));
            SSIDInsideOptional = SSIDInsideOptionalByteArray;
        }
        chip::JniReferences::GetInstance().CreateOptional(SSIDInsideOptional, SSID);
    }
    jobject Breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Breadcrumb);
    }
    else
    {
        jobject BreadcrumbInsideOptional;
        std::string BreadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string BreadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbInsideOptionalClassName.c_str(),
                                                                       BreadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), BreadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(BreadcrumbInsideOptional, Breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, SSID, Breadcrumb);
}
CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback::CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback::~CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback::CallbackFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::AddOrUpdateWiFiNetwork::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback,
                    void (*)(CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterAddOrUpdateWiFiNetworkCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([B[BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject SSID;
    jbyteArray SSIDByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.ssid.size()));
    env->SetByteArrayRegion(SSIDByteArray, 0, static_cast<jsize>(dataResponse.ssid.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.ssid.data()));
    SSID = SSIDByteArray;
    jobject Credentials;
    jbyteArray CredentialsByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.credentials.size()));
    env->SetByteArrayRegion(CredentialsByteArray, 0, static_cast<jsize>(dataResponse.credentials.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.credentials.data()));
    Credentials = CredentialsByteArray;
    jobject breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, breadcrumb);
    }
    else
    {
        jobject breadcrumbInsideOptional;
        std::string breadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string breadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(breadcrumbInsideOptionalClassName.c_str(),
                                                                       breadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), breadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(breadcrumbInsideOptional, breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, SSID, Credentials, breadcrumb);
}
CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback::CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback::~CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::NetworkCommissioning::Commands::AddOrUpdateThreadNetwork::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback,
                    void (*)(CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterAddOrUpdateThreadNetworkCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OperationalDataset;
    jbyteArray OperationalDatasetByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.operationalDataset.size()));
    env->SetByteArrayRegion(OperationalDatasetByteArray, 0, static_cast<jsize>(dataResponse.operationalDataset.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.operationalDataset.data()));
    OperationalDataset = OperationalDatasetByteArray;
    jobject Breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Breadcrumb);
    }
    else
    {
        jobject BreadcrumbInsideOptional;
        std::string BreadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string BreadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbInsideOptionalClassName.c_str(),
                                                                       BreadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), BreadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(BreadcrumbInsideOptional, Breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, OperationalDataset, Breadcrumb);
}
CHIPNetworkCommissioningClusterRemoveNetworkCallback::CHIPNetworkCommissioningClusterRemoveNetworkCallback(jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterRemoveNetworkCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterRemoveNetworkCallback::~CHIPNetworkCommissioningClusterRemoveNetworkCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterRemoveNetworkCallback::CallbackFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterRemoveNetworkCallback,
                    void (*)(CHIPNetworkCommissioningClusterRemoveNetworkCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterRemoveNetworkCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterRemoveNetworkCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NetworkID;
    jbyteArray NetworkIDByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.networkID.size()));
    env->SetByteArrayRegion(NetworkIDByteArray, 0, static_cast<jsize>(dataResponse.networkID.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.networkID.data()));
    NetworkID = NetworkIDByteArray;
    jobject Breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Breadcrumb);
    }
    else
    {
        jobject BreadcrumbInsideOptional;
        std::string BreadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string BreadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbInsideOptionalClassName.c_str(),
                                                                       BreadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), BreadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(BreadcrumbInsideOptional, Breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NetworkID, Breadcrumb);
}
CHIPNetworkCommissioningClusterConnectNetworkCallback::CHIPNetworkCommissioningClusterConnectNetworkCallback(jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterConnectNetworkCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterConnectNetworkCallback::~CHIPNetworkCommissioningClusterConnectNetworkCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterConnectNetworkCallback::CallbackFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ConnectNetwork::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterConnectNetworkCallback,
                    void (*)(CHIPNetworkCommissioningClusterConnectNetworkCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterConnectNetworkCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterConnectNetworkCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NetworkID;
    jbyteArray NetworkIDByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.networkID.size()));
    env->SetByteArrayRegion(NetworkIDByteArray, 0, static_cast<jsize>(dataResponse.networkID.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.networkID.data()));
    NetworkID = NetworkIDByteArray;
    jobject Breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Breadcrumb);
    }
    else
    {
        jobject BreadcrumbInsideOptional;
        std::string BreadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string BreadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbInsideOptionalClassName.c_str(),
                                                                       BreadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), BreadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(BreadcrumbInsideOptional, Breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NetworkID, Breadcrumb);
}
CHIPNetworkCommissioningClusterReorderNetworkCallback::CHIPNetworkCommissioningClusterReorderNetworkCallback(jobject javaCallback) :
    Callback::Callback<CHIPNetworkCommissioningClusterReorderNetworkCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPNetworkCommissioningClusterReorderNetworkCallback::~CHIPNetworkCommissioningClusterReorderNetworkCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPNetworkCommissioningClusterReorderNetworkCallback::CallbackFn(
    void * context, const chip::app::Clusters::NetworkCommissioning::Commands::ReorderNetwork::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPNetworkCommissioningClusterReorderNetworkCallback,
                    void (*)(CHIPNetworkCommissioningClusterReorderNetworkCallback *)>
        cppCallback(reinterpret_cast<CHIPNetworkCommissioningClusterReorderNetworkCallback *>(context),
                    chip::Platform::Delete<CHIPNetworkCommissioningClusterReorderNetworkCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NetworkID;
    jbyteArray NetworkIDByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.networkID.size()));
    env->SetByteArrayRegion(NetworkIDByteArray, 0, static_cast<jsize>(dataResponse.networkID.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.networkID.data()));
    NetworkID = NetworkIDByteArray;
    jobject NetworkIndex;
    std::string NetworkIndexClassName     = "java/lang/Integer";
    std::string NetworkIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(NetworkIndexClassName.c_str(), NetworkIndexCtorSignature.c_str(),
                                                                  dataResponse.networkIndex, NetworkIndex);
    jobject Breadcrumb;
    if (!dataResponse.breadcrumb.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Breadcrumb);
    }
    else
    {
        jobject BreadcrumbInsideOptional;
        std::string BreadcrumbInsideOptionalClassName     = "java/lang/Long";
        std::string BreadcrumbInsideOptionalCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(BreadcrumbInsideOptionalClassName.c_str(),
                                                                       BreadcrumbInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.breadcrumb.Value(), BreadcrumbInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(BreadcrumbInsideOptional, Breadcrumb);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NetworkID, NetworkIndex, Breadcrumb);
}
CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback::CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPDiagnosticLogsClusterRetrieveLogsRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback::~CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback,
                    void (*)(CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback *>(context),
                    chip::Platform::Delete<CHIPDiagnosticLogsClusterRetrieveLogsRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Intent;
    std::string IntentClassName     = "java/lang/Integer";
    std::string IntentCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(IntentClassName.c_str(), IntentCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.intent), Intent);
    jobject RequestedProtocol;
    std::string RequestedProtocolClassName     = "java/lang/Integer";
    std::string RequestedProtocolCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        RequestedProtocolClassName.c_str(), RequestedProtocolCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.requestedProtocol), RequestedProtocol);
    jobject TransferFileDesignator;
    if (!dataResponse.transferFileDesignator.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, TransferFileDesignator);
    }
    else
    {
        jobject TransferFileDesignatorInsideOptional;
        TransferFileDesignatorInsideOptional = env->NewStringUTF(
            std::string(dataResponse.transferFileDesignator.Value().data(), dataResponse.transferFileDesignator.Value().size())
                .c_str());
        chip::JniReferences::GetInstance().CreateOptional(TransferFileDesignatorInsideOptional, TransferFileDesignator);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Intent, RequestedProtocol, TransferFileDesignator);
}
CHIPGeneralDiagnosticsClusterTestEventTriggerCallback::CHIPGeneralDiagnosticsClusterTestEventTriggerCallback(jobject javaCallback) :
    Callback::Callback<CHIPGeneralDiagnosticsClusterTestEventTriggerCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGeneralDiagnosticsClusterTestEventTriggerCallback::~CHIPGeneralDiagnosticsClusterTestEventTriggerCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGeneralDiagnosticsClusterTestEventTriggerCallback::CallbackFn(
    void * context, const chip::app::Clusters::GeneralDiagnostics::Commands::TestEventTrigger::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGeneralDiagnosticsClusterTestEventTriggerCallback,
                    void (*)(CHIPGeneralDiagnosticsClusterTestEventTriggerCallback *)>
        cppCallback(reinterpret_cast<CHIPGeneralDiagnosticsClusterTestEventTriggerCallback *>(context),
                    chip::Platform::Delete<CHIPGeneralDiagnosticsClusterTestEventTriggerCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject EnableKey;
    jbyteArray EnableKeyByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.enableKey.size()));
    env->SetByteArrayRegion(EnableKeyByteArray, 0, static_cast<jsize>(dataResponse.enableKey.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.enableKey.data()));
    EnableKey = EnableKeyByteArray;
    jobject EventTrigger;
    std::string EventTriggerClassName     = "java/lang/Long";
    std::string EventTriggerCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(EventTriggerClassName.c_str(), EventTriggerCtorSignature.c_str(),
                                                                   dataResponse.eventTrigger, EventTrigger);

    env->CallVoidMethod(javaCallbackRef, javaMethod, EnableKey, EventTrigger);
}
CHIPSoftwareDiagnosticsClusterResetWatermarksCallback::CHIPSoftwareDiagnosticsClusterResetWatermarksCallback(jobject javaCallback) :
    Callback::Callback<CHIPSoftwareDiagnosticsClusterResetWatermarksCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPSoftwareDiagnosticsClusterResetWatermarksCallback::~CHIPSoftwareDiagnosticsClusterResetWatermarksCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPSoftwareDiagnosticsClusterResetWatermarksCallback::CallbackFn(
    void * context, const chip::app::Clusters::SoftwareDiagnostics::Commands::ResetWatermarks::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPSoftwareDiagnosticsClusterResetWatermarksCallback,
                    void (*)(CHIPSoftwareDiagnosticsClusterResetWatermarksCallback *)>
        cppCallback(reinterpret_cast<CHIPSoftwareDiagnosticsClusterResetWatermarksCallback *>(context),
                    chip::Platform::Delete<CHIPSoftwareDiagnosticsClusterResetWatermarksCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPThreadNetworkDiagnosticsClusterResetCountsCallback::CHIPThreadNetworkDiagnosticsClusterResetCountsCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPThreadNetworkDiagnosticsClusterResetCountsCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPThreadNetworkDiagnosticsClusterResetCountsCallback::~CHIPThreadNetworkDiagnosticsClusterResetCountsCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPThreadNetworkDiagnosticsClusterResetCountsCallback::CallbackFn(
    void * context, const chip::app::Clusters::ThreadNetworkDiagnostics::Commands::ResetCounts::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPThreadNetworkDiagnosticsClusterResetCountsCallback,
                    void (*)(CHIPThreadNetworkDiagnosticsClusterResetCountsCallback *)>
        cppCallback(reinterpret_cast<CHIPThreadNetworkDiagnosticsClusterResetCountsCallback *>(context),
                    chip::Platform::Delete<CHIPThreadNetworkDiagnosticsClusterResetCountsCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback::CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback(jobject javaCallback) :
    Callback::Callback<CHIPWiFiNetworkDiagnosticsClusterResetCountsCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback::~CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback::CallbackFn(
    void * context, const chip::app::Clusters::WiFiNetworkDiagnostics::Commands::ResetCounts::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback,
                    void (*)(CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback *)>
        cppCallback(reinterpret_cast<CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback *>(context),
                    chip::Platform::Delete<CHIPWiFiNetworkDiagnosticsClusterResetCountsCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback::CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPEthernetNetworkDiagnosticsClusterResetCountsCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback::~CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback::CallbackFn(
    void * context, const chip::app::Clusters::EthernetNetworkDiagnostics::Commands::ResetCounts::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback,
                    void (*)(CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback *)>
        cppCallback(reinterpret_cast<CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback *>(context),
                    chip::Platform::Delete<CHIPEthernetNetworkDiagnosticsClusterResetCountsCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback::
    CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback(jobject javaCallback) :
    Callback::Callback<CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback::
    ~CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::AdministratorCommissioning::Commands::OpenCommissioningWindow::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback,
                    void (*)(CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback *)>
        cppCallback(reinterpret_cast<CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback *>(context),
                    chip::Platform::Delete<CHIPAdministratorCommissioningClusterOpenCommissioningWindowCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;[BLjava/lang/Integer;Ljava/lang/Long;[B)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject CommissioningTimeout;
    std::string CommissioningTimeoutClassName     = "java/lang/Integer";
    std::string CommissioningTimeoutCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(CommissioningTimeoutClassName.c_str(),
                                                                   CommissioningTimeoutCtorSignature.c_str(),
                                                                   dataResponse.commissioningTimeout, CommissioningTimeout);
    jobject PAKEPasscodeVerifier;
    jbyteArray PAKEPasscodeVerifierByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.PAKEPasscodeVerifier.size()));
    env->SetByteArrayRegion(PAKEPasscodeVerifierByteArray, 0, static_cast<jsize>(dataResponse.PAKEPasscodeVerifier.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.PAKEPasscodeVerifier.data()));
    PAKEPasscodeVerifier = PAKEPasscodeVerifierByteArray;
    jobject Discriminator;
    std::string DiscriminatorClassName     = "java/lang/Integer";
    std::string DiscriminatorCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        DiscriminatorClassName.c_str(), DiscriminatorCtorSignature.c_str(), dataResponse.discriminator, Discriminator);
    jobject Iterations;
    std::string IterationsClassName     = "java/lang/Long";
    std::string IterationsCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(IterationsClassName.c_str(), IterationsCtorSignature.c_str(),
                                                                   dataResponse.iterations, Iterations);
    jobject Salt;
    jbyteArray SaltByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.salt.size()));
    env->SetByteArrayRegion(SaltByteArray, 0, static_cast<jsize>(dataResponse.salt.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.salt.data()));
    Salt = SaltByteArray;

    env->CallVoidMethod(javaCallbackRef, javaMethod, CommissioningTimeout, PAKEPasscodeVerifier, Discriminator, Iterations, Salt);
}
CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback::
    CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback(jobject javaCallback) :
    Callback::Callback<CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback::
    ~CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback,
                    void (*)(CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback *)>
        cppCallback(reinterpret_cast<CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback *>(context),
                    chip::Platform::Delete<CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject CommissioningTimeout;
    std::string CommissioningTimeoutClassName     = "java/lang/Integer";
    std::string CommissioningTimeoutCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(CommissioningTimeoutClassName.c_str(),
                                                                   CommissioningTimeoutCtorSignature.c_str(),
                                                                   dataResponse.commissioningTimeout, CommissioningTimeout);

    env->CallVoidMethod(javaCallbackRef, javaMethod, CommissioningTimeout);
}
CHIPAdministratorCommissioningClusterRevokeCommissioningCallback::CHIPAdministratorCommissioningClusterRevokeCommissioningCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPAdministratorCommissioningClusterRevokeCommissioningCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAdministratorCommissioningClusterRevokeCommissioningCallback::
    ~CHIPAdministratorCommissioningClusterRevokeCommissioningCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAdministratorCommissioningClusterRevokeCommissioningCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::AdministratorCommissioning::Commands::RevokeCommissioning::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAdministratorCommissioningClusterRevokeCommissioningCallback,
                    void (*)(CHIPAdministratorCommissioningClusterRevokeCommissioningCallback *)>
        cppCallback(reinterpret_cast<CHIPAdministratorCommissioningClusterRevokeCommissioningCallback *>(context),
                    chip::Platform::Delete<CHIPAdministratorCommissioningClusterRevokeCommissioningCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPOperationalCredentialsClusterAttestationRequestCallback::CHIPOperationalCredentialsClusterAttestationRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterAttestationRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterAttestationRequestCallback::~CHIPOperationalCredentialsClusterAttestationRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterAttestationRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterAttestationRequestCallback,
                    void (*)(CHIPOperationalCredentialsClusterAttestationRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterAttestationRequestCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterAttestationRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([B)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject AttestationNonce;
    jbyteArray AttestationNonceByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.attestationNonce.size()));
    env->SetByteArrayRegion(AttestationNonceByteArray, 0, static_cast<jsize>(dataResponse.attestationNonce.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.attestationNonce.data()));
    AttestationNonce = AttestationNonceByteArray;

    env->CallVoidMethod(javaCallbackRef, javaMethod, AttestationNonce);
}
CHIPOperationalCredentialsClusterCertificateChainRequestCallback::CHIPOperationalCredentialsClusterCertificateChainRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterCertificateChainRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterCertificateChainRequestCallback::
    ~CHIPOperationalCredentialsClusterCertificateChainRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterCertificateChainRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterCertificateChainRequestCallback,
                    void (*)(CHIPOperationalCredentialsClusterCertificateChainRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterCertificateChainRequestCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterCertificateChainRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject CertificateType;
    std::string CertificateTypeClassName     = "java/lang/Integer";
    std::string CertificateTypeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        CertificateTypeClassName.c_str(), CertificateTypeCtorSignature.c_str(), static_cast<uint8_t>(dataResponse.certificateType),
        CertificateType);

    env->CallVoidMethod(javaCallbackRef, javaMethod, CertificateType);
}
CHIPOperationalCredentialsClusterCSRRequestCallback::CHIPOperationalCredentialsClusterCSRRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterCSRRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterCSRRequestCallback::~CHIPOperationalCredentialsClusterCSRRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterCSRRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::CSRRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterCSRRequestCallback,
                    void (*)(CHIPOperationalCredentialsClusterCSRRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterCSRRequestCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterCSRRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject CSRNonce;
    jbyteArray CSRNonceByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.CSRNonce.size()));
    env->SetByteArrayRegion(CSRNonceByteArray, 0, static_cast<jsize>(dataResponse.CSRNonce.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.CSRNonce.data()));
    CSRNonce = CSRNonceByteArray;
    jobject IsForUpdateNOC;
    if (!dataResponse.isForUpdateNOC.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, IsForUpdateNOC);
    }
    else
    {
        jobject IsForUpdateNOCInsideOptional;
        std::string IsForUpdateNOCInsideOptionalClassName     = "java/lang/Boolean";
        std::string IsForUpdateNOCInsideOptionalCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
            IsForUpdateNOCInsideOptionalClassName.c_str(), IsForUpdateNOCInsideOptionalCtorSignature.c_str(),
            dataResponse.isForUpdateNOC.Value(), IsForUpdateNOCInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(IsForUpdateNOCInsideOptional, IsForUpdateNOC);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, CSRNonce, IsForUpdateNOC);
}
CHIPOperationalCredentialsClusterAddNOCCallback::CHIPOperationalCredentialsClusterAddNOCCallback(jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterAddNOCCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterAddNOCCallback::~CHIPOperationalCredentialsClusterAddNOCCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterAddNOCCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::AddNOC::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterAddNOCCallback, void (*)(CHIPOperationalCredentialsClusterAddNOCCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterAddNOCCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterAddNOCCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "([BLjava/util/Optional;[BLjava/lang/Long;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NOCValue;
    jbyteArray NOCValueByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.NOCValue.size()));
    env->SetByteArrayRegion(NOCValueByteArray, 0, static_cast<jsize>(dataResponse.NOCValue.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.NOCValue.data()));
    NOCValue = NOCValueByteArray;
    jobject ICACValue;
    if (!dataResponse.ICACValue.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, ICACValue);
    }
    else
    {
        jobject ICACValueInsideOptional;
        jbyteArray ICACValueInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.ICACValue.Value().size()));
        env->SetByteArrayRegion(ICACValueInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.ICACValue.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.ICACValue.Value().data()));
        ICACValueInsideOptional = ICACValueInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(ICACValueInsideOptional, ICACValue);
    }
    jobject IPKValue;
    jbyteArray IPKValueByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.IPKValue.size()));
    env->SetByteArrayRegion(IPKValueByteArray, 0, static_cast<jsize>(dataResponse.IPKValue.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.IPKValue.data()));
    IPKValue = IPKValueByteArray;
    jobject CaseAdminSubject;
    std::string CaseAdminSubjectClassName     = "java/lang/Long";
    std::string CaseAdminSubjectCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
        CaseAdminSubjectClassName.c_str(), CaseAdminSubjectCtorSignature.c_str(), dataResponse.caseAdminSubject, CaseAdminSubject);
    jobject AdminVendorId;
    std::string AdminVendorIdClassName     = "java/lang/Integer";
    std::string AdminVendorIdCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        AdminVendorIdClassName.c_str(), AdminVendorIdCtorSignature.c_str(), static_cast<uint16_t>(dataResponse.adminVendorId),
        AdminVendorId);

    env->CallVoidMethod(javaCallbackRef, javaMethod, NOCValue, ICACValue, IPKValue, CaseAdminSubject, AdminVendorId);
}
CHIPOperationalCredentialsClusterUpdateNOCCallback::CHIPOperationalCredentialsClusterUpdateNOCCallback(jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterUpdateNOCCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterUpdateNOCCallback::~CHIPOperationalCredentialsClusterUpdateNOCCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterUpdateNOCCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::UpdateNOC::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterUpdateNOCCallback,
                    void (*)(CHIPOperationalCredentialsClusterUpdateNOCCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterUpdateNOCCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterUpdateNOCCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([BLjava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NOCValue;
    jbyteArray NOCValueByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.NOCValue.size()));
    env->SetByteArrayRegion(NOCValueByteArray, 0, static_cast<jsize>(dataResponse.NOCValue.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.NOCValue.data()));
    NOCValue = NOCValueByteArray;
    jobject ICACValue;
    if (!dataResponse.ICACValue.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, ICACValue);
    }
    else
    {
        jobject ICACValueInsideOptional;
        jbyteArray ICACValueInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.ICACValue.Value().size()));
        env->SetByteArrayRegion(ICACValueInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.ICACValue.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.ICACValue.Value().data()));
        ICACValueInsideOptional = ICACValueInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(ICACValueInsideOptional, ICACValue);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NOCValue, ICACValue);
}
CHIPOperationalCredentialsClusterUpdateFabricLabelCallback::CHIPOperationalCredentialsClusterUpdateFabricLabelCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterUpdateFabricLabelCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterUpdateFabricLabelCallback::~CHIPOperationalCredentialsClusterUpdateFabricLabelCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterUpdateFabricLabelCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterUpdateFabricLabelCallback,
                    void (*)(CHIPOperationalCredentialsClusterUpdateFabricLabelCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterUpdateFabricLabelCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterUpdateFabricLabelCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/String;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Label;
    Label = env->NewStringUTF(std::string(dataResponse.label.data(), dataResponse.label.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, Label);
}
CHIPOperationalCredentialsClusterRemoveFabricCallback::CHIPOperationalCredentialsClusterRemoveFabricCallback(jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterRemoveFabricCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterRemoveFabricCallback::~CHIPOperationalCredentialsClusterRemoveFabricCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterRemoveFabricCallback::CallbackFn(
    void * context, const chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterRemoveFabricCallback,
                    void (*)(CHIPOperationalCredentialsClusterRemoveFabricCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterRemoveFabricCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterRemoveFabricCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject FabricIndex;
    std::string FabricIndexClassName     = "java/lang/Integer";
    std::string FabricIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(FabricIndexClassName.c_str(), FabricIndexCtorSignature.c_str(),
                                                                  dataResponse.fabricIndex, FabricIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, FabricIndex);
}
CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback::
    CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback(jobject javaCallback) :
    Callback::Callback<CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback::
    ~CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback,
                    void (*)(CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback *)>
        cppCallback(reinterpret_cast<CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback *>(context),
                    chip::Platform::Delete<CHIPOperationalCredentialsClusterAddTrustedRootCertificateCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "([B)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject RootCACertificate;
    jbyteArray RootCACertificateByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.rootCACertificate.size()));
    env->SetByteArrayRegion(RootCACertificateByteArray, 0, static_cast<jsize>(dataResponse.rootCACertificate.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.rootCACertificate.data()));
    RootCACertificate = RootCACertificateByteArray;

    env->CallVoidMethod(javaCallbackRef, javaMethod, RootCACertificate);
}
CHIPGroupKeyManagementClusterKeySetWriteCallback::CHIPGroupKeyManagementClusterKeySetWriteCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupKeyManagementClusterKeySetWriteCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupKeyManagementClusterKeySetWriteCallback::~CHIPGroupKeyManagementClusterKeySetWriteCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupKeyManagementClusterKeySetWriteCallback::CallbackFn(
    void * context, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetWrite::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupKeyManagementClusterKeySetWriteCallback, void (*)(CHIPGroupKeyManagementClusterKeySetWriteCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupKeyManagementClusterKeySetWriteCallback *>(context),
                    chip::Platform::Delete<CHIPGroupKeyManagementClusterKeySetWriteCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$GroupKeyManagementClusterGroupKeySetStruct;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupKeySet;
    jobject GroupKeySet_groupKeySetID;
    std::string GroupKeySet_groupKeySetIDClassName     = "java/lang/Integer";
    std::string GroupKeySet_groupKeySetIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        GroupKeySet_groupKeySetIDClassName.c_str(), GroupKeySet_groupKeySetIDCtorSignature.c_str(),
        dataResponse.groupKeySet.groupKeySetID, GroupKeySet_groupKeySetID);
    jobject GroupKeySet_groupKeySecurityPolicy;
    std::string GroupKeySet_groupKeySecurityPolicyClassName     = "java/lang/Integer";
    std::string GroupKeySet_groupKeySecurityPolicyCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        GroupKeySet_groupKeySecurityPolicyClassName.c_str(), GroupKeySet_groupKeySecurityPolicyCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.groupKeySet.groupKeySecurityPolicy), GroupKeySet_groupKeySecurityPolicy);
    jobject GroupKeySet_epochKey0;
    if (dataResponse.groupKeySet.epochKey0.IsNull())
    {
        GroupKeySet_epochKey0 = nullptr;
    }
    else
    {
        jbyteArray GroupKeySet_epochKey0ByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.groupKeySet.epochKey0.Value().size()));
        env->SetByteArrayRegion(GroupKeySet_epochKey0ByteArray, 0,
                                static_cast<jsize>(dataResponse.groupKeySet.epochKey0.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.groupKeySet.epochKey0.Value().data()));
        GroupKeySet_epochKey0 = GroupKeySet_epochKey0ByteArray;
    }
    jobject GroupKeySet_epochStartTime0;
    if (dataResponse.groupKeySet.epochStartTime0.IsNull())
    {
        GroupKeySet_epochStartTime0 = nullptr;
    }
    else
    {
        std::string GroupKeySet_epochStartTime0ClassName     = "java/lang/Long";
        std::string GroupKeySet_epochStartTime0CtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
            GroupKeySet_epochStartTime0ClassName.c_str(), GroupKeySet_epochStartTime0CtorSignature.c_str(),
            dataResponse.groupKeySet.epochStartTime0.Value(), GroupKeySet_epochStartTime0);
    }
    jobject GroupKeySet_epochKey1;
    if (dataResponse.groupKeySet.epochKey1.IsNull())
    {
        GroupKeySet_epochKey1 = nullptr;
    }
    else
    {
        jbyteArray GroupKeySet_epochKey1ByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.groupKeySet.epochKey1.Value().size()));
        env->SetByteArrayRegion(GroupKeySet_epochKey1ByteArray, 0,
                                static_cast<jsize>(dataResponse.groupKeySet.epochKey1.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.groupKeySet.epochKey1.Value().data()));
        GroupKeySet_epochKey1 = GroupKeySet_epochKey1ByteArray;
    }
    jobject GroupKeySet_epochStartTime1;
    if (dataResponse.groupKeySet.epochStartTime1.IsNull())
    {
        GroupKeySet_epochStartTime1 = nullptr;
    }
    else
    {
        std::string GroupKeySet_epochStartTime1ClassName     = "java/lang/Long";
        std::string GroupKeySet_epochStartTime1CtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
            GroupKeySet_epochStartTime1ClassName.c_str(), GroupKeySet_epochStartTime1CtorSignature.c_str(),
            dataResponse.groupKeySet.epochStartTime1.Value(), GroupKeySet_epochStartTime1);
    }
    jobject GroupKeySet_epochKey2;
    if (dataResponse.groupKeySet.epochKey2.IsNull())
    {
        GroupKeySet_epochKey2 = nullptr;
    }
    else
    {
        jbyteArray GroupKeySet_epochKey2ByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.groupKeySet.epochKey2.Value().size()));
        env->SetByteArrayRegion(GroupKeySet_epochKey2ByteArray, 0,
                                static_cast<jsize>(dataResponse.groupKeySet.epochKey2.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.groupKeySet.epochKey2.Value().data()));
        GroupKeySet_epochKey2 = GroupKeySet_epochKey2ByteArray;
    }
    jobject GroupKeySet_epochStartTime2;
    if (dataResponse.groupKeySet.epochStartTime2.IsNull())
    {
        GroupKeySet_epochStartTime2 = nullptr;
    }
    else
    {
        std::string GroupKeySet_epochStartTime2ClassName     = "java/lang/Long";
        std::string GroupKeySet_epochStartTime2CtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
            GroupKeySet_epochStartTime2ClassName.c_str(), GroupKeySet_epochStartTime2CtorSignature.c_str(),
            dataResponse.groupKeySet.epochStartTime2.Value(), GroupKeySet_epochStartTime2);
    }

    jclass groupKeySetStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(
        env, "chip/devicecontroller/ChipStructs$GroupKeyManagementClusterGroupKeySetStruct", groupKeySetStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$GroupKeyManagementClusterGroupKeySetStruct");
        return;
    }
    jmethodID groupKeySetStructStructCtor_0 =
        env->GetMethodID(groupKeySetStructStructClass_0, "<init>",
                         "(Ljava/lang/Integer;Ljava/lang/Integer;[BLjava/lang/Long;[BLjava/lang/Long;[BLjava/lang/Long;)V");
    if (groupKeySetStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$GroupKeyManagementClusterGroupKeySetStruct constructor");
        return;
    }

    GroupKeySet =
        env->NewObject(groupKeySetStructStructClass_0, groupKeySetStructStructCtor_0, GroupKeySet_groupKeySetID,
                       GroupKeySet_groupKeySecurityPolicy, GroupKeySet_epochKey0, GroupKeySet_epochStartTime0,
                       GroupKeySet_epochKey1, GroupKeySet_epochStartTime1, GroupKeySet_epochKey2, GroupKeySet_epochStartTime2);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupKeySet);
}
CHIPGroupKeyManagementClusterKeySetReadCallback::CHIPGroupKeyManagementClusterKeySetReadCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupKeyManagementClusterKeySetReadCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupKeyManagementClusterKeySetReadCallback::~CHIPGroupKeyManagementClusterKeySetReadCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupKeyManagementClusterKeySetReadCallback::CallbackFn(
    void * context, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetRead::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupKeyManagementClusterKeySetReadCallback, void (*)(CHIPGroupKeyManagementClusterKeySetReadCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupKeyManagementClusterKeySetReadCallback *>(context),
                    chip::Platform::Delete<CHIPGroupKeyManagementClusterKeySetReadCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupKeySetID;
    std::string GroupKeySetIDClassName     = "java/lang/Integer";
    std::string GroupKeySetIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        GroupKeySetIDClassName.c_str(), GroupKeySetIDCtorSignature.c_str(), dataResponse.groupKeySetID, GroupKeySetID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupKeySetID);
}
CHIPGroupKeyManagementClusterKeySetRemoveCallback::CHIPGroupKeyManagementClusterKeySetRemoveCallback(jobject javaCallback) :
    Callback::Callback<CHIPGroupKeyManagementClusterKeySetRemoveCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupKeyManagementClusterKeySetRemoveCallback::~CHIPGroupKeyManagementClusterKeySetRemoveCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupKeyManagementClusterKeySetRemoveCallback::CallbackFn(
    void * context, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetRemove::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupKeyManagementClusterKeySetRemoveCallback,
                    void (*)(CHIPGroupKeyManagementClusterKeySetRemoveCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupKeyManagementClusterKeySetRemoveCallback *>(context),
                    chip::Platform::Delete<CHIPGroupKeyManagementClusterKeySetRemoveCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupKeySetID;
    std::string GroupKeySetIDClassName     = "java/lang/Integer";
    std::string GroupKeySetIDCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        GroupKeySetIDClassName.c_str(), GroupKeySetIDCtorSignature.c_str(), dataResponse.groupKeySetID, GroupKeySetID);

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupKeySetID);
}
CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback::CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback::~CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback::CallbackFn(
    void * context, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadAllIndices::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback,
                    void (*)(CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback *)>
        cppCallback(reinterpret_cast<CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback *>(context),
                    chip::Platform::Delete<CHIPGroupKeyManagementClusterKeySetReadAllIndicesCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject GroupKeySetIDs;
    chip::JniReferences::GetInstance().CreateArrayList(GroupKeySetIDs);

    auto iter_GroupKeySetIDs_0 = dataResponse.groupKeySetIDs.begin();
    while (iter_GroupKeySetIDs_0.Next())
    {
        auto & entry_0 = iter_GroupKeySetIDs_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(newElement_0ClassName.c_str(),
                                                                       newElement_0CtorSignature.c_str(), entry_0, newElement_0);
        chip::JniReferences::GetInstance().AddToList(GroupKeySetIDs, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, GroupKeySetIDs);
}
CHIPModeSelectClusterChangeToModeCallback::CHIPModeSelectClusterChangeToModeCallback(jobject javaCallback) :
    Callback::Callback<CHIPModeSelectClusterChangeToModeCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPModeSelectClusterChangeToModeCallback::~CHIPModeSelectClusterChangeToModeCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPModeSelectClusterChangeToModeCallback::CallbackFn(
    void * context, const chip::app::Clusters::ModeSelect::Commands::ChangeToMode::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPModeSelectClusterChangeToModeCallback, void (*)(CHIPModeSelectClusterChangeToModeCallback *)> cppCallback(
        reinterpret_cast<CHIPModeSelectClusterChangeToModeCallback *>(context),
        chip::Platform::Delete<CHIPModeSelectClusterChangeToModeCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NewMode;
    std::string NewModeClassName     = "java/lang/Integer";
    std::string NewModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(NewModeClassName.c_str(), NewModeCtorSignature.c_str(),
                                                                  dataResponse.newMode, NewMode);

    env->CallVoidMethod(javaCallbackRef, javaMethod, NewMode);
}
CHIPDoorLockClusterLockDoorCallback::CHIPDoorLockClusterLockDoorCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterLockDoorCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterLockDoorCallback::~CHIPDoorLockClusterLockDoorCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterLockDoorCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::LockDoor::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterLockDoorCallback, void (*)(CHIPDoorLockClusterLockDoorCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterLockDoorCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterLockDoorCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject PINCode;
    if (!dataResponse.PINCode.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, PINCode);
    }
    else
    {
        jobject PINCodeInsideOptional;
        jbyteArray PINCodeInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.PINCode.Value().size()));
        env->SetByteArrayRegion(PINCodeInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.PINCode.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.PINCode.Value().data()));
        PINCodeInsideOptional = PINCodeInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(PINCodeInsideOptional, PINCode);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, PINCode);
}
CHIPDoorLockClusterUnlockDoorCallback::CHIPDoorLockClusterUnlockDoorCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterUnlockDoorCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterUnlockDoorCallback::~CHIPDoorLockClusterUnlockDoorCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterUnlockDoorCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockDoor::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterUnlockDoorCallback, void (*)(CHIPDoorLockClusterUnlockDoorCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterUnlockDoorCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterUnlockDoorCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject PINCode;
    if (!dataResponse.PINCode.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, PINCode);
    }
    else
    {
        jobject PINCodeInsideOptional;
        jbyteArray PINCodeInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.PINCode.Value().size()));
        env->SetByteArrayRegion(PINCodeInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.PINCode.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.PINCode.Value().data()));
        PINCodeInsideOptional = PINCodeInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(PINCodeInsideOptional, PINCode);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, PINCode);
}
CHIPDoorLockClusterUnlockWithTimeoutCallback::CHIPDoorLockClusterUnlockWithTimeoutCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterUnlockWithTimeoutCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterUnlockWithTimeoutCallback::~CHIPDoorLockClusterUnlockWithTimeoutCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterUnlockWithTimeoutCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::UnlockWithTimeout::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterUnlockWithTimeoutCallback, void (*)(CHIPDoorLockClusterUnlockWithTimeoutCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterUnlockWithTimeoutCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterUnlockWithTimeoutCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Timeout;
    std::string TimeoutClassName     = "java/lang/Integer";
    std::string TimeoutCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TimeoutClassName.c_str(), TimeoutCtorSignature.c_str(),
                                                                   dataResponse.timeout, Timeout);
    jobject PINCode;
    if (!dataResponse.PINCode.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, PINCode);
    }
    else
    {
        jobject PINCodeInsideOptional;
        jbyteArray PINCodeInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.PINCode.Value().size()));
        env->SetByteArrayRegion(PINCodeInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.PINCode.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.PINCode.Value().data()));
        PINCodeInsideOptional = PINCodeInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(PINCodeInsideOptional, PINCode);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Timeout, PINCode);
}
CHIPDoorLockClusterSetWeekDayScheduleCallback::CHIPDoorLockClusterSetWeekDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterSetWeekDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterSetWeekDayScheduleCallback::~CHIPDoorLockClusterSetWeekDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterSetWeekDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetWeekDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterSetWeekDayScheduleCallback, void (*)(CHIPDoorLockClusterSetWeekDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterSetWeekDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterSetWeekDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/"
                                                  "Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject WeekDayIndex;
    std::string WeekDayIndexClassName     = "java/lang/Integer";
    std::string WeekDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(WeekDayIndexClassName.c_str(), WeekDayIndexCtorSignature.c_str(),
                                                                  dataResponse.weekDayIndex, WeekDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);
    jobject DaysMask;
    std::string DaysMaskClassName     = "java/lang/Integer";
    std::string DaysMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DaysMaskClassName.c_str(), DaysMaskCtorSignature.c_str(),
                                                                  dataResponse.daysMask.Raw(), DaysMask);
    jobject StartHour;
    std::string StartHourClassName     = "java/lang/Integer";
    std::string StartHourCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StartHourClassName.c_str(), StartHourCtorSignature.c_str(),
                                                                  dataResponse.startHour, StartHour);
    jobject StartMinute;
    std::string StartMinuteClassName     = "java/lang/Integer";
    std::string StartMinuteCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StartMinuteClassName.c_str(), StartMinuteCtorSignature.c_str(),
                                                                  dataResponse.startMinute, StartMinute);
    jobject EndHour;
    std::string EndHourClassName     = "java/lang/Integer";
    std::string EndHourCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(EndHourClassName.c_str(), EndHourCtorSignature.c_str(),
                                                                  dataResponse.endHour, EndHour);
    jobject EndMinute;
    std::string EndMinuteClassName     = "java/lang/Integer";
    std::string EndMinuteCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(EndMinuteClassName.c_str(), EndMinuteCtorSignature.c_str(),
                                                                  dataResponse.endMinute, EndMinute);

    env->CallVoidMethod(javaCallbackRef, javaMethod, WeekDayIndex, UserIndex, DaysMask, StartHour, StartMinute, EndHour, EndMinute);
}
CHIPDoorLockClusterGetWeekDayScheduleCallback::CHIPDoorLockClusterGetWeekDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterGetWeekDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterGetWeekDayScheduleCallback::~CHIPDoorLockClusterGetWeekDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterGetWeekDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetWeekDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterGetWeekDayScheduleCallback, void (*)(CHIPDoorLockClusterGetWeekDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterGetWeekDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterGetWeekDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject WeekDayIndex;
    std::string WeekDayIndexClassName     = "java/lang/Integer";
    std::string WeekDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(WeekDayIndexClassName.c_str(), WeekDayIndexCtorSignature.c_str(),
                                                                  dataResponse.weekDayIndex, WeekDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, WeekDayIndex, UserIndex);
}
CHIPDoorLockClusterClearWeekDayScheduleCallback::CHIPDoorLockClusterClearWeekDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterClearWeekDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterClearWeekDayScheduleCallback::~CHIPDoorLockClusterClearWeekDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterClearWeekDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearWeekDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterClearWeekDayScheduleCallback, void (*)(CHIPDoorLockClusterClearWeekDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterClearWeekDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterClearWeekDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject WeekDayIndex;
    std::string WeekDayIndexClassName     = "java/lang/Integer";
    std::string WeekDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(WeekDayIndexClassName.c_str(), WeekDayIndexCtorSignature.c_str(),
                                                                  dataResponse.weekDayIndex, WeekDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, WeekDayIndex, UserIndex);
}
CHIPDoorLockClusterSetYearDayScheduleCallback::CHIPDoorLockClusterSetYearDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterSetYearDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterSetYearDayScheduleCallback::~CHIPDoorLockClusterSetYearDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterSetYearDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetYearDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterSetYearDayScheduleCallback, void (*)(CHIPDoorLockClusterSetYearDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterSetYearDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterSetYearDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Long;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject YearDayIndex;
    std::string YearDayIndexClassName     = "java/lang/Integer";
    std::string YearDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(YearDayIndexClassName.c_str(), YearDayIndexCtorSignature.c_str(),
                                                                  dataResponse.yearDayIndex, YearDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);
    jobject LocalStartTime;
    std::string LocalStartTimeClassName     = "java/lang/Long";
    std::string LocalStartTimeCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
        LocalStartTimeClassName.c_str(), LocalStartTimeCtorSignature.c_str(), dataResponse.localStartTime, LocalStartTime);
    jobject LocalEndTime;
    std::string LocalEndTimeClassName     = "java/lang/Long";
    std::string LocalEndTimeCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(LocalEndTimeClassName.c_str(), LocalEndTimeCtorSignature.c_str(),
                                                                   dataResponse.localEndTime, LocalEndTime);

    env->CallVoidMethod(javaCallbackRef, javaMethod, YearDayIndex, UserIndex, LocalStartTime, LocalEndTime);
}
CHIPDoorLockClusterGetYearDayScheduleCallback::CHIPDoorLockClusterGetYearDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterGetYearDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterGetYearDayScheduleCallback::~CHIPDoorLockClusterGetYearDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterGetYearDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetYearDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterGetYearDayScheduleCallback, void (*)(CHIPDoorLockClusterGetYearDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterGetYearDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterGetYearDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject YearDayIndex;
    std::string YearDayIndexClassName     = "java/lang/Integer";
    std::string YearDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(YearDayIndexClassName.c_str(), YearDayIndexCtorSignature.c_str(),
                                                                  dataResponse.yearDayIndex, YearDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, YearDayIndex, UserIndex);
}
CHIPDoorLockClusterClearYearDayScheduleCallback::CHIPDoorLockClusterClearYearDayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterClearYearDayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterClearYearDayScheduleCallback::~CHIPDoorLockClusterClearYearDayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterClearYearDayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearYearDaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterClearYearDayScheduleCallback, void (*)(CHIPDoorLockClusterClearYearDayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterClearYearDayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterClearYearDayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject YearDayIndex;
    std::string YearDayIndexClassName     = "java/lang/Integer";
    std::string YearDayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(YearDayIndexClassName.c_str(), YearDayIndexCtorSignature.c_str(),
                                                                  dataResponse.yearDayIndex, YearDayIndex);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, YearDayIndex, UserIndex);
}
CHIPDoorLockClusterSetHolidayScheduleCallback::CHIPDoorLockClusterSetHolidayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterSetHolidayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterSetHolidayScheduleCallback::~CHIPDoorLockClusterSetHolidayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterSetHolidayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetHolidaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterSetHolidayScheduleCallback, void (*)(CHIPDoorLockClusterSetHolidayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterSetHolidayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterSetHolidayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject HolidayIndex;
    std::string HolidayIndexClassName     = "java/lang/Integer";
    std::string HolidayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(HolidayIndexClassName.c_str(), HolidayIndexCtorSignature.c_str(),
                                                                  dataResponse.holidayIndex, HolidayIndex);
    jobject LocalStartTime;
    std::string LocalStartTimeClassName     = "java/lang/Long";
    std::string LocalStartTimeCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
        LocalStartTimeClassName.c_str(), LocalStartTimeCtorSignature.c_str(), dataResponse.localStartTime, LocalStartTime);
    jobject LocalEndTime;
    std::string LocalEndTimeClassName     = "java/lang/Long";
    std::string LocalEndTimeCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(LocalEndTimeClassName.c_str(), LocalEndTimeCtorSignature.c_str(),
                                                                   dataResponse.localEndTime, LocalEndTime);
    jobject OperatingMode;
    std::string OperatingModeClassName     = "java/lang/Integer";
    std::string OperatingModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OperatingModeClassName.c_str(),
                                                                  OperatingModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.operatingMode), OperatingMode);

    env->CallVoidMethod(javaCallbackRef, javaMethod, HolidayIndex, LocalStartTime, LocalEndTime, OperatingMode);
}
CHIPDoorLockClusterGetHolidayScheduleCallback::CHIPDoorLockClusterGetHolidayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterGetHolidayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterGetHolidayScheduleCallback::~CHIPDoorLockClusterGetHolidayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterGetHolidayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetHolidaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterGetHolidayScheduleCallback, void (*)(CHIPDoorLockClusterGetHolidayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterGetHolidayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterGetHolidayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject HolidayIndex;
    std::string HolidayIndexClassName     = "java/lang/Integer";
    std::string HolidayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(HolidayIndexClassName.c_str(), HolidayIndexCtorSignature.c_str(),
                                                                  dataResponse.holidayIndex, HolidayIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, HolidayIndex);
}
CHIPDoorLockClusterClearHolidayScheduleCallback::CHIPDoorLockClusterClearHolidayScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterClearHolidayScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterClearHolidayScheduleCallback::~CHIPDoorLockClusterClearHolidayScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterClearHolidayScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearHolidaySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterClearHolidayScheduleCallback, void (*)(CHIPDoorLockClusterClearHolidayScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterClearHolidayScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterClearHolidayScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject HolidayIndex;
    std::string HolidayIndexClassName     = "java/lang/Integer";
    std::string HolidayIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(HolidayIndexClassName.c_str(), HolidayIndexCtorSignature.c_str(),
                                                                  dataResponse.holidayIndex, HolidayIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, HolidayIndex);
}
CHIPDoorLockClusterSetUserCallback::CHIPDoorLockClusterSetUserCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterSetUserCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterSetUserCallback::~CHIPDoorLockClusterSetUserCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterSetUserCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetUser::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterSetUserCallback, void (*)(CHIPDoorLockClusterSetUserCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterSetUserCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterSetUserCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Long;Ljava/"
                                                  "lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OperationType;
    std::string OperationTypeClassName     = "java/lang/Integer";
    std::string OperationTypeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OperationTypeClassName.c_str(),
                                                                  OperationTypeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.operationType), OperationType);
    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);
    jobject UserName;
    if (dataResponse.userName.IsNull())
    {
        UserName = nullptr;
    }
    else
    {
        UserName =
            env->NewStringUTF(std::string(dataResponse.userName.Value().data(), dataResponse.userName.Value().size()).c_str());
    }
    jobject UserUniqueID;
    if (dataResponse.userUniqueID.IsNull())
    {
        UserUniqueID = nullptr;
    }
    else
    {
        std::string UserUniqueIDClassName     = "java/lang/Long";
        std::string UserUniqueIDCtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
            UserUniqueIDClassName.c_str(), UserUniqueIDCtorSignature.c_str(), dataResponse.userUniqueID.Value(), UserUniqueID);
    }
    jobject UserStatus;
    if (dataResponse.userStatus.IsNull())
    {
        UserStatus = nullptr;
    }
    else
    {
        std::string UserStatusClassName     = "java/lang/Integer";
        std::string UserStatusCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(UserStatusClassName.c_str(), UserStatusCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(dataResponse.userStatus.Value()),
                                                                      UserStatus);
    }
    jobject UserType;
    if (dataResponse.userType.IsNull())
    {
        UserType = nullptr;
    }
    else
    {
        std::string UserTypeClassName     = "java/lang/Integer";
        std::string UserTypeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(UserTypeClassName.c_str(), UserTypeCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(dataResponse.userType.Value()),
                                                                      UserType);
    }
    jobject CredentialRule;
    if (dataResponse.credentialRule.IsNull())
    {
        CredentialRule = nullptr;
    }
    else
    {
        std::string CredentialRuleClassName     = "java/lang/Integer";
        std::string CredentialRuleCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            CredentialRuleClassName.c_str(), CredentialRuleCtorSignature.c_str(),
            static_cast<uint8_t>(dataResponse.credentialRule.Value()), CredentialRule);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, OperationType, UserIndex, UserName, UserUniqueID, UserStatus, UserType,
                        CredentialRule);
}
CHIPDoorLockClusterGetUserCallback::CHIPDoorLockClusterGetUserCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterGetUserCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterGetUserCallback::~CHIPDoorLockClusterGetUserCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterGetUserCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetUser::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterGetUserCallback, void (*)(CHIPDoorLockClusterGetUserCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterGetUserCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterGetUserCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, UserIndex);
}
CHIPDoorLockClusterClearUserCallback::CHIPDoorLockClusterClearUserCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterClearUserCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterClearUserCallback::~CHIPDoorLockClusterClearUserCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterClearUserCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearUser::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterClearUserCallback, void (*)(CHIPDoorLockClusterClearUserCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterClearUserCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterClearUserCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject UserIndex;
    std::string UserIndexClassName     = "java/lang/Integer";
    std::string UserIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                   dataResponse.userIndex, UserIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, UserIndex);
}
CHIPDoorLockClusterSetCredentialCallback::CHIPDoorLockClusterSetCredentialCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterSetCredentialCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterSetCredentialCallback::~CHIPDoorLockClusterSetCredentialCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterSetCredentialCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::SetCredential::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterSetCredentialCallback, void (*)(CHIPDoorLockClusterSetCredentialCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterSetCredentialCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterSetCredentialCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Lchip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct;[BLjava/lang/Integer;Ljava/lang/"
        "Integer;Ljava/lang/Integer;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OperationType;
    std::string OperationTypeClassName     = "java/lang/Integer";
    std::string OperationTypeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OperationTypeClassName.c_str(),
                                                                  OperationTypeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.operationType), OperationType);
    jobject Credential;
    jobject Credential_credentialType;
    std::string Credential_credentialTypeClassName     = "java/lang/Integer";
    std::string Credential_credentialTypeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        Credential_credentialTypeClassName.c_str(), Credential_credentialTypeCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.credential.credentialType), Credential_credentialType);
    jobject Credential_credentialIndex;
    std::string Credential_credentialIndexClassName     = "java/lang/Integer";
    std::string Credential_credentialIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        Credential_credentialIndexClassName.c_str(), Credential_credentialIndexCtorSignature.c_str(),
        dataResponse.credential.credentialIndex, Credential_credentialIndex);

    jclass credentialStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct",
                                                         credentialStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$DoorLockClusterCredentialStruct");
        return;
    }
    jmethodID credentialStructStructCtor_0 =
        env->GetMethodID(credentialStructStructClass_0, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;)V");
    if (credentialStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$DoorLockClusterCredentialStruct constructor");
        return;
    }

    Credential = env->NewObject(credentialStructStructClass_0, credentialStructStructCtor_0, Credential_credentialType,
                                Credential_credentialIndex);
    jobject CredentialData;
    jbyteArray CredentialDataByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.credentialData.size()));
    env->SetByteArrayRegion(CredentialDataByteArray, 0, static_cast<jsize>(dataResponse.credentialData.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.credentialData.data()));
    CredentialData = CredentialDataByteArray;
    jobject UserIndex;
    if (dataResponse.userIndex.IsNull())
    {
        UserIndex = nullptr;
    }
    else
    {
        std::string UserIndexClassName     = "java/lang/Integer";
        std::string UserIndexCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(UserIndexClassName.c_str(), UserIndexCtorSignature.c_str(),
                                                                       dataResponse.userIndex.Value(), UserIndex);
    }
    jobject UserStatus;
    if (dataResponse.userStatus.IsNull())
    {
        UserStatus = nullptr;
    }
    else
    {
        std::string UserStatusClassName     = "java/lang/Integer";
        std::string UserStatusCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(UserStatusClassName.c_str(), UserStatusCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(dataResponse.userStatus.Value()),
                                                                      UserStatus);
    }
    jobject UserType;
    if (dataResponse.userType.IsNull())
    {
        UserType = nullptr;
    }
    else
    {
        std::string UserTypeClassName     = "java/lang/Integer";
        std::string UserTypeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(UserTypeClassName.c_str(), UserTypeCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(dataResponse.userType.Value()),
                                                                      UserType);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, OperationType, Credential, CredentialData, UserIndex, UserStatus, UserType);
}
CHIPDoorLockClusterGetCredentialStatusCallback::CHIPDoorLockClusterGetCredentialStatusCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterGetCredentialStatusCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterGetCredentialStatusCallback::~CHIPDoorLockClusterGetCredentialStatusCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterGetCredentialStatusCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::GetCredentialStatus::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterGetCredentialStatusCallback, void (*)(CHIPDoorLockClusterGetCredentialStatusCallback *)>
        cppCallback(reinterpret_cast<CHIPDoorLockClusterGetCredentialStatusCallback *>(context),
                    chip::Platform::Delete<CHIPDoorLockClusterGetCredentialStatusCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Credential;
    jobject Credential_credentialType;
    std::string Credential_credentialTypeClassName     = "java/lang/Integer";
    std::string Credential_credentialTypeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        Credential_credentialTypeClassName.c_str(), Credential_credentialTypeCtorSignature.c_str(),
        static_cast<uint8_t>(dataResponse.credential.credentialType), Credential_credentialType);
    jobject Credential_credentialIndex;
    std::string Credential_credentialIndexClassName     = "java/lang/Integer";
    std::string Credential_credentialIndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        Credential_credentialIndexClassName.c_str(), Credential_credentialIndexCtorSignature.c_str(),
        dataResponse.credential.credentialIndex, Credential_credentialIndex);

    jclass credentialStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct",
                                                         credentialStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$DoorLockClusterCredentialStruct");
        return;
    }
    jmethodID credentialStructStructCtor_0 =
        env->GetMethodID(credentialStructStructClass_0, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;)V");
    if (credentialStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$DoorLockClusterCredentialStruct constructor");
        return;
    }

    Credential = env->NewObject(credentialStructStructClass_0, credentialStructStructCtor_0, Credential_credentialType,
                                Credential_credentialIndex);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Credential);
}
CHIPDoorLockClusterClearCredentialCallback::CHIPDoorLockClusterClearCredentialCallback(jobject javaCallback) :
    Callback::Callback<CHIPDoorLockClusterClearCredentialCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPDoorLockClusterClearCredentialCallback::~CHIPDoorLockClusterClearCredentialCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPDoorLockClusterClearCredentialCallback::CallbackFn(
    void * context, const chip::app::Clusters::DoorLock::Commands::ClearCredential::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPDoorLockClusterClearCredentialCallback, void (*)(CHIPDoorLockClusterClearCredentialCallback *)> cppCallback(
        reinterpret_cast<CHIPDoorLockClusterClearCredentialCallback *>(context),
        chip::Platform::Delete<CHIPDoorLockClusterClearCredentialCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Credential;
    if (dataResponse.credential.IsNull())
    {
        Credential = nullptr;
    }
    else
    {
        jobject Credential_credentialType;
        std::string Credential_credentialTypeClassName     = "java/lang/Integer";
        std::string Credential_credentialTypeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            Credential_credentialTypeClassName.c_str(), Credential_credentialTypeCtorSignature.c_str(),
            static_cast<uint8_t>(dataResponse.credential.Value().credentialType), Credential_credentialType);
        jobject Credential_credentialIndex;
        std::string Credential_credentialIndexClassName     = "java/lang/Integer";
        std::string Credential_credentialIndexCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            Credential_credentialIndexClassName.c_str(), Credential_credentialIndexCtorSignature.c_str(),
            dataResponse.credential.Value().credentialIndex, Credential_credentialIndex);

        jclass credentialStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$DoorLockClusterCredentialStruct", credentialStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$DoorLockClusterCredentialStruct");
            return;
        }
        jmethodID credentialStructStructCtor_1 =
            env->GetMethodID(credentialStructStructClass_1, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;)V");
        if (credentialStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$DoorLockClusterCredentialStruct constructor");
            return;
        }

        Credential = env->NewObject(credentialStructStructClass_1, credentialStructStructCtor_1, Credential_credentialType,
                                    Credential_credentialIndex);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Credential);
}
CHIPWindowCoveringClusterUpOrOpenCallback::CHIPWindowCoveringClusterUpOrOpenCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterUpOrOpenCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterUpOrOpenCallback::~CHIPWindowCoveringClusterUpOrOpenCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterUpOrOpenCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::UpOrOpen::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterUpOrOpenCallback, void (*)(CHIPWindowCoveringClusterUpOrOpenCallback *)> cppCallback(
        reinterpret_cast<CHIPWindowCoveringClusterUpOrOpenCallback *>(context),
        chip::Platform::Delete<CHIPWindowCoveringClusterUpOrOpenCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPWindowCoveringClusterDownOrCloseCallback::CHIPWindowCoveringClusterDownOrCloseCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterDownOrCloseCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterDownOrCloseCallback::~CHIPWindowCoveringClusterDownOrCloseCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterDownOrCloseCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::DownOrClose::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterDownOrCloseCallback, void (*)(CHIPWindowCoveringClusterDownOrCloseCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterDownOrCloseCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterDownOrCloseCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPWindowCoveringClusterStopMotionCallback::CHIPWindowCoveringClusterStopMotionCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterStopMotionCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterStopMotionCallback::~CHIPWindowCoveringClusterStopMotionCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterStopMotionCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::StopMotion::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterStopMotionCallback, void (*)(CHIPWindowCoveringClusterStopMotionCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterStopMotionCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterStopMotionCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPWindowCoveringClusterGoToLiftValueCallback::CHIPWindowCoveringClusterGoToLiftValueCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterGoToLiftValueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterGoToLiftValueCallback::~CHIPWindowCoveringClusterGoToLiftValueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterGoToLiftValueCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::GoToLiftValue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterGoToLiftValueCallback, void (*)(CHIPWindowCoveringClusterGoToLiftValueCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterGoToLiftValueCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterGoToLiftValueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject liftValue;
    std::string liftValueClassName     = "java/lang/Integer";
    std::string liftValueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(liftValueClassName.c_str(), liftValueCtorSignature.c_str(),
                                                                   dataResponse.liftValue, liftValue);

    env->CallVoidMethod(javaCallbackRef, javaMethod, liftValue);
}
CHIPWindowCoveringClusterGoToLiftPercentageCallback::CHIPWindowCoveringClusterGoToLiftPercentageCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterGoToLiftPercentageCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterGoToLiftPercentageCallback::~CHIPWindowCoveringClusterGoToLiftPercentageCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterGoToLiftPercentageCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::GoToLiftPercentage::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterGoToLiftPercentageCallback,
                    void (*)(CHIPWindowCoveringClusterGoToLiftPercentageCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterGoToLiftPercentageCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterGoToLiftPercentageCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject liftPercent100thsValue;
    std::string liftPercent100thsValueClassName     = "java/lang/Integer";
    std::string liftPercent100thsValueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(liftPercent100thsValueClassName.c_str(),
                                                                   liftPercent100thsValueCtorSignature.c_str(),
                                                                   dataResponse.liftPercent100thsValue, liftPercent100thsValue);

    env->CallVoidMethod(javaCallbackRef, javaMethod, liftPercent100thsValue);
}
CHIPWindowCoveringClusterGoToTiltValueCallback::CHIPWindowCoveringClusterGoToTiltValueCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterGoToTiltValueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterGoToTiltValueCallback::~CHIPWindowCoveringClusterGoToTiltValueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterGoToTiltValueCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::GoToTiltValue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterGoToTiltValueCallback, void (*)(CHIPWindowCoveringClusterGoToTiltValueCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterGoToTiltValueCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterGoToTiltValueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject tiltValue;
    std::string tiltValueClassName     = "java/lang/Integer";
    std::string tiltValueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(tiltValueClassName.c_str(), tiltValueCtorSignature.c_str(),
                                                                   dataResponse.tiltValue, tiltValue);

    env->CallVoidMethod(javaCallbackRef, javaMethod, tiltValue);
}
CHIPWindowCoveringClusterGoToTiltPercentageCallback::CHIPWindowCoveringClusterGoToTiltPercentageCallback(jobject javaCallback) :
    Callback::Callback<CHIPWindowCoveringClusterGoToTiltPercentageCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPWindowCoveringClusterGoToTiltPercentageCallback::~CHIPWindowCoveringClusterGoToTiltPercentageCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPWindowCoveringClusterGoToTiltPercentageCallback::CallbackFn(
    void * context, const chip::app::Clusters::WindowCovering::Commands::GoToTiltPercentage::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPWindowCoveringClusterGoToTiltPercentageCallback,
                    void (*)(CHIPWindowCoveringClusterGoToTiltPercentageCallback *)>
        cppCallback(reinterpret_cast<CHIPWindowCoveringClusterGoToTiltPercentageCallback *>(context),
                    chip::Platform::Delete<CHIPWindowCoveringClusterGoToTiltPercentageCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject tiltPercent100thsValue;
    std::string tiltPercent100thsValueClassName     = "java/lang/Integer";
    std::string tiltPercent100thsValueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(tiltPercent100thsValueClassName.c_str(),
                                                                   tiltPercent100thsValueCtorSignature.c_str(),
                                                                   dataResponse.tiltPercent100thsValue, tiltPercent100thsValue);

    env->CallVoidMethod(javaCallbackRef, javaMethod, tiltPercent100thsValue);
}
CHIPBarrierControlClusterBarrierControlGoToPercentCallback::CHIPBarrierControlClusterBarrierControlGoToPercentCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPBarrierControlClusterBarrierControlGoToPercentCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPBarrierControlClusterBarrierControlGoToPercentCallback::~CHIPBarrierControlClusterBarrierControlGoToPercentCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPBarrierControlClusterBarrierControlGoToPercentCallback::CallbackFn(
    void * context, const chip::app::Clusters::BarrierControl::Commands::BarrierControlGoToPercent::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPBarrierControlClusterBarrierControlGoToPercentCallback,
                    void (*)(CHIPBarrierControlClusterBarrierControlGoToPercentCallback *)>
        cppCallback(reinterpret_cast<CHIPBarrierControlClusterBarrierControlGoToPercentCallback *>(context),
                    chip::Platform::Delete<CHIPBarrierControlClusterBarrierControlGoToPercentCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject percentOpen;
    std::string percentOpenClassName     = "java/lang/Integer";
    std::string percentOpenCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(percentOpenClassName.c_str(), percentOpenCtorSignature.c_str(),
                                                                  dataResponse.percentOpen, percentOpen);

    env->CallVoidMethod(javaCallbackRef, javaMethod, percentOpen);
}
CHIPBarrierControlClusterBarrierControlStopCallback::CHIPBarrierControlClusterBarrierControlStopCallback(jobject javaCallback) :
    Callback::Callback<CHIPBarrierControlClusterBarrierControlStopCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPBarrierControlClusterBarrierControlStopCallback::~CHIPBarrierControlClusterBarrierControlStopCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPBarrierControlClusterBarrierControlStopCallback::CallbackFn(
    void * context, const chip::app::Clusters::BarrierControl::Commands::BarrierControlStop::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPBarrierControlClusterBarrierControlStopCallback,
                    void (*)(CHIPBarrierControlClusterBarrierControlStopCallback *)>
        cppCallback(reinterpret_cast<CHIPBarrierControlClusterBarrierControlStopCallback *>(context),
                    chip::Platform::Delete<CHIPBarrierControlClusterBarrierControlStopCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPThermostatClusterSetpointRaiseLowerCallback::CHIPThermostatClusterSetpointRaiseLowerCallback(jobject javaCallback) :
    Callback::Callback<CHIPThermostatClusterSetpointRaiseLowerCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPThermostatClusterSetpointRaiseLowerCallback::~CHIPThermostatClusterSetpointRaiseLowerCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPThermostatClusterSetpointRaiseLowerCallback::CallbackFn(
    void * context, const chip::app::Clusters::Thermostat::Commands::SetpointRaiseLower::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPThermostatClusterSetpointRaiseLowerCallback, void (*)(CHIPThermostatClusterSetpointRaiseLowerCallback *)>
        cppCallback(reinterpret_cast<CHIPThermostatClusterSetpointRaiseLowerCallback *>(context),
                    chip::Platform::Delete<CHIPThermostatClusterSetpointRaiseLowerCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Mode;
    std::string ModeClassName     = "java/lang/Integer";
    std::string ModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(ModeClassName.c_str(), ModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.mode), Mode);
    jobject Amount;
    std::string AmountClassName     = "java/lang/Integer";
    std::string AmountCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<int8_t>(AmountClassName.c_str(), AmountCtorSignature.c_str(),
                                                                 dataResponse.amount, Amount);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Mode, Amount);
}
CHIPThermostatClusterSetWeeklyScheduleCallback::CHIPThermostatClusterSetWeeklyScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPThermostatClusterSetWeeklyScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPThermostatClusterSetWeeklyScheduleCallback::~CHIPThermostatClusterSetWeeklyScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPThermostatClusterSetWeeklyScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::Thermostat::Commands::SetWeeklySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPThermostatClusterSetWeeklyScheduleCallback, void (*)(CHIPThermostatClusterSetWeeklyScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPThermostatClusterSetWeeklyScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPThermostatClusterSetWeeklyScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/ArrayList;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NumberOfTransitionsForSequence;
    std::string NumberOfTransitionsForSequenceClassName     = "java/lang/Integer";
    std::string NumberOfTransitionsForSequenceCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        NumberOfTransitionsForSequenceClassName.c_str(), NumberOfTransitionsForSequenceCtorSignature.c_str(),
        dataResponse.numberOfTransitionsForSequence, NumberOfTransitionsForSequence);
    jobject DayOfWeekForSequence;
    std::string DayOfWeekForSequenceClassName     = "java/lang/Integer";
    std::string DayOfWeekForSequenceCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DayOfWeekForSequenceClassName.c_str(),
                                                                  DayOfWeekForSequenceCtorSignature.c_str(),
                                                                  dataResponse.dayOfWeekForSequence.Raw(), DayOfWeekForSequence);
    jobject ModeForSequence;
    std::string ModeForSequenceClassName     = "java/lang/Integer";
    std::string ModeForSequenceCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(ModeForSequenceClassName.c_str(),
                                                                  ModeForSequenceCtorSignature.c_str(),
                                                                  dataResponse.modeForSequence.Raw(), ModeForSequence);
    jobject Transitions;
    chip::JniReferences::GetInstance().CreateArrayList(Transitions);

    auto iter_Transitions_0 = dataResponse.transitions.begin();
    while (iter_Transitions_0.Next())
    {
        auto & entry_0 = iter_Transitions_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_transitionTime;
        std::string newElement_0_transitionTimeClassName     = "java/lang/Integer";
        std::string newElement_0_transitionTimeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(newElement_0_transitionTimeClassName.c_str(),
                                                                       newElement_0_transitionTimeCtorSignature.c_str(),
                                                                       entry_0.transitionTime, newElement_0_transitionTime);
        jobject newElement_0_heatSetpoint;
        if (entry_0.heatSetpoint.IsNull())
        {
            newElement_0_heatSetpoint = nullptr;
        }
        else
        {
            std::string newElement_0_heatSetpointClassName     = "java/lang/Integer";
            std::string newElement_0_heatSetpointCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(newElement_0_heatSetpointClassName.c_str(),
                                                                          newElement_0_heatSetpointCtorSignature.c_str(),
                                                                          entry_0.heatSetpoint.Value(), newElement_0_heatSetpoint);
        }
        jobject newElement_0_coolSetpoint;
        if (entry_0.coolSetpoint.IsNull())
        {
            newElement_0_coolSetpoint = nullptr;
        }
        else
        {
            std::string newElement_0_coolSetpointClassName     = "java/lang/Integer";
            std::string newElement_0_coolSetpointCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(newElement_0_coolSetpointClassName.c_str(),
                                                                          newElement_0_coolSetpointCtorSignature.c_str(),
                                                                          entry_0.coolSetpoint.Value(), newElement_0_coolSetpoint);
        }

        jclass thermostatScheduleTransitionStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ThermostatClusterThermostatScheduleTransition",
            thermostatScheduleTransitionStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ThermostatClusterThermostatScheduleTransition");
            return;
        }
        jmethodID thermostatScheduleTransitionStructCtor_1 = env->GetMethodID(
            thermostatScheduleTransitionStructClass_1, "<init>", "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V");
        if (thermostatScheduleTransitionStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ThermostatClusterThermostatScheduleTransition constructor");
            return;
        }

        newElement_0 = env->NewObject(thermostatScheduleTransitionStructClass_1, thermostatScheduleTransitionStructCtor_1,
                                      newElement_0_transitionTime, newElement_0_heatSetpoint, newElement_0_coolSetpoint);
        chip::JniReferences::GetInstance().AddToList(Transitions, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NumberOfTransitionsForSequence, DayOfWeekForSequence, ModeForSequence,
                        Transitions);
}
CHIPThermostatClusterGetWeeklyScheduleCallback::CHIPThermostatClusterGetWeeklyScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPThermostatClusterGetWeeklyScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPThermostatClusterGetWeeklyScheduleCallback::~CHIPThermostatClusterGetWeeklyScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPThermostatClusterGetWeeklyScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::Thermostat::Commands::GetWeeklySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPThermostatClusterGetWeeklyScheduleCallback, void (*)(CHIPThermostatClusterGetWeeklyScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPThermostatClusterGetWeeklyScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPThermostatClusterGetWeeklyScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject DaysToReturn;
    std::string DaysToReturnClassName     = "java/lang/Integer";
    std::string DaysToReturnCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DaysToReturnClassName.c_str(), DaysToReturnCtorSignature.c_str(),
                                                                  dataResponse.daysToReturn.Raw(), DaysToReturn);
    jobject ModeToReturn;
    std::string ModeToReturnClassName     = "java/lang/Integer";
    std::string ModeToReturnCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(ModeToReturnClassName.c_str(), ModeToReturnCtorSignature.c_str(),
                                                                  dataResponse.modeToReturn.Raw(), ModeToReturn);

    env->CallVoidMethod(javaCallbackRef, javaMethod, DaysToReturn, ModeToReturn);
}
CHIPThermostatClusterClearWeeklyScheduleCallback::CHIPThermostatClusterClearWeeklyScheduleCallback(jobject javaCallback) :
    Callback::Callback<CHIPThermostatClusterClearWeeklyScheduleCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPThermostatClusterClearWeeklyScheduleCallback::~CHIPThermostatClusterClearWeeklyScheduleCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPThermostatClusterClearWeeklyScheduleCallback::CallbackFn(
    void * context, const chip::app::Clusters::Thermostat::Commands::ClearWeeklySchedule::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPThermostatClusterClearWeeklyScheduleCallback, void (*)(CHIPThermostatClusterClearWeeklyScheduleCallback *)>
        cppCallback(reinterpret_cast<CHIPThermostatClusterClearWeeklyScheduleCallback *>(context),
                    chip::Platform::Delete<CHIPThermostatClusterClearWeeklyScheduleCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPColorControlClusterMoveToHueCallback::CHIPColorControlClusterMoveToHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveToHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveToHueCallback::~CHIPColorControlClusterMoveToHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveToHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveToHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveToHueCallback, void (*)(CHIPColorControlClusterMoveToHueCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterMoveToHueCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterMoveToHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Hue;
    std::string HueClassName     = "java/lang/Integer";
    std::string HueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(HueClassName.c_str(), HueCtorSignature.c_str(), dataResponse.hue,
                                                                  Hue);
    jobject Direction;
    std::string DirectionClassName     = "java/lang/Integer";
    std::string DirectionCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DirectionClassName.c_str(), DirectionCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.direction), Direction);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Hue, Direction, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveHueCallback::CHIPColorControlClusterMoveHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveHueCallback::~CHIPColorControlClusterMoveHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveHueCallback, void (*)(CHIPColorControlClusterMoveHueCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterMoveHueCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterMoveHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    std::string RateClassName     = "java/lang/Integer";
    std::string RateCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                  dataResponse.rate, Rate);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterStepHueCallback::CHIPColorControlClusterStepHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterStepHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterStepHueCallback::~CHIPColorControlClusterStepHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterStepHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::StepHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterStepHueCallback, void (*)(CHIPColorControlClusterStepHueCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterStepHueCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterStepHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                  dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveToSaturationCallback::CHIPColorControlClusterMoveToSaturationCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveToSaturationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveToSaturationCallback::~CHIPColorControlClusterMoveToSaturationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveToSaturationCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveToSaturation::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveToSaturationCallback, void (*)(CHIPColorControlClusterMoveToSaturationCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterMoveToSaturationCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterMoveToSaturationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Saturation;
    std::string SaturationClassName     = "java/lang/Integer";
    std::string SaturationCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SaturationClassName.c_str(), SaturationCtorSignature.c_str(),
                                                                  dataResponse.saturation, Saturation);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Saturation, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveSaturationCallback::CHIPColorControlClusterMoveSaturationCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveSaturationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveSaturationCallback::~CHIPColorControlClusterMoveSaturationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveSaturationCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveSaturation::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveSaturationCallback, void (*)(CHIPColorControlClusterMoveSaturationCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterMoveSaturationCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterMoveSaturationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    std::string RateClassName     = "java/lang/Integer";
    std::string RateCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                  dataResponse.rate, Rate);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterStepSaturationCallback::CHIPColorControlClusterStepSaturationCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterStepSaturationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterStepSaturationCallback::~CHIPColorControlClusterStepSaturationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterStepSaturationCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::StepSaturation::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterStepSaturationCallback, void (*)(CHIPColorControlClusterStepSaturationCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterStepSaturationCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterStepSaturationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                  dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveToHueAndSaturationCallback::CHIPColorControlClusterMoveToHueAndSaturationCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveToHueAndSaturationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveToHueAndSaturationCallback::~CHIPColorControlClusterMoveToHueAndSaturationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveToHueAndSaturationCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveToHueAndSaturation::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveToHueAndSaturationCallback,
                    void (*)(CHIPColorControlClusterMoveToHueAndSaturationCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterMoveToHueAndSaturationCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterMoveToHueAndSaturationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Hue;
    std::string HueClassName     = "java/lang/Integer";
    std::string HueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(HueClassName.c_str(), HueCtorSignature.c_str(), dataResponse.hue,
                                                                  Hue);
    jobject Saturation;
    std::string SaturationClassName     = "java/lang/Integer";
    std::string SaturationCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SaturationClassName.c_str(), SaturationCtorSignature.c_str(),
                                                                  dataResponse.saturation, Saturation);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Hue, Saturation, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveToColorCallback::CHIPColorControlClusterMoveToColorCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveToColorCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveToColorCallback::~CHIPColorControlClusterMoveToColorCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveToColorCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveToColor::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveToColorCallback, void (*)(CHIPColorControlClusterMoveToColorCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterMoveToColorCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterMoveToColorCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ColorX;
    std::string ColorXClassName     = "java/lang/Integer";
    std::string ColorXCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ColorXClassName.c_str(), ColorXCtorSignature.c_str(),
                                                                   dataResponse.colorX, ColorX);
    jobject ColorY;
    std::string ColorYClassName     = "java/lang/Integer";
    std::string ColorYCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ColorYClassName.c_str(), ColorYCtorSignature.c_str(),
                                                                   dataResponse.colorY, ColorY);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ColorX, ColorY, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveColorCallback::CHIPColorControlClusterMoveColorCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveColorCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveColorCallback::~CHIPColorControlClusterMoveColorCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveColorCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveColor::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveColorCallback, void (*)(CHIPColorControlClusterMoveColorCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterMoveColorCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterMoveColorCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject RateX;
    std::string RateXClassName     = "java/lang/Integer";
    std::string RateXCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(RateXClassName.c_str(), RateXCtorSignature.c_str(),
                                                                  dataResponse.rateX, RateX);
    jobject RateY;
    std::string RateYClassName     = "java/lang/Integer";
    std::string RateYCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(RateYClassName.c_str(), RateYCtorSignature.c_str(),
                                                                  dataResponse.rateY, RateY);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, RateX, RateY, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterStepColorCallback::CHIPColorControlClusterStepColorCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterStepColorCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterStepColorCallback::~CHIPColorControlClusterStepColorCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterStepColorCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::StepColor::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterStepColorCallback, void (*)(CHIPColorControlClusterStepColorCallback *)> cppCallback(
        reinterpret_cast<CHIPColorControlClusterStepColorCallback *>(context),
        chip::Platform::Delete<CHIPColorControlClusterStepColorCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepX;
    std::string StepXClassName     = "java/lang/Integer";
    std::string StepXCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(StepXClassName.c_str(), StepXCtorSignature.c_str(),
                                                                  dataResponse.stepX, StepX);
    jobject StepY;
    std::string StepYClassName     = "java/lang/Integer";
    std::string StepYCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<int16_t>(StepYClassName.c_str(), StepYCtorSignature.c_str(),
                                                                  dataResponse.stepY, StepY);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepX, StepY, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveToColorTemperatureCallback::CHIPColorControlClusterMoveToColorTemperatureCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveToColorTemperatureCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveToColorTemperatureCallback::~CHIPColorControlClusterMoveToColorTemperatureCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveToColorTemperatureCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveToColorTemperature::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveToColorTemperatureCallback,
                    void (*)(CHIPColorControlClusterMoveToColorTemperatureCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterMoveToColorTemperatureCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterMoveToColorTemperatureCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ColorTemperatureMireds;
    std::string ColorTemperatureMiredsClassName     = "java/lang/Integer";
    std::string ColorTemperatureMiredsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(ColorTemperatureMiredsClassName.c_str(),
                                                                   ColorTemperatureMiredsCtorSignature.c_str(),
                                                                   dataResponse.colorTemperatureMireds, ColorTemperatureMireds);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ColorTemperatureMireds, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterEnhancedMoveToHueCallback::CHIPColorControlClusterEnhancedMoveToHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterEnhancedMoveToHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterEnhancedMoveToHueCallback::~CHIPColorControlClusterEnhancedMoveToHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterEnhancedMoveToHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterEnhancedMoveToHueCallback, void (*)(CHIPColorControlClusterEnhancedMoveToHueCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterEnhancedMoveToHueCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterEnhancedMoveToHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject EnhancedHue;
    std::string EnhancedHueClassName     = "java/lang/Integer";
    std::string EnhancedHueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(EnhancedHueClassName.c_str(), EnhancedHueCtorSignature.c_str(),
                                                                   dataResponse.enhancedHue, EnhancedHue);
    jobject Direction;
    std::string DirectionClassName     = "java/lang/Integer";
    std::string DirectionCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DirectionClassName.c_str(), DirectionCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.direction), Direction);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, EnhancedHue, Direction, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterEnhancedMoveHueCallback::CHIPColorControlClusterEnhancedMoveHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterEnhancedMoveHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterEnhancedMoveHueCallback::~CHIPColorControlClusterEnhancedMoveHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterEnhancedMoveHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::EnhancedMoveHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterEnhancedMoveHueCallback, void (*)(CHIPColorControlClusterEnhancedMoveHueCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterEnhancedMoveHueCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterEnhancedMoveHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    std::string RateClassName     = "java/lang/Integer";
    std::string RateCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                   dataResponse.rate, Rate);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterEnhancedStepHueCallback::CHIPColorControlClusterEnhancedStepHueCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterEnhancedStepHueCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterEnhancedStepHueCallback::~CHIPColorControlClusterEnhancedStepHueCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterEnhancedStepHueCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::EnhancedStepHue::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterEnhancedStepHueCallback, void (*)(CHIPColorControlClusterEnhancedStepHueCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterEnhancedStepHueCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterEnhancedStepHueCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                   dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback::CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback::~CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHueAndSaturation::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback,
                    void (*)(CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterEnhancedMoveToHueAndSaturationCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject EnhancedHue;
    std::string EnhancedHueClassName     = "java/lang/Integer";
    std::string EnhancedHueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(EnhancedHueClassName.c_str(), EnhancedHueCtorSignature.c_str(),
                                                                   dataResponse.enhancedHue, EnhancedHue);
    jobject Saturation;
    std::string SaturationClassName     = "java/lang/Integer";
    std::string SaturationCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(SaturationClassName.c_str(), SaturationCtorSignature.c_str(),
                                                                  dataResponse.saturation, Saturation);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, EnhancedHue, Saturation, TransitionTime, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterColorLoopSetCallback::CHIPColorControlClusterColorLoopSetCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterColorLoopSetCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterColorLoopSetCallback::~CHIPColorControlClusterColorLoopSetCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterColorLoopSetCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::ColorLoopSet::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterColorLoopSetCallback, void (*)(CHIPColorControlClusterColorLoopSetCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterColorLoopSetCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterColorLoopSetCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/"
                                                  "Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject UpdateFlags;
    std::string UpdateFlagsClassName     = "java/lang/Integer";
    std::string UpdateFlagsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(UpdateFlagsClassName.c_str(), UpdateFlagsCtorSignature.c_str(),
                                                                  dataResponse.updateFlags.Raw(), UpdateFlags);
    jobject Action;
    std::string ActionClassName     = "java/lang/Integer";
    std::string ActionCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(ActionClassName.c_str(), ActionCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.action), Action);
    jobject Direction;
    std::string DirectionClassName     = "java/lang/Integer";
    std::string DirectionCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(DirectionClassName.c_str(), DirectionCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.direction), Direction);
    jobject Time;
    std::string TimeClassName     = "java/lang/Integer";
    std::string TimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(TimeClassName.c_str(), TimeCtorSignature.c_str(),
                                                                   dataResponse.time, Time);
    jobject StartHue;
    std::string StartHueClassName     = "java/lang/Integer";
    std::string StartHueCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(StartHueClassName.c_str(), StartHueCtorSignature.c_str(),
                                                                   dataResponse.startHue, StartHue);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, UpdateFlags, Action, Direction, Time, StartHue, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterStopMoveStepCallback::CHIPColorControlClusterStopMoveStepCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterStopMoveStepCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterStopMoveStepCallback::~CHIPColorControlClusterStopMoveStepCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterStopMoveStepCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::StopMoveStep::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterStopMoveStepCallback, void (*)(CHIPColorControlClusterStopMoveStepCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterStopMoveStepCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterStopMoveStepCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, OptionsMask, OptionsOverride);
}
CHIPColorControlClusterMoveColorTemperatureCallback::CHIPColorControlClusterMoveColorTemperatureCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterMoveColorTemperatureCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterMoveColorTemperatureCallback::~CHIPColorControlClusterMoveColorTemperatureCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterMoveColorTemperatureCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::MoveColorTemperature::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterMoveColorTemperatureCallback,
                    void (*)(CHIPColorControlClusterMoveColorTemperatureCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterMoveColorTemperatureCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterMoveColorTemperatureCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MoveMode;
    std::string MoveModeClassName     = "java/lang/Integer";
    std::string MoveModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(MoveModeClassName.c_str(), MoveModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.moveMode), MoveMode);
    jobject Rate;
    std::string RateClassName     = "java/lang/Integer";
    std::string RateCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(RateClassName.c_str(), RateCtorSignature.c_str(),
                                                                   dataResponse.rate, Rate);
    jobject ColorTemperatureMinimumMireds;
    std::string ColorTemperatureMinimumMiredsClassName     = "java/lang/Integer";
    std::string ColorTemperatureMinimumMiredsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        ColorTemperatureMinimumMiredsClassName.c_str(), ColorTemperatureMinimumMiredsCtorSignature.c_str(),
        dataResponse.colorTemperatureMinimumMireds, ColorTemperatureMinimumMireds);
    jobject ColorTemperatureMaximumMireds;
    std::string ColorTemperatureMaximumMiredsClassName     = "java/lang/Integer";
    std::string ColorTemperatureMaximumMiredsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        ColorTemperatureMaximumMiredsClassName.c_str(), ColorTemperatureMaximumMiredsCtorSignature.c_str(),
        dataResponse.colorTemperatureMaximumMireds, ColorTemperatureMaximumMireds);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MoveMode, Rate, ColorTemperatureMinimumMireds, ColorTemperatureMaximumMireds,
                        OptionsMask, OptionsOverride);
}
CHIPColorControlClusterStepColorTemperatureCallback::CHIPColorControlClusterStepColorTemperatureCallback(jobject javaCallback) :
    Callback::Callback<CHIPColorControlClusterStepColorTemperatureCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPColorControlClusterStepColorTemperatureCallback::~CHIPColorControlClusterStepColorTemperatureCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPColorControlClusterStepColorTemperatureCallback::CallbackFn(
    void * context, const chip::app::Clusters::ColorControl::Commands::StepColorTemperature::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPColorControlClusterStepColorTemperatureCallback,
                    void (*)(CHIPColorControlClusterStepColorTemperatureCallback *)>
        cppCallback(reinterpret_cast<CHIPColorControlClusterStepColorTemperatureCallback *>(context),
                    chip::Platform::Delete<CHIPColorControlClusterStepColorTemperatureCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/"
                                                  "Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject StepMode;
    std::string StepModeClassName     = "java/lang/Integer";
    std::string StepModeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(StepModeClassName.c_str(), StepModeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.stepMode), StepMode);
    jobject StepSize;
    std::string StepSizeClassName     = "java/lang/Integer";
    std::string StepSizeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(StepSizeClassName.c_str(), StepSizeCtorSignature.c_str(),
                                                                   dataResponse.stepSize, StepSize);
    jobject TransitionTime;
    std::string TransitionTimeClassName     = "java/lang/Integer";
    std::string TransitionTimeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        TransitionTimeClassName.c_str(), TransitionTimeCtorSignature.c_str(), dataResponse.transitionTime, TransitionTime);
    jobject ColorTemperatureMinimumMireds;
    std::string ColorTemperatureMinimumMiredsClassName     = "java/lang/Integer";
    std::string ColorTemperatureMinimumMiredsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        ColorTemperatureMinimumMiredsClassName.c_str(), ColorTemperatureMinimumMiredsCtorSignature.c_str(),
        dataResponse.colorTemperatureMinimumMireds, ColorTemperatureMinimumMireds);
    jobject ColorTemperatureMaximumMireds;
    std::string ColorTemperatureMaximumMiredsClassName     = "java/lang/Integer";
    std::string ColorTemperatureMaximumMiredsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
        ColorTemperatureMaximumMiredsClassName.c_str(), ColorTemperatureMaximumMiredsCtorSignature.c_str(),
        dataResponse.colorTemperatureMaximumMireds, ColorTemperatureMaximumMireds);
    jobject OptionsMask;
    std::string OptionsMaskClassName     = "java/lang/Integer";
    std::string OptionsMaskCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(OptionsMaskClassName.c_str(), OptionsMaskCtorSignature.c_str(),
                                                                  dataResponse.optionsMask, OptionsMask);
    jobject OptionsOverride;
    std::string OptionsOverrideClassName     = "java/lang/Integer";
    std::string OptionsOverrideCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
        OptionsOverrideClassName.c_str(), OptionsOverrideCtorSignature.c_str(), dataResponse.optionsOverride, OptionsOverride);

    env->CallVoidMethod(javaCallbackRef, javaMethod, StepMode, StepSize, TransitionTime, ColorTemperatureMinimumMireds,
                        ColorTemperatureMaximumMireds, OptionsMask, OptionsOverride);
}
CHIPChannelClusterChangeChannelCallback::CHIPChannelClusterChangeChannelCallback(jobject javaCallback) :
    Callback::Callback<CHIPChannelClusterChangeChannelCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPChannelClusterChangeChannelCallback::~CHIPChannelClusterChangeChannelCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPChannelClusterChangeChannelCallback::CallbackFn(
    void * context, const chip::app::Clusters::Channel::Commands::ChangeChannel::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPChannelClusterChangeChannelCallback, void (*)(CHIPChannelClusterChangeChannelCallback *)> cppCallback(
        reinterpret_cast<CHIPChannelClusterChangeChannelCallback *>(context),
        chip::Platform::Delete<CHIPChannelClusterChangeChannelCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/String;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Match;
    Match = env->NewStringUTF(std::string(dataResponse.match.data(), dataResponse.match.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, Match);
}
CHIPChannelClusterChangeChannelByNumberCallback::CHIPChannelClusterChangeChannelByNumberCallback(jobject javaCallback) :
    Callback::Callback<CHIPChannelClusterChangeChannelByNumberCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPChannelClusterChangeChannelByNumberCallback::~CHIPChannelClusterChangeChannelByNumberCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPChannelClusterChangeChannelByNumberCallback::CallbackFn(
    void * context, const chip::app::Clusters::Channel::Commands::ChangeChannelByNumber::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPChannelClusterChangeChannelByNumberCallback, void (*)(CHIPChannelClusterChangeChannelByNumberCallback *)>
        cppCallback(reinterpret_cast<CHIPChannelClusterChangeChannelByNumberCallback *>(context),
                    chip::Platform::Delete<CHIPChannelClusterChangeChannelByNumberCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject MajorNumber;
    std::string MajorNumberClassName     = "java/lang/Integer";
    std::string MajorNumberCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(MajorNumberClassName.c_str(), MajorNumberCtorSignature.c_str(),
                                                                   dataResponse.majorNumber, MajorNumber);
    jobject MinorNumber;
    std::string MinorNumberClassName     = "java/lang/Integer";
    std::string MinorNumberCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(MinorNumberClassName.c_str(), MinorNumberCtorSignature.c_str(),
                                                                   dataResponse.minorNumber, MinorNumber);

    env->CallVoidMethod(javaCallbackRef, javaMethod, MajorNumber, MinorNumber);
}
CHIPChannelClusterSkipChannelCallback::CHIPChannelClusterSkipChannelCallback(jobject javaCallback) :
    Callback::Callback<CHIPChannelClusterSkipChannelCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPChannelClusterSkipChannelCallback::~CHIPChannelClusterSkipChannelCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPChannelClusterSkipChannelCallback::CallbackFn(
    void * context, const chip::app::Clusters::Channel::Commands::SkipChannel::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPChannelClusterSkipChannelCallback, void (*)(CHIPChannelClusterSkipChannelCallback *)> cppCallback(
        reinterpret_cast<CHIPChannelClusterSkipChannelCallback *>(context),
        chip::Platform::Delete<CHIPChannelClusterSkipChannelCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Count;
    std::string CountClassName     = "java/lang/Integer";
    std::string CountCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(CountClassName.c_str(), CountCtorSignature.c_str(),
                                                                   dataResponse.count, Count);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Count);
}
CHIPTargetNavigatorClusterNavigateTargetCallback::CHIPTargetNavigatorClusterNavigateTargetCallback(jobject javaCallback) :
    Callback::Callback<CHIPTargetNavigatorClusterNavigateTargetCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPTargetNavigatorClusterNavigateTargetCallback::~CHIPTargetNavigatorClusterNavigateTargetCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPTargetNavigatorClusterNavigateTargetCallback::CallbackFn(
    void * context, const chip::app::Clusters::TargetNavigator::Commands::NavigateTarget::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPTargetNavigatorClusterNavigateTargetCallback, void (*)(CHIPTargetNavigatorClusterNavigateTargetCallback *)>
        cppCallback(reinterpret_cast<CHIPTargetNavigatorClusterNavigateTargetCallback *>(context),
                    chip::Platform::Delete<CHIPTargetNavigatorClusterNavigateTargetCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Target;
    std::string TargetClassName     = "java/lang/Integer";
    std::string TargetCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(TargetClassName.c_str(), TargetCtorSignature.c_str(),
                                                                  dataResponse.target, Target);
    jobject Data;
    if (!dataResponse.data.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Data);
    }
    else
    {
        jobject DataInsideOptional;
        DataInsideOptional =
            env->NewStringUTF(std::string(dataResponse.data.Value().data(), dataResponse.data.Value().size()).c_str());
        chip::JniReferences::GetInstance().CreateOptional(DataInsideOptional, Data);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Target, Data);
}
CHIPMediaPlaybackClusterPlayCallback::CHIPMediaPlaybackClusterPlayCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterPlayCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterPlayCallback::~CHIPMediaPlaybackClusterPlayCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterPlayCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Play::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterPlayCallback, void (*)(CHIPMediaPlaybackClusterPlayCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterPlayCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterPlayCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterPauseCallback::CHIPMediaPlaybackClusterPauseCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterPauseCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterPauseCallback::~CHIPMediaPlaybackClusterPauseCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterPauseCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Pause::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterPauseCallback, void (*)(CHIPMediaPlaybackClusterPauseCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterPauseCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterPauseCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterStopCallback::CHIPMediaPlaybackClusterStopCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterStopCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterStopCallback::~CHIPMediaPlaybackClusterStopCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterStopCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Stop::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterStopCallback, void (*)(CHIPMediaPlaybackClusterStopCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterStopCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterStopCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterStartOverCallback::CHIPMediaPlaybackClusterStartOverCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterStartOverCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterStartOverCallback::~CHIPMediaPlaybackClusterStartOverCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterStartOverCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::StartOver::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterStartOverCallback, void (*)(CHIPMediaPlaybackClusterStartOverCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterStartOverCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterStartOverCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterPreviousCallback::CHIPMediaPlaybackClusterPreviousCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterPreviousCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterPreviousCallback::~CHIPMediaPlaybackClusterPreviousCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterPreviousCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Previous::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterPreviousCallback, void (*)(CHIPMediaPlaybackClusterPreviousCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterPreviousCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterPreviousCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterNextCallback::CHIPMediaPlaybackClusterNextCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterNextCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterNextCallback::~CHIPMediaPlaybackClusterNextCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterNextCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Next::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterNextCallback, void (*)(CHIPMediaPlaybackClusterNextCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterNextCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterNextCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterRewindCallback::CHIPMediaPlaybackClusterRewindCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterRewindCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterRewindCallback::~CHIPMediaPlaybackClusterRewindCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterRewindCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Rewind::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterRewindCallback, void (*)(CHIPMediaPlaybackClusterRewindCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterRewindCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterRewindCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterFastForwardCallback::CHIPMediaPlaybackClusterFastForwardCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterFastForwardCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterFastForwardCallback::~CHIPMediaPlaybackClusterFastForwardCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterFastForwardCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::FastForward::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterFastForwardCallback, void (*)(CHIPMediaPlaybackClusterFastForwardCallback *)>
        cppCallback(reinterpret_cast<CHIPMediaPlaybackClusterFastForwardCallback *>(context),
                    chip::Platform::Delete<CHIPMediaPlaybackClusterFastForwardCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaPlaybackClusterSkipForwardCallback::CHIPMediaPlaybackClusterSkipForwardCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterSkipForwardCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterSkipForwardCallback::~CHIPMediaPlaybackClusterSkipForwardCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterSkipForwardCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::SkipForward::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterSkipForwardCallback, void (*)(CHIPMediaPlaybackClusterSkipForwardCallback *)>
        cppCallback(reinterpret_cast<CHIPMediaPlaybackClusterSkipForwardCallback *>(context),
                    chip::Platform::Delete<CHIPMediaPlaybackClusterSkipForwardCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject DeltaPositionMilliseconds;
    std::string DeltaPositionMillisecondsClassName     = "java/lang/Long";
    std::string DeltaPositionMillisecondsCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
        DeltaPositionMillisecondsClassName.c_str(), DeltaPositionMillisecondsCtorSignature.c_str(),
        dataResponse.deltaPositionMilliseconds, DeltaPositionMilliseconds);

    env->CallVoidMethod(javaCallbackRef, javaMethod, DeltaPositionMilliseconds);
}
CHIPMediaPlaybackClusterSkipBackwardCallback::CHIPMediaPlaybackClusterSkipBackwardCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterSkipBackwardCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterSkipBackwardCallback::~CHIPMediaPlaybackClusterSkipBackwardCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterSkipBackwardCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::SkipBackward::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterSkipBackwardCallback, void (*)(CHIPMediaPlaybackClusterSkipBackwardCallback *)>
        cppCallback(reinterpret_cast<CHIPMediaPlaybackClusterSkipBackwardCallback *>(context),
                    chip::Platform::Delete<CHIPMediaPlaybackClusterSkipBackwardCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject DeltaPositionMilliseconds;
    std::string DeltaPositionMillisecondsClassName     = "java/lang/Long";
    std::string DeltaPositionMillisecondsCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(
        DeltaPositionMillisecondsClassName.c_str(), DeltaPositionMillisecondsCtorSignature.c_str(),
        dataResponse.deltaPositionMilliseconds, DeltaPositionMilliseconds);

    env->CallVoidMethod(javaCallbackRef, javaMethod, DeltaPositionMilliseconds);
}
CHIPMediaPlaybackClusterSeekCallback::CHIPMediaPlaybackClusterSeekCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaPlaybackClusterSeekCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaPlaybackClusterSeekCallback::~CHIPMediaPlaybackClusterSeekCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaPlaybackClusterSeekCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaPlayback::Commands::Seek::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaPlaybackClusterSeekCallback, void (*)(CHIPMediaPlaybackClusterSeekCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaPlaybackClusterSeekCallback *>(context),
        chip::Platform::Delete<CHIPMediaPlaybackClusterSeekCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Long;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject position;
    std::string positionClassName     = "java/lang/Long";
    std::string positionCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(positionClassName.c_str(), positionCtorSignature.c_str(),
                                                                   dataResponse.position, position);

    env->CallVoidMethod(javaCallbackRef, javaMethod, position);
}
CHIPMediaInputClusterSelectInputCallback::CHIPMediaInputClusterSelectInputCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaInputClusterSelectInputCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaInputClusterSelectInputCallback::~CHIPMediaInputClusterSelectInputCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaInputClusterSelectInputCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaInput::Commands::SelectInput::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaInputClusterSelectInputCallback, void (*)(CHIPMediaInputClusterSelectInputCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaInputClusterSelectInputCallback *>(context),
        chip::Platform::Delete<CHIPMediaInputClusterSelectInputCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Index;
    std::string IndexClassName     = "java/lang/Integer";
    std::string IndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(IndexClassName.c_str(), IndexCtorSignature.c_str(),
                                                                  dataResponse.index, Index);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Index);
}
CHIPMediaInputClusterShowInputStatusCallback::CHIPMediaInputClusterShowInputStatusCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaInputClusterShowInputStatusCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaInputClusterShowInputStatusCallback::~CHIPMediaInputClusterShowInputStatusCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaInputClusterShowInputStatusCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaInput::Commands::ShowInputStatus::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaInputClusterShowInputStatusCallback, void (*)(CHIPMediaInputClusterShowInputStatusCallback *)>
        cppCallback(reinterpret_cast<CHIPMediaInputClusterShowInputStatusCallback *>(context),
                    chip::Platform::Delete<CHIPMediaInputClusterShowInputStatusCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaInputClusterHideInputStatusCallback::CHIPMediaInputClusterHideInputStatusCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaInputClusterHideInputStatusCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaInputClusterHideInputStatusCallback::~CHIPMediaInputClusterHideInputStatusCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaInputClusterHideInputStatusCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaInput::Commands::HideInputStatus::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaInputClusterHideInputStatusCallback, void (*)(CHIPMediaInputClusterHideInputStatusCallback *)>
        cppCallback(reinterpret_cast<CHIPMediaInputClusterHideInputStatusCallback *>(context),
                    chip::Platform::Delete<CHIPMediaInputClusterHideInputStatusCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPMediaInputClusterRenameInputCallback::CHIPMediaInputClusterRenameInputCallback(jobject javaCallback) :
    Callback::Callback<CHIPMediaInputClusterRenameInputCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPMediaInputClusterRenameInputCallback::~CHIPMediaInputClusterRenameInputCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPMediaInputClusterRenameInputCallback::CallbackFn(
    void * context, const chip::app::Clusters::MediaInput::Commands::RenameInput::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPMediaInputClusterRenameInputCallback, void (*)(CHIPMediaInputClusterRenameInputCallback *)> cppCallback(
        reinterpret_cast<CHIPMediaInputClusterRenameInputCallback *>(context),
        chip::Platform::Delete<CHIPMediaInputClusterRenameInputCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/String;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Index;
    std::string IndexClassName     = "java/lang/Integer";
    std::string IndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(IndexClassName.c_str(), IndexCtorSignature.c_str(),
                                                                  dataResponse.index, Index);
    jobject Name;
    Name = env->NewStringUTF(std::string(dataResponse.name.data(), dataResponse.name.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, Index, Name);
}
CHIPLowPowerClusterSleepCallback::CHIPLowPowerClusterSleepCallback(jobject javaCallback) :
    Callback::Callback<CHIPLowPowerClusterSleepCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPLowPowerClusterSleepCallback::~CHIPLowPowerClusterSleepCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPLowPowerClusterSleepCallback::CallbackFn(
    void * context, const chip::app::Clusters::LowPower::Commands::Sleep::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPLowPowerClusterSleepCallback, void (*)(CHIPLowPowerClusterSleepCallback *)> cppCallback(
        reinterpret_cast<CHIPLowPowerClusterSleepCallback *>(context), chip::Platform::Delete<CHIPLowPowerClusterSleepCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPKeypadInputClusterSendKeyCallback::CHIPKeypadInputClusterSendKeyCallback(jobject javaCallback) :
    Callback::Callback<CHIPKeypadInputClusterSendKeyCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPKeypadInputClusterSendKeyCallback::~CHIPKeypadInputClusterSendKeyCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPKeypadInputClusterSendKeyCallback::CallbackFn(
    void * context, const chip::app::Clusters::KeypadInput::Commands::SendKey::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPKeypadInputClusterSendKeyCallback, void (*)(CHIPKeypadInputClusterSendKeyCallback *)> cppCallback(
        reinterpret_cast<CHIPKeypadInputClusterSendKeyCallback *>(context),
        chip::Platform::Delete<CHIPKeypadInputClusterSendKeyCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject KeyCode;
    std::string KeyCodeClassName     = "java/lang/Integer";
    std::string KeyCodeCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(KeyCodeClassName.c_str(), KeyCodeCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.keyCode), KeyCode);

    env->CallVoidMethod(javaCallbackRef, javaMethod, KeyCode);
}
CHIPContentLauncherClusterLaunchContentCallback::CHIPContentLauncherClusterLaunchContentCallback(jobject javaCallback) :
    Callback::Callback<CHIPContentLauncherClusterLaunchContentCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPContentLauncherClusterLaunchContentCallback::~CHIPContentLauncherClusterLaunchContentCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPContentLauncherClusterLaunchContentCallback::CallbackFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchContent::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPContentLauncherClusterLaunchContentCallback, void (*)(CHIPContentLauncherClusterLaunchContentCallback *)>
        cppCallback(reinterpret_cast<CHIPContentLauncherClusterLaunchContentCallback *>(context),
                    chip::Platform::Delete<CHIPContentLauncherClusterLaunchContentCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Lchip/devicecontroller/ChipStructs$ContentLauncherClusterContentSearchStruct;Ljava/lang/Boolean;Ljava/util/Optional;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Search;
    jobject Search_parameterList;
    chip::JniReferences::GetInstance().CreateArrayList(Search_parameterList);

    auto iter_Search_parameterList_1 = dataResponse.search.parameterList.begin();
    while (iter_Search_parameterList_1.Next())
    {
        auto & entry_1 = iter_Search_parameterList_1.GetValue();
        jobject newElement_1;
        jobject newElement_1_type;
        std::string newElement_1_typeClassName     = "java/lang/Integer";
        std::string newElement_1_typeCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_1_typeClassName.c_str(),
                                                                      newElement_1_typeCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(entry_1.type), newElement_1_type);
        jobject newElement_1_value;
        newElement_1_value = env->NewStringUTF(std::string(entry_1.value.data(), entry_1.value.size()).c_str());
        jobject newElement_1_externalIDList;
        if (!entry_1.externalIDList.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, newElement_1_externalIDList);
        }
        else
        {
            jobject newElement_1_externalIDListInsideOptional;
            chip::JniReferences::GetInstance().CreateArrayList(newElement_1_externalIDListInsideOptional);

            auto iter_newElement_1_externalIDListInsideOptional_4 = entry_1.externalIDList.Value().begin();
            while (iter_newElement_1_externalIDListInsideOptional_4.Next())
            {
                auto & entry_4 = iter_newElement_1_externalIDListInsideOptional_4.GetValue();
                jobject newElement_4;
                jobject newElement_4_name;
                newElement_4_name = env->NewStringUTF(std::string(entry_4.name.data(), entry_4.name.size()).c_str());
                jobject newElement_4_value;
                newElement_4_value = env->NewStringUTF(std::string(entry_4.value.data(), entry_4.value.size()).c_str());

                jclass additionalInfoStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterAdditionalInfoStruct",
                    additionalInfoStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterAdditionalInfoStruct");
                    return;
                }
                jmethodID additionalInfoStructStructCtor_5 =
                    env->GetMethodID(additionalInfoStructStructClass_5, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                if (additionalInfoStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterAdditionalInfoStruct constructor");
                    return;
                }

                newElement_4 = env->NewObject(additionalInfoStructStructClass_5, additionalInfoStructStructCtor_5,
                                              newElement_4_name, newElement_4_value);
                chip::JniReferences::GetInstance().AddToList(newElement_1_externalIDListInsideOptional, newElement_4);
            }
            chip::JniReferences::GetInstance().CreateOptional(newElement_1_externalIDListInsideOptional,
                                                              newElement_1_externalIDList);
        }

        jclass parameterStructStructClass_2;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterParameterStruct", parameterStructStructClass_2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterParameterStruct");
            return;
        }
        jmethodID parameterStructStructCtor_2 = env->GetMethodID(parameterStructStructClass_2, "<init>",
                                                                 "(Ljava/lang/Integer;Ljava/lang/String;Ljava/util/Optional;)V");
        if (parameterStructStructCtor_2 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterParameterStruct constructor");
            return;
        }

        newElement_1 = env->NewObject(parameterStructStructClass_2, parameterStructStructCtor_2, newElement_1_type,
                                      newElement_1_value, newElement_1_externalIDList);
        chip::JniReferences::GetInstance().AddToList(Search_parameterList, newElement_1);
    }

    jclass contentSearchStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(
        env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterContentSearchStruct", contentSearchStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterContentSearchStruct");
        return;
    }
    jmethodID contentSearchStructStructCtor_0 =
        env->GetMethodID(contentSearchStructStructClass_0, "<init>", "(Ljava/util/ArrayList;)V");
    if (contentSearchStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterContentSearchStruct constructor");
        return;
    }

    Search = env->NewObject(contentSearchStructStructClass_0, contentSearchStructStructCtor_0, Search_parameterList);
    jobject AutoPlay;
    std::string AutoPlayClassName     = "java/lang/Boolean";
    std::string AutoPlayCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(AutoPlayClassName.c_str(), AutoPlayCtorSignature.c_str(),
                                                               dataResponse.autoPlay, AutoPlay);
    jobject Data;
    if (!dataResponse.data.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Data);
    }
    else
    {
        jobject DataInsideOptional;
        DataInsideOptional =
            env->NewStringUTF(std::string(dataResponse.data.Value().data(), dataResponse.data.Value().size()).c_str());
        chip::JniReferences::GetInstance().CreateOptional(DataInsideOptional, Data);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Search, AutoPlay, Data);
}
CHIPContentLauncherClusterLaunchURLCallback::CHIPContentLauncherClusterLaunchURLCallback(jobject javaCallback) :
    Callback::Callback<CHIPContentLauncherClusterLaunchURLCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPContentLauncherClusterLaunchURLCallback::~CHIPContentLauncherClusterLaunchURLCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPContentLauncherClusterLaunchURLCallback::CallbackFn(
    void * context, const chip::app::Clusters::ContentLauncher::Commands::LaunchURL::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPContentLauncherClusterLaunchURLCallback, void (*)(CHIPContentLauncherClusterLaunchURLCallback *)>
        cppCallback(reinterpret_cast<CHIPContentLauncherClusterLaunchURLCallback *>(context),
                    chip::Platform::Delete<CHIPContentLauncherClusterLaunchURLCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/String;Ljava/util/Optional;Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ContentURL;
    ContentURL = env->NewStringUTF(std::string(dataResponse.contentURL.data(), dataResponse.contentURL.size()).c_str());
    jobject DisplayString;
    if (!dataResponse.displayString.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, DisplayString);
    }
    else
    {
        jobject DisplayStringInsideOptional;
        DisplayStringInsideOptional = env->NewStringUTF(
            std::string(dataResponse.displayString.Value().data(), dataResponse.displayString.Value().size()).c_str());
        chip::JniReferences::GetInstance().CreateOptional(DisplayStringInsideOptional, DisplayString);
    }
    jobject BrandingInformation;
    if (!dataResponse.brandingInformation.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformation);
    }
    else
    {
        jobject BrandingInformationInsideOptional;
        jobject BrandingInformationInsideOptional_providerName;
        BrandingInformationInsideOptional_providerName =
            env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().providerName.data(),
                                          dataResponse.brandingInformation.Value().providerName.size())
                                  .c_str());
        jobject BrandingInformationInsideOptional_background;
        if (!dataResponse.brandingInformation.Value().background.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformationInsideOptional_background);
        }
        else
        {
            jobject BrandingInformationInsideOptional_backgroundInsideOptional;
            jobject BrandingInformationInsideOptional_backgroundInsideOptional_imageURL;
            if (!dataResponse.brandingInformation.Value().background.Value().imageURL.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(
                    nullptr, BrandingInformationInsideOptional_backgroundInsideOptional_imageURL);
            }
            else
            {
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_imageURLInsideOptional;
                BrandingInformationInsideOptional_backgroundInsideOptional_imageURLInsideOptional = env->NewStringUTF(
                    std::string(dataResponse.brandingInformation.Value().background.Value().imageURL.Value().data(),
                                dataResponse.brandingInformation.Value().background.Value().imageURL.Value().size())
                        .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_backgroundInsideOptional_imageURLInsideOptional,
                    BrandingInformationInsideOptional_backgroundInsideOptional_imageURL);
            }
            jobject BrandingInformationInsideOptional_backgroundInsideOptional_color;
            if (!dataResponse.brandingInformation.Value().background.Value().color.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_backgroundInsideOptional_color);
            }
            else
            {
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_colorInsideOptional;
                BrandingInformationInsideOptional_backgroundInsideOptional_colorInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().background.Value().color.Value().data(),
                                                  dataResponse.brandingInformation.Value().background.Value().color.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_backgroundInsideOptional_colorInsideOptional,
                    BrandingInformationInsideOptional_backgroundInsideOptional_color);
            }
            jobject BrandingInformationInsideOptional_backgroundInsideOptional_size;
            if (!dataResponse.brandingInformation.Value().background.Value().size.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_backgroundInsideOptional_size);
            }
            else
            {
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional;
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_width;
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_widthClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_widthCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_widthClassName.c_str(),
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_widthCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().background.Value().size.Value().width,
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_width);
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_height;
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_heightClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_heightCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_heightClassName.c_str(),
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_heightCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().background.Value().size.Value().height,
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_height);
                jobject BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metric;
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metricClassName =
                    "java/lang/Integer";
                std::string BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metricCtorSignature =
                    "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metricClassName.c_str(),
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metricCtorSignature.c_str(),
                    static_cast<uint8_t>(dataResponse.brandingInformation.Value().background.Value().size.Value().metric),
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metric);

                jclass dimensionStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterDimensionStruct", dimensionStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterDimensionStruct");
                    return;
                }
                jmethodID dimensionStructStructCtor_5 = env->GetMethodID(
                    dimensionStructStructClass_5, "<init>", "(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;)V");
                if (dimensionStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterDimensionStruct constructor");
                    return;
                }

                BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional =
                    env->NewObject(dimensionStructStructClass_5, dimensionStructStructCtor_5,
                                   BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_width,
                                   BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_height,
                                   BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional_metric);
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_backgroundInsideOptional_sizeInsideOptional,
                    BrandingInformationInsideOptional_backgroundInsideOptional_size);
            }

            jclass styleInformationStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterStyleInformationStruct",
                styleInformationStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterStyleInformationStruct");
                return;
            }
            jmethodID styleInformationStructStructCtor_3 = env->GetMethodID(
                styleInformationStructStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V");
            if (styleInformationStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterStyleInformationStruct constructor");
                return;
            }

            BrandingInformationInsideOptional_backgroundInsideOptional =
                env->NewObject(styleInformationStructStructClass_3, styleInformationStructStructCtor_3,
                               BrandingInformationInsideOptional_backgroundInsideOptional_imageURL,
                               BrandingInformationInsideOptional_backgroundInsideOptional_color,
                               BrandingInformationInsideOptional_backgroundInsideOptional_size);
            chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional_backgroundInsideOptional,
                                                              BrandingInformationInsideOptional_background);
        }
        jobject BrandingInformationInsideOptional_logo;
        if (!dataResponse.brandingInformation.Value().logo.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformationInsideOptional_logo);
        }
        else
        {
            jobject BrandingInformationInsideOptional_logoInsideOptional;
            jobject BrandingInformationInsideOptional_logoInsideOptional_imageURL;
            if (!dataResponse.brandingInformation.Value().logo.Value().imageURL.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_logoInsideOptional_imageURL);
            }
            else
            {
                jobject BrandingInformationInsideOptional_logoInsideOptional_imageURLInsideOptional;
                BrandingInformationInsideOptional_logoInsideOptional_imageURLInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().logo.Value().imageURL.Value().data(),
                                                  dataResponse.brandingInformation.Value().logo.Value().imageURL.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_logoInsideOptional_imageURLInsideOptional,
                    BrandingInformationInsideOptional_logoInsideOptional_imageURL);
            }
            jobject BrandingInformationInsideOptional_logoInsideOptional_color;
            if (!dataResponse.brandingInformation.Value().logo.Value().color.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_logoInsideOptional_color);
            }
            else
            {
                jobject BrandingInformationInsideOptional_logoInsideOptional_colorInsideOptional;
                BrandingInformationInsideOptional_logoInsideOptional_colorInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().logo.Value().color.Value().data(),
                                                  dataResponse.brandingInformation.Value().logo.Value().color.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_logoInsideOptional_colorInsideOptional,
                    BrandingInformationInsideOptional_logoInsideOptional_color);
            }
            jobject BrandingInformationInsideOptional_logoInsideOptional_size;
            if (!dataResponse.brandingInformation.Value().logo.Value().size.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_logoInsideOptional_size);
            }
            else
            {
                jobject BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional;
                jobject BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_width;
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_widthClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_widthCtorSignature = "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_widthClassName.c_str(),
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_widthCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().logo.Value().size.Value().width,
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_width);
                jobject BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_height;
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_heightClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_heightCtorSignature = "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_heightClassName.c_str(),
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_heightCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().logo.Value().size.Value().height,
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_height);
                jobject BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metric;
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metricClassName =
                    "java/lang/Integer";
                std::string BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metricCtorSignature = "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metricClassName.c_str(),
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metricCtorSignature.c_str(),
                    static_cast<uint8_t>(dataResponse.brandingInformation.Value().logo.Value().size.Value().metric),
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metric);

                jclass dimensionStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterDimensionStruct", dimensionStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterDimensionStruct");
                    return;
                }
                jmethodID dimensionStructStructCtor_5 = env->GetMethodID(
                    dimensionStructStructClass_5, "<init>", "(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;)V");
                if (dimensionStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterDimensionStruct constructor");
                    return;
                }

                BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional =
                    env->NewObject(dimensionStructStructClass_5, dimensionStructStructCtor_5,
                                   BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_width,
                                   BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_height,
                                   BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional_metric);
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_logoInsideOptional_sizeInsideOptional,
                    BrandingInformationInsideOptional_logoInsideOptional_size);
            }

            jclass styleInformationStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterStyleInformationStruct",
                styleInformationStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterStyleInformationStruct");
                return;
            }
            jmethodID styleInformationStructStructCtor_3 = env->GetMethodID(
                styleInformationStructStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V");
            if (styleInformationStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterStyleInformationStruct constructor");
                return;
            }

            BrandingInformationInsideOptional_logoInsideOptional =
                env->NewObject(styleInformationStructStructClass_3, styleInformationStructStructCtor_3,
                               BrandingInformationInsideOptional_logoInsideOptional_imageURL,
                               BrandingInformationInsideOptional_logoInsideOptional_color,
                               BrandingInformationInsideOptional_logoInsideOptional_size);
            chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional_logoInsideOptional,
                                                              BrandingInformationInsideOptional_logo);
        }
        jobject BrandingInformationInsideOptional_progressBar;
        if (!dataResponse.brandingInformation.Value().progressBar.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformationInsideOptional_progressBar);
        }
        else
        {
            jobject BrandingInformationInsideOptional_progressBarInsideOptional;
            jobject BrandingInformationInsideOptional_progressBarInsideOptional_imageURL;
            if (!dataResponse.brandingInformation.Value().progressBar.Value().imageURL.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(
                    nullptr, BrandingInformationInsideOptional_progressBarInsideOptional_imageURL);
            }
            else
            {
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_imageURLInsideOptional;
                BrandingInformationInsideOptional_progressBarInsideOptional_imageURLInsideOptional = env->NewStringUTF(
                    std::string(dataResponse.brandingInformation.Value().progressBar.Value().imageURL.Value().data(),
                                dataResponse.brandingInformation.Value().progressBar.Value().imageURL.Value().size())
                        .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_progressBarInsideOptional_imageURLInsideOptional,
                    BrandingInformationInsideOptional_progressBarInsideOptional_imageURL);
            }
            jobject BrandingInformationInsideOptional_progressBarInsideOptional_color;
            if (!dataResponse.brandingInformation.Value().progressBar.Value().color.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(
                    nullptr, BrandingInformationInsideOptional_progressBarInsideOptional_color);
            }
            else
            {
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_colorInsideOptional;
                BrandingInformationInsideOptional_progressBarInsideOptional_colorInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().progressBar.Value().color.Value().data(),
                                                  dataResponse.brandingInformation.Value().progressBar.Value().color.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_progressBarInsideOptional_colorInsideOptional,
                    BrandingInformationInsideOptional_progressBarInsideOptional_color);
            }
            jobject BrandingInformationInsideOptional_progressBarInsideOptional_size;
            if (!dataResponse.brandingInformation.Value().progressBar.Value().size.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_progressBarInsideOptional_size);
            }
            else
            {
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional;
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_width;
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_widthClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_widthCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_widthClassName.c_str(),
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_widthCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().progressBar.Value().size.Value().width,
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_width);
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_height;
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_heightClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_heightCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_heightClassName.c_str(),
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_heightCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().progressBar.Value().size.Value().height,
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_height);
                jobject BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metric;
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metricClassName =
                    "java/lang/Integer";
                std::string BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metricCtorSignature =
                    "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metricClassName.c_str(),
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metricCtorSignature.c_str(),
                    static_cast<uint8_t>(dataResponse.brandingInformation.Value().progressBar.Value().size.Value().metric),
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metric);

                jclass dimensionStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterDimensionStruct", dimensionStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterDimensionStruct");
                    return;
                }
                jmethodID dimensionStructStructCtor_5 = env->GetMethodID(
                    dimensionStructStructClass_5, "<init>", "(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;)V");
                if (dimensionStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterDimensionStruct constructor");
                    return;
                }

                BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional =
                    env->NewObject(dimensionStructStructClass_5, dimensionStructStructCtor_5,
                                   BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_width,
                                   BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_height,
                                   BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional_metric);
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_progressBarInsideOptional_sizeInsideOptional,
                    BrandingInformationInsideOptional_progressBarInsideOptional_size);
            }

            jclass styleInformationStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterStyleInformationStruct",
                styleInformationStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterStyleInformationStruct");
                return;
            }
            jmethodID styleInformationStructStructCtor_3 = env->GetMethodID(
                styleInformationStructStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V");
            if (styleInformationStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterStyleInformationStruct constructor");
                return;
            }

            BrandingInformationInsideOptional_progressBarInsideOptional =
                env->NewObject(styleInformationStructStructClass_3, styleInformationStructStructCtor_3,
                               BrandingInformationInsideOptional_progressBarInsideOptional_imageURL,
                               BrandingInformationInsideOptional_progressBarInsideOptional_color,
                               BrandingInformationInsideOptional_progressBarInsideOptional_size);
            chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional_progressBarInsideOptional,
                                                              BrandingInformationInsideOptional_progressBar);
        }
        jobject BrandingInformationInsideOptional_splash;
        if (!dataResponse.brandingInformation.Value().splash.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformationInsideOptional_splash);
        }
        else
        {
            jobject BrandingInformationInsideOptional_splashInsideOptional;
            jobject BrandingInformationInsideOptional_splashInsideOptional_imageURL;
            if (!dataResponse.brandingInformation.Value().splash.Value().imageURL.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_splashInsideOptional_imageURL);
            }
            else
            {
                jobject BrandingInformationInsideOptional_splashInsideOptional_imageURLInsideOptional;
                BrandingInformationInsideOptional_splashInsideOptional_imageURLInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().splash.Value().imageURL.Value().data(),
                                                  dataResponse.brandingInformation.Value().splash.Value().imageURL.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_splashInsideOptional_imageURLInsideOptional,
                    BrandingInformationInsideOptional_splashInsideOptional_imageURL);
            }
            jobject BrandingInformationInsideOptional_splashInsideOptional_color;
            if (!dataResponse.brandingInformation.Value().splash.Value().color.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_splashInsideOptional_color);
            }
            else
            {
                jobject BrandingInformationInsideOptional_splashInsideOptional_colorInsideOptional;
                BrandingInformationInsideOptional_splashInsideOptional_colorInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().splash.Value().color.Value().data(),
                                                  dataResponse.brandingInformation.Value().splash.Value().color.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_splashInsideOptional_colorInsideOptional,
                    BrandingInformationInsideOptional_splashInsideOptional_color);
            }
            jobject BrandingInformationInsideOptional_splashInsideOptional_size;
            if (!dataResponse.brandingInformation.Value().splash.Value().size.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_splashInsideOptional_size);
            }
            else
            {
                jobject BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional;
                jobject BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_width;
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_widthClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_widthCtorSignature = "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_widthClassName.c_str(),
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_widthCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().splash.Value().size.Value().width,
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_width);
                jobject BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_height;
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_heightClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_heightCtorSignature = "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_heightClassName.c_str(),
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_heightCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().splash.Value().size.Value().height,
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_height);
                jobject BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metric;
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metricClassName =
                    "java/lang/Integer";
                std::string BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metricCtorSignature = "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metricClassName.c_str(),
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metricCtorSignature.c_str(),
                    static_cast<uint8_t>(dataResponse.brandingInformation.Value().splash.Value().size.Value().metric),
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metric);

                jclass dimensionStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterDimensionStruct", dimensionStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterDimensionStruct");
                    return;
                }
                jmethodID dimensionStructStructCtor_5 = env->GetMethodID(
                    dimensionStructStructClass_5, "<init>", "(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;)V");
                if (dimensionStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterDimensionStruct constructor");
                    return;
                }

                BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional =
                    env->NewObject(dimensionStructStructClass_5, dimensionStructStructCtor_5,
                                   BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_width,
                                   BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_height,
                                   BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional_metric);
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_splashInsideOptional_sizeInsideOptional,
                    BrandingInformationInsideOptional_splashInsideOptional_size);
            }

            jclass styleInformationStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterStyleInformationStruct",
                styleInformationStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterStyleInformationStruct");
                return;
            }
            jmethodID styleInformationStructStructCtor_3 = env->GetMethodID(
                styleInformationStructStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V");
            if (styleInformationStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterStyleInformationStruct constructor");
                return;
            }

            BrandingInformationInsideOptional_splashInsideOptional =
                env->NewObject(styleInformationStructStructClass_3, styleInformationStructStructCtor_3,
                               BrandingInformationInsideOptional_splashInsideOptional_imageURL,
                               BrandingInformationInsideOptional_splashInsideOptional_color,
                               BrandingInformationInsideOptional_splashInsideOptional_size);
            chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional_splashInsideOptional,
                                                              BrandingInformationInsideOptional_splash);
        }
        jobject BrandingInformationInsideOptional_waterMark;
        if (!dataResponse.brandingInformation.Value().waterMark.HasValue())
        {
            chip::JniReferences::GetInstance().CreateOptional(nullptr, BrandingInformationInsideOptional_waterMark);
        }
        else
        {
            jobject BrandingInformationInsideOptional_waterMarkInsideOptional;
            jobject BrandingInformationInsideOptional_waterMarkInsideOptional_imageURL;
            if (!dataResponse.brandingInformation.Value().waterMark.Value().imageURL.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(
                    nullptr, BrandingInformationInsideOptional_waterMarkInsideOptional_imageURL);
            }
            else
            {
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_imageURLInsideOptional;
                BrandingInformationInsideOptional_waterMarkInsideOptional_imageURLInsideOptional = env->NewStringUTF(
                    std::string(dataResponse.brandingInformation.Value().waterMark.Value().imageURL.Value().data(),
                                dataResponse.brandingInformation.Value().waterMark.Value().imageURL.Value().size())
                        .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_imageURLInsideOptional,
                    BrandingInformationInsideOptional_waterMarkInsideOptional_imageURL);
            }
            jobject BrandingInformationInsideOptional_waterMarkInsideOptional_color;
            if (!dataResponse.brandingInformation.Value().waterMark.Value().color.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_waterMarkInsideOptional_color);
            }
            else
            {
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_colorInsideOptional;
                BrandingInformationInsideOptional_waterMarkInsideOptional_colorInsideOptional =
                    env->NewStringUTF(std::string(dataResponse.brandingInformation.Value().waterMark.Value().color.Value().data(),
                                                  dataResponse.brandingInformation.Value().waterMark.Value().color.Value().size())
                                          .c_str());
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_colorInsideOptional,
                    BrandingInformationInsideOptional_waterMarkInsideOptional_color);
            }
            jobject BrandingInformationInsideOptional_waterMarkInsideOptional_size;
            if (!dataResponse.brandingInformation.Value().waterMark.Value().size.HasValue())
            {
                chip::JniReferences::GetInstance().CreateOptional(nullptr,
                                                                  BrandingInformationInsideOptional_waterMarkInsideOptional_size);
            }
            else
            {
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional;
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_width;
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_widthClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_widthCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_widthClassName.c_str(),
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_widthCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().waterMark.Value().size.Value().width,
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_width);
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_height;
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_heightClassName =
                    "java/lang/Double";
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_heightCtorSignature =
                    "(D)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_heightClassName.c_str(),
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_heightCtorSignature.c_str(),
                    dataResponse.brandingInformation.Value().waterMark.Value().size.Value().height,
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_height);
                jobject BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metric;
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metricClassName =
                    "java/lang/Integer";
                std::string BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metricCtorSignature =
                    "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metricClassName.c_str(),
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metricCtorSignature.c_str(),
                    static_cast<uint8_t>(dataResponse.brandingInformation.Value().waterMark.Value().size.Value().metric),
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metric);

                jclass dimensionStructStructClass_5;
                err = chip::JniReferences::GetInstance().GetClassRef(
                    env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterDimensionStruct", dimensionStructStructClass_5);
                if (err != CHIP_NO_ERROR)
                {
                    ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterDimensionStruct");
                    return;
                }
                jmethodID dimensionStructStructCtor_5 = env->GetMethodID(
                    dimensionStructStructClass_5, "<init>", "(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Integer;)V");
                if (dimensionStructStructCtor_5 == nullptr)
                {
                    ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterDimensionStruct constructor");
                    return;
                }

                BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional =
                    env->NewObject(dimensionStructStructClass_5, dimensionStructStructCtor_5,
                                   BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_width,
                                   BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_height,
                                   BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional_metric);
                chip::JniReferences::GetInstance().CreateOptional(
                    BrandingInformationInsideOptional_waterMarkInsideOptional_sizeInsideOptional,
                    BrandingInformationInsideOptional_waterMarkInsideOptional_size);
            }

            jclass styleInformationStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterStyleInformationStruct",
                styleInformationStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterStyleInformationStruct");
                return;
            }
            jmethodID styleInformationStructStructCtor_3 = env->GetMethodID(
                styleInformationStructStructClass_3, "<init>", "(Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;)V");
            if (styleInformationStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterStyleInformationStruct constructor");
                return;
            }

            BrandingInformationInsideOptional_waterMarkInsideOptional =
                env->NewObject(styleInformationStructStructClass_3, styleInformationStructStructCtor_3,
                               BrandingInformationInsideOptional_waterMarkInsideOptional_imageURL,
                               BrandingInformationInsideOptional_waterMarkInsideOptional_color,
                               BrandingInformationInsideOptional_waterMarkInsideOptional_size);
            chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional_waterMarkInsideOptional,
                                                              BrandingInformationInsideOptional_waterMark);
        }

        jclass brandingInformationStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ContentLauncherClusterBrandingInformationStruct",
            brandingInformationStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ContentLauncherClusterBrandingInformationStruct");
            return;
        }
        jmethodID brandingInformationStructStructCtor_1 =
            env->GetMethodID(brandingInformationStructStructClass_1, "<init>",
                             "(Ljava/lang/String;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/Optional;Ljava/util/"
                             "Optional;Ljava/util/Optional;)V");
        if (brandingInformationStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ContentLauncherClusterBrandingInformationStruct constructor");
            return;
        }

        BrandingInformationInsideOptional =
            env->NewObject(brandingInformationStructStructClass_1, brandingInformationStructStructCtor_1,
                           BrandingInformationInsideOptional_providerName, BrandingInformationInsideOptional_background,
                           BrandingInformationInsideOptional_logo, BrandingInformationInsideOptional_progressBar,
                           BrandingInformationInsideOptional_splash, BrandingInformationInsideOptional_waterMark);
        chip::JniReferences::GetInstance().CreateOptional(BrandingInformationInsideOptional, BrandingInformation);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, ContentURL, DisplayString, BrandingInformation);
}
CHIPAudioOutputClusterSelectOutputCallback::CHIPAudioOutputClusterSelectOutputCallback(jobject javaCallback) :
    Callback::Callback<CHIPAudioOutputClusterSelectOutputCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAudioOutputClusterSelectOutputCallback::~CHIPAudioOutputClusterSelectOutputCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAudioOutputClusterSelectOutputCallback::CallbackFn(
    void * context, const chip::app::Clusters::AudioOutput::Commands::SelectOutput::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAudioOutputClusterSelectOutputCallback, void (*)(CHIPAudioOutputClusterSelectOutputCallback *)> cppCallback(
        reinterpret_cast<CHIPAudioOutputClusterSelectOutputCallback *>(context),
        chip::Platform::Delete<CHIPAudioOutputClusterSelectOutputCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Index;
    std::string IndexClassName     = "java/lang/Integer";
    std::string IndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(IndexClassName.c_str(), IndexCtorSignature.c_str(),
                                                                  dataResponse.index, Index);

    env->CallVoidMethod(javaCallbackRef, javaMethod, Index);
}
CHIPAudioOutputClusterRenameOutputCallback::CHIPAudioOutputClusterRenameOutputCallback(jobject javaCallback) :
    Callback::Callback<CHIPAudioOutputClusterRenameOutputCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAudioOutputClusterRenameOutputCallback::~CHIPAudioOutputClusterRenameOutputCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAudioOutputClusterRenameOutputCallback::CallbackFn(
    void * context, const chip::app::Clusters::AudioOutput::Commands::RenameOutput::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAudioOutputClusterRenameOutputCallback, void (*)(CHIPAudioOutputClusterRenameOutputCallback *)> cppCallback(
        reinterpret_cast<CHIPAudioOutputClusterRenameOutputCallback *>(context),
        chip::Platform::Delete<CHIPAudioOutputClusterRenameOutputCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/String;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Index;
    std::string IndexClassName     = "java/lang/Integer";
    std::string IndexCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(IndexClassName.c_str(), IndexCtorSignature.c_str(),
                                                                  dataResponse.index, Index);
    jobject Name;
    Name = env->NewStringUTF(std::string(dataResponse.name.data(), dataResponse.name.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, Index, Name);
}
CHIPApplicationLauncherClusterLaunchAppCallback::CHIPApplicationLauncherClusterLaunchAppCallback(jobject javaCallback) :
    Callback::Callback<CHIPApplicationLauncherClusterLaunchAppCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPApplicationLauncherClusterLaunchAppCallback::~CHIPApplicationLauncherClusterLaunchAppCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPApplicationLauncherClusterLaunchAppCallback::CallbackFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::LaunchApp::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPApplicationLauncherClusterLaunchAppCallback, void (*)(CHIPApplicationLauncherClusterLaunchAppCallback *)>
        cppCallback(reinterpret_cast<CHIPApplicationLauncherClusterLaunchAppCallback *>(context),
                    chip::Platform::Delete<CHIPApplicationLauncherClusterLaunchAppCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;Ljava/util/Optional;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Application;
    if (!dataResponse.application.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Application);
    }
    else
    {
        jobject ApplicationInsideOptional;
        jobject ApplicationInsideOptional_catalogVendorID;
        std::string ApplicationInsideOptional_catalogVendorIDClassName     = "java/lang/Integer";
        std::string ApplicationInsideOptional_catalogVendorIDCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            ApplicationInsideOptional_catalogVendorIDClassName.c_str(),
            ApplicationInsideOptional_catalogVendorIDCtorSignature.c_str(), dataResponse.application.Value().catalogVendorID,
            ApplicationInsideOptional_catalogVendorID);
        jobject ApplicationInsideOptional_applicationID;
        ApplicationInsideOptional_applicationID =
            env->NewStringUTF(std::string(dataResponse.application.Value().applicationID.data(),
                                          dataResponse.application.Value().applicationID.size())
                                  .c_str());

        jclass applicationStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ApplicationLauncherClusterApplicationStruct", applicationStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ApplicationLauncherClusterApplicationStruct");
            return;
        }
        jmethodID applicationStructStructCtor_1 =
            env->GetMethodID(applicationStructStructClass_1, "<init>", "(Ljava/lang/Integer;Ljava/lang/String;)V");
        if (applicationStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ApplicationLauncherClusterApplicationStruct constructor");
            return;
        }

        ApplicationInsideOptional =
            env->NewObject(applicationStructStructClass_1, applicationStructStructCtor_1, ApplicationInsideOptional_catalogVendorID,
                           ApplicationInsideOptional_applicationID);
        chip::JniReferences::GetInstance().CreateOptional(ApplicationInsideOptional, Application);
    }
    jobject Data;
    if (!dataResponse.data.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Data);
    }
    else
    {
        jobject DataInsideOptional;
        jbyteArray DataInsideOptionalByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.data.Value().size()));
        env->SetByteArrayRegion(DataInsideOptionalByteArray, 0, static_cast<jsize>(dataResponse.data.Value().size()),
                                reinterpret_cast<const jbyte *>(dataResponse.data.Value().data()));
        DataInsideOptional = DataInsideOptionalByteArray;
        chip::JniReferences::GetInstance().CreateOptional(DataInsideOptional, Data);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Application, Data);
}
CHIPApplicationLauncherClusterStopAppCallback::CHIPApplicationLauncherClusterStopAppCallback(jobject javaCallback) :
    Callback::Callback<CHIPApplicationLauncherClusterStopAppCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPApplicationLauncherClusterStopAppCallback::~CHIPApplicationLauncherClusterStopAppCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPApplicationLauncherClusterStopAppCallback::CallbackFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::StopApp::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPApplicationLauncherClusterStopAppCallback, void (*)(CHIPApplicationLauncherClusterStopAppCallback *)>
        cppCallback(reinterpret_cast<CHIPApplicationLauncherClusterStopAppCallback *>(context),
                    chip::Platform::Delete<CHIPApplicationLauncherClusterStopAppCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Application;
    if (!dataResponse.application.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Application);
    }
    else
    {
        jobject ApplicationInsideOptional;
        jobject ApplicationInsideOptional_catalogVendorID;
        std::string ApplicationInsideOptional_catalogVendorIDClassName     = "java/lang/Integer";
        std::string ApplicationInsideOptional_catalogVendorIDCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            ApplicationInsideOptional_catalogVendorIDClassName.c_str(),
            ApplicationInsideOptional_catalogVendorIDCtorSignature.c_str(), dataResponse.application.Value().catalogVendorID,
            ApplicationInsideOptional_catalogVendorID);
        jobject ApplicationInsideOptional_applicationID;
        ApplicationInsideOptional_applicationID =
            env->NewStringUTF(std::string(dataResponse.application.Value().applicationID.data(),
                                          dataResponse.application.Value().applicationID.size())
                                  .c_str());

        jclass applicationStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ApplicationLauncherClusterApplicationStruct", applicationStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ApplicationLauncherClusterApplicationStruct");
            return;
        }
        jmethodID applicationStructStructCtor_1 =
            env->GetMethodID(applicationStructStructClass_1, "<init>", "(Ljava/lang/Integer;Ljava/lang/String;)V");
        if (applicationStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ApplicationLauncherClusterApplicationStruct constructor");
            return;
        }

        ApplicationInsideOptional =
            env->NewObject(applicationStructStructClass_1, applicationStructStructCtor_1, ApplicationInsideOptional_catalogVendorID,
                           ApplicationInsideOptional_applicationID);
        chip::JniReferences::GetInstance().CreateOptional(ApplicationInsideOptional, Application);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Application);
}
CHIPApplicationLauncherClusterHideAppCallback::CHIPApplicationLauncherClusterHideAppCallback(jobject javaCallback) :
    Callback::Callback<CHIPApplicationLauncherClusterHideAppCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPApplicationLauncherClusterHideAppCallback::~CHIPApplicationLauncherClusterHideAppCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPApplicationLauncherClusterHideAppCallback::CallbackFn(
    void * context, const chip::app::Clusters::ApplicationLauncher::Commands::HideApp::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPApplicationLauncherClusterHideAppCallback, void (*)(CHIPApplicationLauncherClusterHideAppCallback *)>
        cppCallback(reinterpret_cast<CHIPApplicationLauncherClusterHideAppCallback *>(context),
                    chip::Platform::Delete<CHIPApplicationLauncherClusterHideAppCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject Application;
    if (!dataResponse.application.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, Application);
    }
    else
    {
        jobject ApplicationInsideOptional;
        jobject ApplicationInsideOptional_catalogVendorID;
        std::string ApplicationInsideOptional_catalogVendorIDClassName     = "java/lang/Integer";
        std::string ApplicationInsideOptional_catalogVendorIDCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            ApplicationInsideOptional_catalogVendorIDClassName.c_str(),
            ApplicationInsideOptional_catalogVendorIDCtorSignature.c_str(), dataResponse.application.Value().catalogVendorID,
            ApplicationInsideOptional_catalogVendorID);
        jobject ApplicationInsideOptional_applicationID;
        ApplicationInsideOptional_applicationID =
            env->NewStringUTF(std::string(dataResponse.application.Value().applicationID.data(),
                                          dataResponse.application.Value().applicationID.size())
                                  .c_str());

        jclass applicationStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$ApplicationLauncherClusterApplicationStruct", applicationStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$ApplicationLauncherClusterApplicationStruct");
            return;
        }
        jmethodID applicationStructStructCtor_1 =
            env->GetMethodID(applicationStructStructClass_1, "<init>", "(Ljava/lang/Integer;Ljava/lang/String;)V");
        if (applicationStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$ApplicationLauncherClusterApplicationStruct constructor");
            return;
        }

        ApplicationInsideOptional =
            env->NewObject(applicationStructStructClass_1, applicationStructStructCtor_1, ApplicationInsideOptional_catalogVendorID,
                           ApplicationInsideOptional_applicationID);
        chip::JniReferences::GetInstance().CreateOptional(ApplicationInsideOptional, Application);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, Application);
}
CHIPAccountLoginClusterGetSetupPINCallback::CHIPAccountLoginClusterGetSetupPINCallback(jobject javaCallback) :
    Callback::Callback<CHIPAccountLoginClusterGetSetupPINCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAccountLoginClusterGetSetupPINCallback::~CHIPAccountLoginClusterGetSetupPINCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAccountLoginClusterGetSetupPINCallback::CallbackFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::GetSetupPIN::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAccountLoginClusterGetSetupPINCallback, void (*)(CHIPAccountLoginClusterGetSetupPINCallback *)> cppCallback(
        reinterpret_cast<CHIPAccountLoginClusterGetSetupPINCallback *>(context),
        chip::Platform::Delete<CHIPAccountLoginClusterGetSetupPINCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/String;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject TempAccountIdentifier;
    TempAccountIdentifier = env->NewStringUTF(
        std::string(dataResponse.tempAccountIdentifier.data(), dataResponse.tempAccountIdentifier.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, TempAccountIdentifier);
}
CHIPAccountLoginClusterLoginCallback::CHIPAccountLoginClusterLoginCallback(jobject javaCallback) :
    Callback::Callback<CHIPAccountLoginClusterLoginCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAccountLoginClusterLoginCallback::~CHIPAccountLoginClusterLoginCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAccountLoginClusterLoginCallback::CallbackFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::Login::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAccountLoginClusterLoginCallback, void (*)(CHIPAccountLoginClusterLoginCallback *)> cppCallback(
        reinterpret_cast<CHIPAccountLoginClusterLoginCallback *>(context),
        chip::Platform::Delete<CHIPAccountLoginClusterLoginCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/String;Ljava/lang/String;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject TempAccountIdentifier;
    TempAccountIdentifier = env->NewStringUTF(
        std::string(dataResponse.tempAccountIdentifier.data(), dataResponse.tempAccountIdentifier.size()).c_str());
    jobject SetupPIN;
    SetupPIN = env->NewStringUTF(std::string(dataResponse.setupPIN.data(), dataResponse.setupPIN.size()).c_str());

    env->CallVoidMethod(javaCallbackRef, javaMethod, TempAccountIdentifier, SetupPIN);
}
CHIPAccountLoginClusterLogoutCallback::CHIPAccountLoginClusterLogoutCallback(jobject javaCallback) :
    Callback::Callback<CHIPAccountLoginClusterLogoutCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPAccountLoginClusterLogoutCallback::~CHIPAccountLoginClusterLogoutCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPAccountLoginClusterLogoutCallback::CallbackFn(
    void * context, const chip::app::Clusters::AccountLogin::Commands::Logout::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPAccountLoginClusterLogoutCallback, void (*)(CHIPAccountLoginClusterLogoutCallback *)> cppCallback(
        reinterpret_cast<CHIPAccountLoginClusterLogoutCallback *>(context),
        chip::Platform::Delete<CHIPAccountLoginClusterLogoutCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback::CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPElectricalMeasurementClusterGetProfileInfoCommandCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback::~CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback::CallbackFn(
    void * context, const chip::app::Clusters::ElectricalMeasurement::Commands::GetProfileInfoCommand::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback,
                    void (*)(CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback *)>
        cppCallback(reinterpret_cast<CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback *>(context),
                    chip::Platform::Delete<CHIPElectricalMeasurementClusterGetProfileInfoCommandCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback::
    CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback(jobject javaCallback) :
    Callback::Callback<CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback::
    ~CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::ElectricalMeasurement::Commands::GetMeasurementProfileCommand::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback,
                    void (*)(CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback *)>
        cppCallback(reinterpret_cast<CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback *>(context),
                    chip::Platform::Delete<CHIPElectricalMeasurementClusterGetMeasurementProfileCommandCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject attributeId;
    std::string attributeIdClassName     = "java/lang/Integer";
    std::string attributeIdCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(attributeIdClassName.c_str(), attributeIdCtorSignature.c_str(),
                                                                   dataResponse.attributeId, attributeId);
    jobject startTime;
    std::string startTimeClassName     = "java/lang/Long";
    std::string startTimeCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(startTimeClassName.c_str(), startTimeCtorSignature.c_str(),
                                                                   dataResponse.startTime, startTime);
    jobject numberOfIntervals;
    std::string numberOfIntervalsClassName     = "java/lang/Integer";
    std::string numberOfIntervalsCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(numberOfIntervalsClassName.c_str(),
                                                                  numberOfIntervalsCtorSignature.c_str(),
                                                                  dataResponse.numberOfIntervals, numberOfIntervals);

    env->CallVoidMethod(javaCallbackRef, javaMethod, attributeId, startTime, numberOfIntervals);
}
CHIPClientMonitoringClusterRegisterClientMonitoringCallback::CHIPClientMonitoringClusterRegisterClientMonitoringCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPClientMonitoringClusterRegisterClientMonitoringCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPClientMonitoringClusterRegisterClientMonitoringCallback::~CHIPClientMonitoringClusterRegisterClientMonitoringCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPClientMonitoringClusterRegisterClientMonitoringCallback::CallbackFn(
    void * context, const chip::app::Clusters::ClientMonitoring::Commands::RegisterClientMonitoring::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPClientMonitoringClusterRegisterClientMonitoringCallback,
                    void (*)(CHIPClientMonitoringClusterRegisterClientMonitoringCallback *)>
        cppCallback(reinterpret_cast<CHIPClientMonitoringClusterRegisterClientMonitoringCallback *>(context),
                    chip::Platform::Delete<CHIPClientMonitoringClusterRegisterClientMonitoringCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Long;Ljava/lang/Long;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ClientNodeId;
    std::string ClientNodeIdClassName     = "java/lang/Long";
    std::string ClientNodeIdCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(ClientNodeIdClassName.c_str(), ClientNodeIdCtorSignature.c_str(),
                                                                   dataResponse.clientNodeId, ClientNodeId);
    jobject ICid;
    std::string ICidClassName     = "java/lang/Long";
    std::string ICidCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(ICidClassName.c_str(), ICidCtorSignature.c_str(),
                                                                   dataResponse.ICid, ICid);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ClientNodeId, ICid);
}
CHIPClientMonitoringClusterUnregisterClientMonitoringCallback::CHIPClientMonitoringClusterUnregisterClientMonitoringCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPClientMonitoringClusterUnregisterClientMonitoringCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPClientMonitoringClusterUnregisterClientMonitoringCallback::~CHIPClientMonitoringClusterUnregisterClientMonitoringCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPClientMonitoringClusterUnregisterClientMonitoringCallback::CallbackFn(
    void * context, const chip::app::Clusters::ClientMonitoring::Commands::UnregisterClientMonitoring::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPClientMonitoringClusterUnregisterClientMonitoringCallback,
                    void (*)(CHIPClientMonitoringClusterUnregisterClientMonitoringCallback *)>
        cppCallback(reinterpret_cast<CHIPClientMonitoringClusterUnregisterClientMonitoringCallback *>(context),
                    chip::Platform::Delete<CHIPClientMonitoringClusterUnregisterClientMonitoringCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Long;Ljava/lang/Long;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject ClientNodeId;
    std::string ClientNodeIdClassName     = "java/lang/Long";
    std::string ClientNodeIdCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(ClientNodeIdClassName.c_str(), ClientNodeIdCtorSignature.c_str(),
                                                                   dataResponse.clientNodeId, ClientNodeId);
    jobject ICid;
    std::string ICidClassName     = "java/lang/Long";
    std::string ICidCtorSignature = "(J)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint64_t>(ICidClassName.c_str(), ICidCtorSignature.c_str(),
                                                                   dataResponse.ICid, ICid);

    env->CallVoidMethod(javaCallbackRef, javaMethod, ClientNodeId, ICid);
}
CHIPClientMonitoringClusterStayAwakeRequestCallback::CHIPClientMonitoringClusterStayAwakeRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPClientMonitoringClusterStayAwakeRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPClientMonitoringClusterStayAwakeRequestCallback::~CHIPClientMonitoringClusterStayAwakeRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPClientMonitoringClusterStayAwakeRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::ClientMonitoring::Commands::StayAwakeRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPClientMonitoringClusterStayAwakeRequestCallback,
                    void (*)(CHIPClientMonitoringClusterStayAwakeRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPClientMonitoringClusterStayAwakeRequestCallback *>(context),
                    chip::Platform::Delete<CHIPClientMonitoringClusterStayAwakeRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestCallback::CHIPUnitTestingClusterTestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestCallback::~CHIPUnitTestingClusterTestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::Test::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestCallback, void (*)(CHIPUnitTestingClusterTestCallback *)> cppCallback(
        reinterpret_cast<CHIPUnitTestingClusterTestCallback *>(context),
        chip::Platform::Delete<CHIPUnitTestingClusterTestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestNotHandledCallback::CHIPUnitTestingClusterTestNotHandledCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestNotHandledCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestNotHandledCallback::~CHIPUnitTestingClusterTestNotHandledCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestNotHandledCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestNotHandled::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestNotHandledCallback, void (*)(CHIPUnitTestingClusterTestNotHandledCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestNotHandledCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestNotHandledCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestSpecificCallback::CHIPUnitTestingClusterTestSpecificCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestSpecificCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestSpecificCallback::~CHIPUnitTestingClusterTestSpecificCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestSpecificCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestSpecific::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestSpecificCallback, void (*)(CHIPUnitTestingClusterTestSpecificCallback *)> cppCallback(
        reinterpret_cast<CHIPUnitTestingClusterTestSpecificCallback *>(context),
        chip::Platform::Delete<CHIPUnitTestingClusterTestSpecificCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestUnknownCommandCallback::CHIPUnitTestingClusterTestUnknownCommandCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestUnknownCommandCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestUnknownCommandCallback::~CHIPUnitTestingClusterTestUnknownCommandCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestUnknownCommandCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestUnknownCommand::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestUnknownCommandCallback, void (*)(CHIPUnitTestingClusterTestUnknownCommandCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestUnknownCommandCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestUnknownCommandCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestAddArgumentsCallback::CHIPUnitTestingClusterTestAddArgumentsCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestAddArgumentsCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestAddArgumentsCallback::~CHIPUnitTestingClusterTestAddArgumentsCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestAddArgumentsCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestAddArguments::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestAddArgumentsCallback, void (*)(CHIPUnitTestingClusterTestAddArgumentsCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestAddArgumentsCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestAddArgumentsCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    std::string arg1ClassName     = "java/lang/Integer";
    std::string arg1CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1ClassName.c_str(), arg1CtorSignature.c_str(),
                                                                  dataResponse.arg1, arg1);
    jobject arg2;
    std::string arg2ClassName     = "java/lang/Integer";
    std::string arg2CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg2ClassName.c_str(), arg2CtorSignature.c_str(),
                                                                  dataResponse.arg2, arg2);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1, arg2);
}
CHIPUnitTestingClusterTestSimpleArgumentRequestCallback::CHIPUnitTestingClusterTestSimpleArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestSimpleArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestSimpleArgumentRequestCallback::~CHIPUnitTestingClusterTestSimpleArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestSimpleArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestSimpleArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestSimpleArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestSimpleArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestSimpleArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestSimpleArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Boolean;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    std::string arg1ClassName     = "java/lang/Boolean";
    std::string arg1CtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1ClassName.c_str(), arg1CtorSignature.c_str(), dataResponse.arg1,
                                                               arg1);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback::CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestStructArrayArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback::~CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestStructArrayArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestStructArrayArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/"
                                                  "ArrayList;Ljava/lang/Integer;Ljava/lang/Boolean;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    chip::JniReferences::GetInstance().CreateArrayList(arg1);

    auto iter_arg1_0 = dataResponse.arg1.begin();
    while (iter_arg1_0.Next())
    {
        auto & entry_0 = iter_arg1_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_a;
        std::string newElement_0_aClassName     = "java/lang/Integer";
        std::string newElement_0_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_aClassName.c_str(), newElement_0_aCtorSignature.c_str(), entry_0.a, newElement_0_a);
        jobject newElement_0_b;
        std::string newElement_0_bClassName     = "java/lang/Boolean";
        std::string newElement_0_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_0_bClassName.c_str(),
                                                                   newElement_0_bCtorSignature.c_str(), entry_0.b, newElement_0_b);
        jobject newElement_0_c;
        jobject newElement_0_c_a;
        std::string newElement_0_c_aClassName     = "java/lang/Integer";
        std::string newElement_0_c_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_c_aClassName.c_str(), newElement_0_c_aCtorSignature.c_str(), entry_0.c.a, newElement_0_c_a);
        jobject newElement_0_c_b;
        std::string newElement_0_c_bClassName     = "java/lang/Boolean";
        std::string newElement_0_c_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
            newElement_0_c_bClassName.c_str(), newElement_0_c_bCtorSignature.c_str(), entry_0.c.b, newElement_0_c_b);
        jobject newElement_0_c_c;
        std::string newElement_0_c_cClassName     = "java/lang/Integer";
        std::string newElement_0_c_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_0_c_cClassName.c_str(),
                                                                      newElement_0_c_cCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(entry_0.c.c), newElement_0_c_c);
        jobject newElement_0_c_d;
        jbyteArray newElement_0_c_dByteArray = env->NewByteArray(static_cast<jsize>(entry_0.c.d.size()));
        env->SetByteArrayRegion(newElement_0_c_dByteArray, 0, static_cast<jsize>(entry_0.c.d.size()),
                                reinterpret_cast<const jbyte *>(entry_0.c.d.data()));
        newElement_0_c_d = newElement_0_c_dByteArray;
        jobject newElement_0_c_e;
        newElement_0_c_e = env->NewStringUTF(std::string(entry_0.c.e.data(), entry_0.c.e.size()).c_str());
        jobject newElement_0_c_f;
        std::string newElement_0_c_fClassName     = "java/lang/Integer";
        std::string newElement_0_c_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_c_fClassName.c_str(), newElement_0_c_fCtorSignature.c_str(), entry_0.c.f.Raw(), newElement_0_c_f);
        jobject newElement_0_c_g;
        std::string newElement_0_c_gClassName     = "java/lang/Float";
        std::string newElement_0_c_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(
            newElement_0_c_gClassName.c_str(), newElement_0_c_gCtorSignature.c_str(), entry_0.c.g, newElement_0_c_g);
        jobject newElement_0_c_h;
        std::string newElement_0_c_hClassName     = "java/lang/Double";
        std::string newElement_0_c_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            newElement_0_c_hClassName.c_str(), newElement_0_c_hCtorSignature.c_str(), entry_0.c.h, newElement_0_c_h);

        jclass simpleStructStructClass_2;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_2 =
            env->GetMethodID(simpleStructStructClass_2, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_2 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        newElement_0_c = env->NewObject(simpleStructStructClass_2, simpleStructStructCtor_2, newElement_0_c_a, newElement_0_c_b,
                                        newElement_0_c_c, newElement_0_c_d, newElement_0_c_e, newElement_0_c_f, newElement_0_c_g,
                                        newElement_0_c_h);
        jobject newElement_0_d;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_d);

        auto iter_newElement_0_d_2 = entry_0.d.begin();
        while (iter_newElement_0_d_2.Next())
        {
            auto & entry_2 = iter_newElement_0_d_2.GetValue();
            jobject newElement_2;
            jobject newElement_2_a;
            std::string newElement_2_aClassName     = "java/lang/Integer";
            std::string newElement_2_aCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_2_aClassName.c_str(), newElement_2_aCtorSignature.c_str(), entry_2.a, newElement_2_a);
            jobject newElement_2_b;
            std::string newElement_2_bClassName     = "java/lang/Boolean";
            std::string newElement_2_bCtorSignature = "(Z)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
                newElement_2_bClassName.c_str(), newElement_2_bCtorSignature.c_str(), entry_2.b, newElement_2_b);
            jobject newElement_2_c;
            std::string newElement_2_cClassName     = "java/lang/Integer";
            std::string newElement_2_cCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_2_cClassName.c_str(),
                                                                          newElement_2_cCtorSignature.c_str(),
                                                                          static_cast<uint8_t>(entry_2.c), newElement_2_c);
            jobject newElement_2_d;
            jbyteArray newElement_2_dByteArray = env->NewByteArray(static_cast<jsize>(entry_2.d.size()));
            env->SetByteArrayRegion(newElement_2_dByteArray, 0, static_cast<jsize>(entry_2.d.size()),
                                    reinterpret_cast<const jbyte *>(entry_2.d.data()));
            newElement_2_d = newElement_2_dByteArray;
            jobject newElement_2_e;
            newElement_2_e = env->NewStringUTF(std::string(entry_2.e.data(), entry_2.e.size()).c_str());
            jobject newElement_2_f;
            std::string newElement_2_fClassName     = "java/lang/Integer";
            std::string newElement_2_fCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_2_fClassName.c_str(), newElement_2_fCtorSignature.c_str(), entry_2.f.Raw(), newElement_2_f);
            jobject newElement_2_g;
            std::string newElement_2_gClassName     = "java/lang/Float";
            std::string newElement_2_gCtorSignature = "(F)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<float>(
                newElement_2_gClassName.c_str(), newElement_2_gCtorSignature.c_str(), entry_2.g, newElement_2_g);
            jobject newElement_2_h;
            std::string newElement_2_hClassName     = "java/lang/Double";
            std::string newElement_2_hCtorSignature = "(D)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                newElement_2_hClassName.c_str(), newElement_2_hCtorSignature.c_str(), entry_2.h, newElement_2_h);

            jclass simpleStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
                return;
            }
            jmethodID simpleStructStructCtor_3 =
                env->GetMethodID(simpleStructStructClass_3, "<init>",
                                 "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                                 "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
            if (simpleStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
                return;
            }

            newElement_2 =
                env->NewObject(simpleStructStructClass_3, simpleStructStructCtor_3, newElement_2_a, newElement_2_b, newElement_2_c,
                               newElement_2_d, newElement_2_e, newElement_2_f, newElement_2_g, newElement_2_h);
            chip::JniReferences::GetInstance().AddToList(newElement_0_d, newElement_2);
        }
        jobject newElement_0_e;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_e);

        auto iter_newElement_0_e_2 = entry_0.e.begin();
        while (iter_newElement_0_e_2.Next())
        {
            auto & entry_2 = iter_newElement_0_e_2.GetValue();
            jobject newElement_2;
            std::string newElement_2ClassName     = "java/lang/Long";
            std::string newElement_2CtorSignature = "(J)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
                newElement_2ClassName.c_str(), newElement_2CtorSignature.c_str(), entry_2, newElement_2);
            chip::JniReferences::GetInstance().AddToList(newElement_0_e, newElement_2);
        }
        jobject newElement_0_f;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_f);

        auto iter_newElement_0_f_2 = entry_0.f.begin();
        while (iter_newElement_0_f_2.Next())
        {
            auto & entry_2 = iter_newElement_0_f_2.GetValue();
            jobject newElement_2;
            jbyteArray newElement_2ByteArray = env->NewByteArray(static_cast<jsize>(entry_2.size()));
            env->SetByteArrayRegion(newElement_2ByteArray, 0, static_cast<jsize>(entry_2.size()),
                                    reinterpret_cast<const jbyte *>(entry_2.data()));
            newElement_2 = newElement_2ByteArray;
            chip::JniReferences::GetInstance().AddToList(newElement_0_f, newElement_2);
        }
        jobject newElement_0_g;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_g);

        auto iter_newElement_0_g_2 = entry_0.g.begin();
        while (iter_newElement_0_g_2.Next())
        {
            auto & entry_2 = iter_newElement_0_g_2.GetValue();
            jobject newElement_2;
            std::string newElement_2ClassName     = "java/lang/Integer";
            std::string newElement_2CtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_2ClassName.c_str(),
                                                                          newElement_2CtorSignature.c_str(), entry_2, newElement_2);
            chip::JniReferences::GetInstance().AddToList(newElement_0_g, newElement_2);
        }

        jclass nestedStructListStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterNestedStructList", nestedStructListStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterNestedStructList");
            return;
        }
        jmethodID nestedStructListStructCtor_1 = env->GetMethodID(
            nestedStructListStructClass_1, "<init>",
            "(Ljava/lang/Integer;Ljava/lang/Boolean;Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;Ljava/util/"
            "ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V");
        if (nestedStructListStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterNestedStructList constructor");
            return;
        }

        newElement_0 = env->NewObject(nestedStructListStructClass_1, nestedStructListStructCtor_1, newElement_0_a, newElement_0_b,
                                      newElement_0_c, newElement_0_d, newElement_0_e, newElement_0_f, newElement_0_g);
        chip::JniReferences::GetInstance().AddToList(arg1, newElement_0);
    }
    jobject arg2;
    chip::JniReferences::GetInstance().CreateArrayList(arg2);

    auto iter_arg2_0 = dataResponse.arg2.begin();
    while (iter_arg2_0.Next())
    {
        auto & entry_0 = iter_arg2_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_a;
        std::string newElement_0_aClassName     = "java/lang/Integer";
        std::string newElement_0_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_aClassName.c_str(), newElement_0_aCtorSignature.c_str(), entry_0.a, newElement_0_a);
        jobject newElement_0_b;
        std::string newElement_0_bClassName     = "java/lang/Boolean";
        std::string newElement_0_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_0_bClassName.c_str(),
                                                                   newElement_0_bCtorSignature.c_str(), entry_0.b, newElement_0_b);
        jobject newElement_0_c;
        std::string newElement_0_cClassName     = "java/lang/Integer";
        std::string newElement_0_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_cClassName.c_str(), newElement_0_cCtorSignature.c_str(), static_cast<uint8_t>(entry_0.c), newElement_0_c);
        jobject newElement_0_d;
        jbyteArray newElement_0_dByteArray = env->NewByteArray(static_cast<jsize>(entry_0.d.size()));
        env->SetByteArrayRegion(newElement_0_dByteArray, 0, static_cast<jsize>(entry_0.d.size()),
                                reinterpret_cast<const jbyte *>(entry_0.d.data()));
        newElement_0_d = newElement_0_dByteArray;
        jobject newElement_0_e;
        newElement_0_e = env->NewStringUTF(std::string(entry_0.e.data(), entry_0.e.size()).c_str());
        jobject newElement_0_f;
        std::string newElement_0_fClassName     = "java/lang/Integer";
        std::string newElement_0_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_fClassName.c_str(), newElement_0_fCtorSignature.c_str(), entry_0.f.Raw(), newElement_0_f);
        jobject newElement_0_g;
        std::string newElement_0_gClassName     = "java/lang/Float";
        std::string newElement_0_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(newElement_0_gClassName.c_str(),
                                                                    newElement_0_gCtorSignature.c_str(), entry_0.g, newElement_0_g);
        jobject newElement_0_h;
        std::string newElement_0_hClassName     = "java/lang/Double";
        std::string newElement_0_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            newElement_0_hClassName.c_str(), newElement_0_hCtorSignature.c_str(), entry_0.h, newElement_0_h);

        jclass simpleStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_1 =
            env->GetMethodID(simpleStructStructClass_1, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        newElement_0 =
            env->NewObject(simpleStructStructClass_1, simpleStructStructCtor_1, newElement_0_a, newElement_0_b, newElement_0_c,
                           newElement_0_d, newElement_0_e, newElement_0_f, newElement_0_g, newElement_0_h);
        chip::JniReferences::GetInstance().AddToList(arg2, newElement_0);
    }
    jobject arg3;
    chip::JniReferences::GetInstance().CreateArrayList(arg3);

    auto iter_arg3_0 = dataResponse.arg3.begin();
    while (iter_arg3_0.Next())
    {
        auto & entry_0 = iter_arg3_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0ClassName.c_str(), newElement_0CtorSignature.c_str(), static_cast<uint8_t>(entry_0), newElement_0);
        chip::JniReferences::GetInstance().AddToList(arg3, newElement_0);
    }
    jobject arg4;
    chip::JniReferences::GetInstance().CreateArrayList(arg4);

    auto iter_arg4_0 = dataResponse.arg4.begin();
    while (iter_arg4_0.Next())
    {
        auto & entry_0 = iter_arg4_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Boolean";
        std::string newElement_0CtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_0ClassName.c_str(), newElement_0CtorSignature.c_str(),
                                                                   entry_0, newElement_0);
        chip::JniReferences::GetInstance().AddToList(arg4, newElement_0);
    }
    jobject arg5;
    std::string arg5ClassName     = "java/lang/Integer";
    std::string arg5CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg5ClassName.c_str(), arg5CtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg5), arg5);
    jobject arg6;
    std::string arg6ClassName     = "java/lang/Boolean";
    std::string arg6CtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg6ClassName.c_str(), arg6CtorSignature.c_str(), dataResponse.arg6,
                                                               arg6);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1, arg2, arg3, arg4, arg5, arg6);
}
CHIPUnitTestingClusterTestStructArgumentRequestCallback::CHIPUnitTestingClusterTestStructArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestStructArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestStructArgumentRequestCallback::~CHIPUnitTestingClusterTestStructArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestStructArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestStructArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestStructArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestStructArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestStructArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestStructArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    jobject arg1_a;
    std::string arg1_aClassName     = "java/lang/Integer";
    std::string arg1_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_aClassName.c_str(), arg1_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.a, arg1_a);
    jobject arg1_b;
    std::string arg1_bClassName     = "java/lang/Boolean";
    std::string arg1_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_bClassName.c_str(), arg1_bCtorSignature.c_str(),
                                                               dataResponse.arg1.b, arg1_b);
    jobject arg1_c;
    std::string arg1_cClassName     = "java/lang/Integer";
    std::string arg1_cCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_cClassName.c_str(), arg1_cCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg1.c), arg1_c);
    jobject arg1_d;
    jbyteArray arg1_dByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.arg1.d.size()));
    env->SetByteArrayRegion(arg1_dByteArray, 0, static_cast<jsize>(dataResponse.arg1.d.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.arg1.d.data()));
    arg1_d = arg1_dByteArray;
    jobject arg1_e;
    arg1_e = env->NewStringUTF(std::string(dataResponse.arg1.e.data(), dataResponse.arg1.e.size()).c_str());
    jobject arg1_f;
    std::string arg1_fClassName     = "java/lang/Integer";
    std::string arg1_fCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_fClassName.c_str(), arg1_fCtorSignature.c_str(),
                                                                  dataResponse.arg1.f.Raw(), arg1_f);
    jobject arg1_g;
    std::string arg1_gClassName     = "java/lang/Float";
    std::string arg1_gCtorSignature = "(F)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<float>(arg1_gClassName.c_str(), arg1_gCtorSignature.c_str(),
                                                                dataResponse.arg1.g, arg1_g);
    jobject arg1_h;
    std::string arg1_hClassName     = "java/lang/Double";
    std::string arg1_hCtorSignature = "(D)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<double>(arg1_hClassName.c_str(), arg1_hCtorSignature.c_str(),
                                                                 dataResponse.arg1.h, arg1_h);

    jclass simpleStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct",
                                                         simpleStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
        return;
    }
    jmethodID simpleStructStructCtor_0 = env->GetMethodID(simpleStructStructClass_0, "<init>",
                                                          "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/"
                                                          "String;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
    if (simpleStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
        return;
    }

    arg1 = env->NewObject(simpleStructStructClass_0, simpleStructStructCtor_0, arg1_a, arg1_b, arg1_c, arg1_d, arg1_e, arg1_f,
                          arg1_g, arg1_h);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback::CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestNestedStructArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback::~CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestNestedStructArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestNestedStructArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$UnitTestingClusterNestedStruct;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    jobject arg1_a;
    std::string arg1_aClassName     = "java/lang/Integer";
    std::string arg1_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_aClassName.c_str(), arg1_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.a, arg1_a);
    jobject arg1_b;
    std::string arg1_bClassName     = "java/lang/Boolean";
    std::string arg1_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_bClassName.c_str(), arg1_bCtorSignature.c_str(),
                                                               dataResponse.arg1.b, arg1_b);
    jobject arg1_c;
    jobject arg1_c_a;
    std::string arg1_c_aClassName     = "java/lang/Integer";
    std::string arg1_c_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_aClassName.c_str(), arg1_c_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.c.a, arg1_c_a);
    jobject arg1_c_b;
    std::string arg1_c_bClassName     = "java/lang/Boolean";
    std::string arg1_c_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_c_bClassName.c_str(), arg1_c_bCtorSignature.c_str(),
                                                               dataResponse.arg1.c.b, arg1_c_b);
    jobject arg1_c_c;
    std::string arg1_c_cClassName     = "java/lang/Integer";
    std::string arg1_c_cCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_cClassName.c_str(), arg1_c_cCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg1.c.c), arg1_c_c);
    jobject arg1_c_d;
    jbyteArray arg1_c_dByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.arg1.c.d.size()));
    env->SetByteArrayRegion(arg1_c_dByteArray, 0, static_cast<jsize>(dataResponse.arg1.c.d.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.arg1.c.d.data()));
    arg1_c_d = arg1_c_dByteArray;
    jobject arg1_c_e;
    arg1_c_e = env->NewStringUTF(std::string(dataResponse.arg1.c.e.data(), dataResponse.arg1.c.e.size()).c_str());
    jobject arg1_c_f;
    std::string arg1_c_fClassName     = "java/lang/Integer";
    std::string arg1_c_fCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_fClassName.c_str(), arg1_c_fCtorSignature.c_str(),
                                                                  dataResponse.arg1.c.f.Raw(), arg1_c_f);
    jobject arg1_c_g;
    std::string arg1_c_gClassName     = "java/lang/Float";
    std::string arg1_c_gCtorSignature = "(F)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<float>(arg1_c_gClassName.c_str(), arg1_c_gCtorSignature.c_str(),
                                                                dataResponse.arg1.c.g, arg1_c_g);
    jobject arg1_c_h;
    std::string arg1_c_hClassName     = "java/lang/Double";
    std::string arg1_c_hCtorSignature = "(D)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<double>(arg1_c_hClassName.c_str(), arg1_c_hCtorSignature.c_str(),
                                                                 dataResponse.arg1.c.h, arg1_c_h);

    jclass simpleStructStructClass_1;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct",
                                                         simpleStructStructClass_1);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
        return;
    }
    jmethodID simpleStructStructCtor_1 = env->GetMethodID(simpleStructStructClass_1, "<init>",
                                                          "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/"
                                                          "String;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
    if (simpleStructStructCtor_1 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
        return;
    }

    arg1_c = env->NewObject(simpleStructStructClass_1, simpleStructStructCtor_1, arg1_c_a, arg1_c_b, arg1_c_c, arg1_c_d, arg1_c_e,
                            arg1_c_f, arg1_c_g, arg1_c_h);

    jclass nestedStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$UnitTestingClusterNestedStruct",
                                                         nestedStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterNestedStruct");
        return;
    }
    jmethodID nestedStructStructCtor_0 = env->GetMethodID(
        nestedStructStructClass_0, "<init>",
        "(Ljava/lang/Integer;Ljava/lang/Boolean;Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;)V");
    if (nestedStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterNestedStruct constructor");
        return;
    }

    arg1 = env->NewObject(nestedStructStructClass_0, nestedStructStructCtor_0, arg1_a, arg1_b, arg1_c);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestListStructArgumentRequestCallback::CHIPUnitTestingClusterTestListStructArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestListStructArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestListStructArgumentRequestCallback::~CHIPUnitTestingClusterTestListStructArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestListStructArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestListStructArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestListStructArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestListStructArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestListStructArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestListStructArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    chip::JniReferences::GetInstance().CreateArrayList(arg1);

    auto iter_arg1_0 = dataResponse.arg1.begin();
    while (iter_arg1_0.Next())
    {
        auto & entry_0 = iter_arg1_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_a;
        std::string newElement_0_aClassName     = "java/lang/Integer";
        std::string newElement_0_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_aClassName.c_str(), newElement_0_aCtorSignature.c_str(), entry_0.a, newElement_0_a);
        jobject newElement_0_b;
        std::string newElement_0_bClassName     = "java/lang/Boolean";
        std::string newElement_0_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_0_bClassName.c_str(),
                                                                   newElement_0_bCtorSignature.c_str(), entry_0.b, newElement_0_b);
        jobject newElement_0_c;
        std::string newElement_0_cClassName     = "java/lang/Integer";
        std::string newElement_0_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_cClassName.c_str(), newElement_0_cCtorSignature.c_str(), static_cast<uint8_t>(entry_0.c), newElement_0_c);
        jobject newElement_0_d;
        jbyteArray newElement_0_dByteArray = env->NewByteArray(static_cast<jsize>(entry_0.d.size()));
        env->SetByteArrayRegion(newElement_0_dByteArray, 0, static_cast<jsize>(entry_0.d.size()),
                                reinterpret_cast<const jbyte *>(entry_0.d.data()));
        newElement_0_d = newElement_0_dByteArray;
        jobject newElement_0_e;
        newElement_0_e = env->NewStringUTF(std::string(entry_0.e.data(), entry_0.e.size()).c_str());
        jobject newElement_0_f;
        std::string newElement_0_fClassName     = "java/lang/Integer";
        std::string newElement_0_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_fClassName.c_str(), newElement_0_fCtorSignature.c_str(), entry_0.f.Raw(), newElement_0_f);
        jobject newElement_0_g;
        std::string newElement_0_gClassName     = "java/lang/Float";
        std::string newElement_0_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(newElement_0_gClassName.c_str(),
                                                                    newElement_0_gCtorSignature.c_str(), entry_0.g, newElement_0_g);
        jobject newElement_0_h;
        std::string newElement_0_hClassName     = "java/lang/Double";
        std::string newElement_0_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            newElement_0_hClassName.c_str(), newElement_0_hCtorSignature.c_str(), entry_0.h, newElement_0_h);

        jclass simpleStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_1 =
            env->GetMethodID(simpleStructStructClass_1, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        newElement_0 =
            env->NewObject(simpleStructStructClass_1, simpleStructStructCtor_1, newElement_0_a, newElement_0_b, newElement_0_c,
                           newElement_0_d, newElement_0_e, newElement_0_f, newElement_0_g, newElement_0_h);
        chip::JniReferences::GetInstance().AddToList(arg1, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback::CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestListInt8UArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback::~CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestListInt8UArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestListInt8UArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    chip::JniReferences::GetInstance().CreateArrayList(arg1);

    auto iter_arg1_0 = dataResponse.arg1.begin();
    while (iter_arg1_0.Next())
    {
        auto & entry_0 = iter_arg1_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_0ClassName.c_str(),
                                                                      newElement_0CtorSignature.c_str(), entry_0, newElement_0);
        chip::JniReferences::GetInstance().AddToList(arg1, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback::
    CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback::
    ~CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::UnitTesting::Commands::TestNestedStructListArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestNestedStructListArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Lchip/devicecontroller/ChipStructs$UnitTestingClusterNestedStructList;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    jobject arg1_a;
    std::string arg1_aClassName     = "java/lang/Integer";
    std::string arg1_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_aClassName.c_str(), arg1_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.a, arg1_a);
    jobject arg1_b;
    std::string arg1_bClassName     = "java/lang/Boolean";
    std::string arg1_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_bClassName.c_str(), arg1_bCtorSignature.c_str(),
                                                               dataResponse.arg1.b, arg1_b);
    jobject arg1_c;
    jobject arg1_c_a;
    std::string arg1_c_aClassName     = "java/lang/Integer";
    std::string arg1_c_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_aClassName.c_str(), arg1_c_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.c.a, arg1_c_a);
    jobject arg1_c_b;
    std::string arg1_c_bClassName     = "java/lang/Boolean";
    std::string arg1_c_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_c_bClassName.c_str(), arg1_c_bCtorSignature.c_str(),
                                                               dataResponse.arg1.c.b, arg1_c_b);
    jobject arg1_c_c;
    std::string arg1_c_cClassName     = "java/lang/Integer";
    std::string arg1_c_cCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_cClassName.c_str(), arg1_c_cCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg1.c.c), arg1_c_c);
    jobject arg1_c_d;
    jbyteArray arg1_c_dByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.arg1.c.d.size()));
    env->SetByteArrayRegion(arg1_c_dByteArray, 0, static_cast<jsize>(dataResponse.arg1.c.d.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.arg1.c.d.data()));
    arg1_c_d = arg1_c_dByteArray;
    jobject arg1_c_e;
    arg1_c_e = env->NewStringUTF(std::string(dataResponse.arg1.c.e.data(), dataResponse.arg1.c.e.size()).c_str());
    jobject arg1_c_f;
    std::string arg1_c_fClassName     = "java/lang/Integer";
    std::string arg1_c_fCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_c_fClassName.c_str(), arg1_c_fCtorSignature.c_str(),
                                                                  dataResponse.arg1.c.f.Raw(), arg1_c_f);
    jobject arg1_c_g;
    std::string arg1_c_gClassName     = "java/lang/Float";
    std::string arg1_c_gCtorSignature = "(F)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<float>(arg1_c_gClassName.c_str(), arg1_c_gCtorSignature.c_str(),
                                                                dataResponse.arg1.c.g, arg1_c_g);
    jobject arg1_c_h;
    std::string arg1_c_hClassName     = "java/lang/Double";
    std::string arg1_c_hCtorSignature = "(D)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<double>(arg1_c_hClassName.c_str(), arg1_c_hCtorSignature.c_str(),
                                                                 dataResponse.arg1.c.h, arg1_c_h);

    jclass simpleStructStructClass_1;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct",
                                                         simpleStructStructClass_1);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
        return;
    }
    jmethodID simpleStructStructCtor_1 = env->GetMethodID(simpleStructStructClass_1, "<init>",
                                                          "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/"
                                                          "String;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
    if (simpleStructStructCtor_1 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
        return;
    }

    arg1_c = env->NewObject(simpleStructStructClass_1, simpleStructStructCtor_1, arg1_c_a, arg1_c_b, arg1_c_c, arg1_c_d, arg1_c_e,
                            arg1_c_f, arg1_c_g, arg1_c_h);
    jobject arg1_d;
    chip::JniReferences::GetInstance().CreateArrayList(arg1_d);

    auto iter_arg1_d_1 = dataResponse.arg1.d.begin();
    while (iter_arg1_d_1.Next())
    {
        auto & entry_1 = iter_arg1_d_1.GetValue();
        jobject newElement_1;
        jobject newElement_1_a;
        std::string newElement_1_aClassName     = "java/lang/Integer";
        std::string newElement_1_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_1_aClassName.c_str(), newElement_1_aCtorSignature.c_str(), entry_1.a, newElement_1_a);
        jobject newElement_1_b;
        std::string newElement_1_bClassName     = "java/lang/Boolean";
        std::string newElement_1_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_1_bClassName.c_str(),
                                                                   newElement_1_bCtorSignature.c_str(), entry_1.b, newElement_1_b);
        jobject newElement_1_c;
        std::string newElement_1_cClassName     = "java/lang/Integer";
        std::string newElement_1_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_1_cClassName.c_str(), newElement_1_cCtorSignature.c_str(), static_cast<uint8_t>(entry_1.c), newElement_1_c);
        jobject newElement_1_d;
        jbyteArray newElement_1_dByteArray = env->NewByteArray(static_cast<jsize>(entry_1.d.size()));
        env->SetByteArrayRegion(newElement_1_dByteArray, 0, static_cast<jsize>(entry_1.d.size()),
                                reinterpret_cast<const jbyte *>(entry_1.d.data()));
        newElement_1_d = newElement_1_dByteArray;
        jobject newElement_1_e;
        newElement_1_e = env->NewStringUTF(std::string(entry_1.e.data(), entry_1.e.size()).c_str());
        jobject newElement_1_f;
        std::string newElement_1_fClassName     = "java/lang/Integer";
        std::string newElement_1_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_1_fClassName.c_str(), newElement_1_fCtorSignature.c_str(), entry_1.f.Raw(), newElement_1_f);
        jobject newElement_1_g;
        std::string newElement_1_gClassName     = "java/lang/Float";
        std::string newElement_1_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(newElement_1_gClassName.c_str(),
                                                                    newElement_1_gCtorSignature.c_str(), entry_1.g, newElement_1_g);
        jobject newElement_1_h;
        std::string newElement_1_hClassName     = "java/lang/Double";
        std::string newElement_1_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            newElement_1_hClassName.c_str(), newElement_1_hCtorSignature.c_str(), entry_1.h, newElement_1_h);

        jclass simpleStructStructClass_2;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_2 =
            env->GetMethodID(simpleStructStructClass_2, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_2 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        newElement_1 =
            env->NewObject(simpleStructStructClass_2, simpleStructStructCtor_2, newElement_1_a, newElement_1_b, newElement_1_c,
                           newElement_1_d, newElement_1_e, newElement_1_f, newElement_1_g, newElement_1_h);
        chip::JniReferences::GetInstance().AddToList(arg1_d, newElement_1);
    }
    jobject arg1_e;
    chip::JniReferences::GetInstance().CreateArrayList(arg1_e);

    auto iter_arg1_e_1 = dataResponse.arg1.e.begin();
    while (iter_arg1_e_1.Next())
    {
        auto & entry_1 = iter_arg1_e_1.GetValue();
        jobject newElement_1;
        std::string newElement_1ClassName     = "java/lang/Long";
        std::string newElement_1CtorSignature = "(J)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(newElement_1ClassName.c_str(),
                                                                       newElement_1CtorSignature.c_str(), entry_1, newElement_1);
        chip::JniReferences::GetInstance().AddToList(arg1_e, newElement_1);
    }
    jobject arg1_f;
    chip::JniReferences::GetInstance().CreateArrayList(arg1_f);

    auto iter_arg1_f_1 = dataResponse.arg1.f.begin();
    while (iter_arg1_f_1.Next())
    {
        auto & entry_1 = iter_arg1_f_1.GetValue();
        jobject newElement_1;
        jbyteArray newElement_1ByteArray = env->NewByteArray(static_cast<jsize>(entry_1.size()));
        env->SetByteArrayRegion(newElement_1ByteArray, 0, static_cast<jsize>(entry_1.size()),
                                reinterpret_cast<const jbyte *>(entry_1.data()));
        newElement_1 = newElement_1ByteArray;
        chip::JniReferences::GetInstance().AddToList(arg1_f, newElement_1);
    }
    jobject arg1_g;
    chip::JniReferences::GetInstance().CreateArrayList(arg1_g);

    auto iter_arg1_g_1 = dataResponse.arg1.g.begin();
    while (iter_arg1_g_1.Next())
    {
        auto & entry_1 = iter_arg1_g_1.GetValue();
        jobject newElement_1;
        std::string newElement_1ClassName     = "java/lang/Integer";
        std::string newElement_1CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_1ClassName.c_str(),
                                                                      newElement_1CtorSignature.c_str(), entry_1, newElement_1);
        chip::JniReferences::GetInstance().AddToList(arg1_g, newElement_1);
    }

    jclass nestedStructListStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(
        env, "chip/devicecontroller/ChipStructs$UnitTestingClusterNestedStructList", nestedStructListStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterNestedStructList");
        return;
    }
    jmethodID nestedStructListStructCtor_0 = env->GetMethodID(
        nestedStructListStructClass_0, "<init>",
        "(Ljava/lang/Integer;Ljava/lang/Boolean;Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;Ljava/util/"
        "ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V");
    if (nestedStructListStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterNestedStructList constructor");
        return;
    }

    arg1 = env->NewObject(nestedStructListStructClass_0, nestedStructListStructCtor_0, arg1_a, arg1_b, arg1_c, arg1_d, arg1_e,
                          arg1_f, arg1_g);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback::
    CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback::
    ~CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::UnitTesting::Commands::TestListNestedStructListArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestListNestedStructListArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    chip::JniReferences::GetInstance().CreateArrayList(arg1);

    auto iter_arg1_0 = dataResponse.arg1.begin();
    while (iter_arg1_0.Next())
    {
        auto & entry_0 = iter_arg1_0.GetValue();
        jobject newElement_0;
        jobject newElement_0_a;
        std::string newElement_0_aClassName     = "java/lang/Integer";
        std::string newElement_0_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_aClassName.c_str(), newElement_0_aCtorSignature.c_str(), entry_0.a, newElement_0_a);
        jobject newElement_0_b;
        std::string newElement_0_bClassName     = "java/lang/Boolean";
        std::string newElement_0_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(newElement_0_bClassName.c_str(),
                                                                   newElement_0_bCtorSignature.c_str(), entry_0.b, newElement_0_b);
        jobject newElement_0_c;
        jobject newElement_0_c_a;
        std::string newElement_0_c_aClassName     = "java/lang/Integer";
        std::string newElement_0_c_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_c_aClassName.c_str(), newElement_0_c_aCtorSignature.c_str(), entry_0.c.a, newElement_0_c_a);
        jobject newElement_0_c_b;
        std::string newElement_0_c_bClassName     = "java/lang/Boolean";
        std::string newElement_0_c_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
            newElement_0_c_bClassName.c_str(), newElement_0_c_bCtorSignature.c_str(), entry_0.c.b, newElement_0_c_b);
        jobject newElement_0_c_c;
        std::string newElement_0_c_cClassName     = "java/lang/Integer";
        std::string newElement_0_c_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_0_c_cClassName.c_str(),
                                                                      newElement_0_c_cCtorSignature.c_str(),
                                                                      static_cast<uint8_t>(entry_0.c.c), newElement_0_c_c);
        jobject newElement_0_c_d;
        jbyteArray newElement_0_c_dByteArray = env->NewByteArray(static_cast<jsize>(entry_0.c.d.size()));
        env->SetByteArrayRegion(newElement_0_c_dByteArray, 0, static_cast<jsize>(entry_0.c.d.size()),
                                reinterpret_cast<const jbyte *>(entry_0.c.d.data()));
        newElement_0_c_d = newElement_0_c_dByteArray;
        jobject newElement_0_c_e;
        newElement_0_c_e = env->NewStringUTF(std::string(entry_0.c.e.data(), entry_0.c.e.size()).c_str());
        jobject newElement_0_c_f;
        std::string newElement_0_c_fClassName     = "java/lang/Integer";
        std::string newElement_0_c_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            newElement_0_c_fClassName.c_str(), newElement_0_c_fCtorSignature.c_str(), entry_0.c.f.Raw(), newElement_0_c_f);
        jobject newElement_0_c_g;
        std::string newElement_0_c_gClassName     = "java/lang/Float";
        std::string newElement_0_c_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(
            newElement_0_c_gClassName.c_str(), newElement_0_c_gCtorSignature.c_str(), entry_0.c.g, newElement_0_c_g);
        jobject newElement_0_c_h;
        std::string newElement_0_c_hClassName     = "java/lang/Double";
        std::string newElement_0_c_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            newElement_0_c_hClassName.c_str(), newElement_0_c_hCtorSignature.c_str(), entry_0.c.h, newElement_0_c_h);

        jclass simpleStructStructClass_2;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_2 =
            env->GetMethodID(simpleStructStructClass_2, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_2 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        newElement_0_c = env->NewObject(simpleStructStructClass_2, simpleStructStructCtor_2, newElement_0_c_a, newElement_0_c_b,
                                        newElement_0_c_c, newElement_0_c_d, newElement_0_c_e, newElement_0_c_f, newElement_0_c_g,
                                        newElement_0_c_h);
        jobject newElement_0_d;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_d);

        auto iter_newElement_0_d_2 = entry_0.d.begin();
        while (iter_newElement_0_d_2.Next())
        {
            auto & entry_2 = iter_newElement_0_d_2.GetValue();
            jobject newElement_2;
            jobject newElement_2_a;
            std::string newElement_2_aClassName     = "java/lang/Integer";
            std::string newElement_2_aCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_2_aClassName.c_str(), newElement_2_aCtorSignature.c_str(), entry_2.a, newElement_2_a);
            jobject newElement_2_b;
            std::string newElement_2_bClassName     = "java/lang/Boolean";
            std::string newElement_2_bCtorSignature = "(Z)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
                newElement_2_bClassName.c_str(), newElement_2_bCtorSignature.c_str(), entry_2.b, newElement_2_b);
            jobject newElement_2_c;
            std::string newElement_2_cClassName     = "java/lang/Integer";
            std::string newElement_2_cCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_2_cClassName.c_str(),
                                                                          newElement_2_cCtorSignature.c_str(),
                                                                          static_cast<uint8_t>(entry_2.c), newElement_2_c);
            jobject newElement_2_d;
            jbyteArray newElement_2_dByteArray = env->NewByteArray(static_cast<jsize>(entry_2.d.size()));
            env->SetByteArrayRegion(newElement_2_dByteArray, 0, static_cast<jsize>(entry_2.d.size()),
                                    reinterpret_cast<const jbyte *>(entry_2.d.data()));
            newElement_2_d = newElement_2_dByteArray;
            jobject newElement_2_e;
            newElement_2_e = env->NewStringUTF(std::string(entry_2.e.data(), entry_2.e.size()).c_str());
            jobject newElement_2_f;
            std::string newElement_2_fClassName     = "java/lang/Integer";
            std::string newElement_2_fCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_2_fClassName.c_str(), newElement_2_fCtorSignature.c_str(), entry_2.f.Raw(), newElement_2_f);
            jobject newElement_2_g;
            std::string newElement_2_gClassName     = "java/lang/Float";
            std::string newElement_2_gCtorSignature = "(F)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<float>(
                newElement_2_gClassName.c_str(), newElement_2_gCtorSignature.c_str(), entry_2.g, newElement_2_g);
            jobject newElement_2_h;
            std::string newElement_2_hClassName     = "java/lang/Double";
            std::string newElement_2_hCtorSignature = "(D)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                newElement_2_hClassName.c_str(), newElement_2_hCtorSignature.c_str(), entry_2.h, newElement_2_h);

            jclass simpleStructStructClass_3;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_3);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
                return;
            }
            jmethodID simpleStructStructCtor_3 =
                env->GetMethodID(simpleStructStructClass_3, "<init>",
                                 "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                                 "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
            if (simpleStructStructCtor_3 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
                return;
            }

            newElement_2 =
                env->NewObject(simpleStructStructClass_3, simpleStructStructCtor_3, newElement_2_a, newElement_2_b, newElement_2_c,
                               newElement_2_d, newElement_2_e, newElement_2_f, newElement_2_g, newElement_2_h);
            chip::JniReferences::GetInstance().AddToList(newElement_0_d, newElement_2);
        }
        jobject newElement_0_e;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_e);

        auto iter_newElement_0_e_2 = entry_0.e.begin();
        while (iter_newElement_0_e_2.Next())
        {
            auto & entry_2 = iter_newElement_0_e_2.GetValue();
            jobject newElement_2;
            std::string newElement_2ClassName     = "java/lang/Long";
            std::string newElement_2CtorSignature = "(J)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint32_t>(
                newElement_2ClassName.c_str(), newElement_2CtorSignature.c_str(), entry_2, newElement_2);
            chip::JniReferences::GetInstance().AddToList(newElement_0_e, newElement_2);
        }
        jobject newElement_0_f;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_f);

        auto iter_newElement_0_f_2 = entry_0.f.begin();
        while (iter_newElement_0_f_2.Next())
        {
            auto & entry_2 = iter_newElement_0_f_2.GetValue();
            jobject newElement_2;
            jbyteArray newElement_2ByteArray = env->NewByteArray(static_cast<jsize>(entry_2.size()));
            env->SetByteArrayRegion(newElement_2ByteArray, 0, static_cast<jsize>(entry_2.size()),
                                    reinterpret_cast<const jbyte *>(entry_2.data()));
            newElement_2 = newElement_2ByteArray;
            chip::JniReferences::GetInstance().AddToList(newElement_0_f, newElement_2);
        }
        jobject newElement_0_g;
        chip::JniReferences::GetInstance().CreateArrayList(newElement_0_g);

        auto iter_newElement_0_g_2 = entry_0.g.begin();
        while (iter_newElement_0_g_2.Next())
        {
            auto & entry_2 = iter_newElement_0_g_2.GetValue();
            jobject newElement_2;
            std::string newElement_2ClassName     = "java/lang/Integer";
            std::string newElement_2CtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_2ClassName.c_str(),
                                                                          newElement_2CtorSignature.c_str(), entry_2, newElement_2);
            chip::JniReferences::GetInstance().AddToList(newElement_0_g, newElement_2);
        }

        jclass nestedStructListStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterNestedStructList", nestedStructListStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterNestedStructList");
            return;
        }
        jmethodID nestedStructListStructCtor_1 = env->GetMethodID(
            nestedStructListStructClass_1, "<init>",
            "(Ljava/lang/Integer;Ljava/lang/Boolean;Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;Ljava/util/"
            "ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V");
        if (nestedStructListStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterNestedStructList constructor");
            return;
        }

        newElement_0 = env->NewObject(nestedStructListStructClass_1, nestedStructListStructCtor_1, newElement_0_a, newElement_0_b,
                                      newElement_0_c, newElement_0_d, newElement_0_e, newElement_0_f, newElement_0_g);
        chip::JniReferences::GetInstance().AddToList(arg1, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestListInt8UReverseRequestCallback::CHIPUnitTestingClusterTestListInt8UReverseRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestListInt8UReverseRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestListInt8UReverseRequestCallback::~CHIPUnitTestingClusterTestListInt8UReverseRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestListInt8UReverseRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestListInt8UReverseRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestListInt8UReverseRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestListInt8UReverseRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestListInt8UReverseRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestListInt8UReverseRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/ArrayList;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    chip::JniReferences::GetInstance().CreateArrayList(arg1);

    auto iter_arg1_0 = dataResponse.arg1.begin();
    while (iter_arg1_0.Next())
    {
        auto & entry_0 = iter_arg1_0.GetValue();
        jobject newElement_0;
        std::string newElement_0ClassName     = "java/lang/Integer";
        std::string newElement_0CtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(newElement_0ClassName.c_str(),
                                                                      newElement_0CtorSignature.c_str(), entry_0, newElement_0);
        chip::JniReferences::GetInstance().AddToList(arg1, newElement_0);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestEnumsRequestCallback::CHIPUnitTestingClusterTestEnumsRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestEnumsRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestEnumsRequestCallback::~CHIPUnitTestingClusterTestEnumsRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestEnumsRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestEnumsRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestEnumsRequestCallback, void (*)(CHIPUnitTestingClusterTestEnumsRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestEnumsRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestEnumsRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;Ljava/lang/Integer;)V",
                                                  &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    std::string arg1ClassName     = "java/lang/Integer";
    std::string arg1CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(arg1ClassName.c_str(), arg1CtorSignature.c_str(),
                                                                   static_cast<uint16_t>(dataResponse.arg1), arg1);
    jobject arg2;
    std::string arg2ClassName     = "java/lang/Integer";
    std::string arg2CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg2ClassName.c_str(), arg2CtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg2), arg2);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1, arg2);
}
CHIPUnitTestingClusterTestNullableOptionalRequestCallback::CHIPUnitTestingClusterTestNullableOptionalRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestNullableOptionalRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestNullableOptionalRequestCallback::~CHIPUnitTestingClusterTestNullableOptionalRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestNullableOptionalRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestNullableOptionalRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestNullableOptionalRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestNullableOptionalRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestNullableOptionalRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestNullableOptionalRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    if (!dataResponse.arg1.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, arg1);
    }
    else
    {
        jobject arg1InsideOptional;
        if (dataResponse.arg1.Value().IsNull())
        {
            arg1InsideOptional = nullptr;
        }
        else
        {
            std::string arg1InsideOptionalClassName     = "java/lang/Integer";
            std::string arg1InsideOptionalCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1InsideOptionalClassName.c_str(),
                                                                          arg1InsideOptionalCtorSignature.c_str(),
                                                                          dataResponse.arg1.Value().Value(), arg1InsideOptional);
        }
        chip::JniReferences::GetInstance().CreateOptional(arg1InsideOptional, arg1);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback::CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback::
    ~CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::UnitTesting::Commands::TestComplexNullableOptionalRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestComplexNullableOptionalRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess",
        "(Ljava/lang/Integer;Ljava/util/Optional;Ljava/util/Optional;Ljava/lang/String;Ljava/util/Optional;Ljava/util/"
        "Optional;Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;Ljava/util/Optional;Ljava/util/Optional;Ljava/"
        "util/ArrayList;Ljava/util/Optional;Ljava/util/Optional;)V",
        &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject NullableInt;
    if (dataResponse.nullableInt.IsNull())
    {
        NullableInt = nullptr;
    }
    else
    {
        std::string NullableIntClassName     = "java/lang/Integer";
        std::string NullableIntCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
            NullableIntClassName.c_str(), NullableIntCtorSignature.c_str(), dataResponse.nullableInt.Value(), NullableInt);
    }
    jobject OptionalInt;
    if (!dataResponse.optionalInt.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, OptionalInt);
    }
    else
    {
        jobject OptionalIntInsideOptional;
        std::string OptionalIntInsideOptionalClassName     = "java/lang/Integer";
        std::string OptionalIntInsideOptionalCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(OptionalIntInsideOptionalClassName.c_str(),
                                                                       OptionalIntInsideOptionalCtorSignature.c_str(),
                                                                       dataResponse.optionalInt.Value(), OptionalIntInsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(OptionalIntInsideOptional, OptionalInt);
    }
    jobject NullableOptionalInt;
    if (!dataResponse.nullableOptionalInt.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, NullableOptionalInt);
    }
    else
    {
        jobject NullableOptionalIntInsideOptional;
        if (dataResponse.nullableOptionalInt.Value().IsNull())
        {
            NullableOptionalIntInsideOptional = nullptr;
        }
        else
        {
            std::string NullableOptionalIntInsideOptionalClassName     = "java/lang/Integer";
            std::string NullableOptionalIntInsideOptionalCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint16_t>(
                NullableOptionalIntInsideOptionalClassName.c_str(), NullableOptionalIntInsideOptionalCtorSignature.c_str(),
                dataResponse.nullableOptionalInt.Value().Value(), NullableOptionalIntInsideOptional);
        }
        chip::JniReferences::GetInstance().CreateOptional(NullableOptionalIntInsideOptional, NullableOptionalInt);
    }
    jobject NullableString;
    if (dataResponse.nullableString.IsNull())
    {
        NullableString = nullptr;
    }
    else
    {
        NullableString = env->NewStringUTF(
            std::string(dataResponse.nullableString.Value().data(), dataResponse.nullableString.Value().size()).c_str());
    }
    jobject OptionalString;
    if (!dataResponse.optionalString.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, OptionalString);
    }
    else
    {
        jobject OptionalStringInsideOptional;
        OptionalStringInsideOptional = env->NewStringUTF(
            std::string(dataResponse.optionalString.Value().data(), dataResponse.optionalString.Value().size()).c_str());
        chip::JniReferences::GetInstance().CreateOptional(OptionalStringInsideOptional, OptionalString);
    }
    jobject NullableOptionalString;
    if (!dataResponse.nullableOptionalString.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, NullableOptionalString);
    }
    else
    {
        jobject NullableOptionalStringInsideOptional;
        if (dataResponse.nullableOptionalString.Value().IsNull())
        {
            NullableOptionalStringInsideOptional = nullptr;
        }
        else
        {
            NullableOptionalStringInsideOptional =
                env->NewStringUTF(std::string(dataResponse.nullableOptionalString.Value().Value().data(),
                                              dataResponse.nullableOptionalString.Value().Value().size())
                                      .c_str());
        }
        chip::JniReferences::GetInstance().CreateOptional(NullableOptionalStringInsideOptional, NullableOptionalString);
    }
    jobject NullableStruct;
    if (dataResponse.nullableStruct.IsNull())
    {
        NullableStruct = nullptr;
    }
    else
    {
        jobject NullableStruct_a;
        std::string NullableStruct_aClassName     = "java/lang/Integer";
        std::string NullableStruct_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(NullableStruct_aClassName.c_str(),
                                                                      NullableStruct_aCtorSignature.c_str(),
                                                                      dataResponse.nullableStruct.Value().a, NullableStruct_a);
        jobject NullableStruct_b;
        std::string NullableStruct_bClassName     = "java/lang/Boolean";
        std::string NullableStruct_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(NullableStruct_bClassName.c_str(),
                                                                   NullableStruct_bCtorSignature.c_str(),
                                                                   dataResponse.nullableStruct.Value().b, NullableStruct_b);
        jobject NullableStruct_c;
        std::string NullableStruct_cClassName     = "java/lang/Integer";
        std::string NullableStruct_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            NullableStruct_cClassName.c_str(), NullableStruct_cCtorSignature.c_str(),
            static_cast<uint8_t>(dataResponse.nullableStruct.Value().c), NullableStruct_c);
        jobject NullableStruct_d;
        jbyteArray NullableStruct_dByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.nullableStruct.Value().d.size()));
        env->SetByteArrayRegion(NullableStruct_dByteArray, 0, static_cast<jsize>(dataResponse.nullableStruct.Value().d.size()),
                                reinterpret_cast<const jbyte *>(dataResponse.nullableStruct.Value().d.data()));
        NullableStruct_d = NullableStruct_dByteArray;
        jobject NullableStruct_e;
        NullableStruct_e = env->NewStringUTF(
            std::string(dataResponse.nullableStruct.Value().e.data(), dataResponse.nullableStruct.Value().e.size()).c_str());
        jobject NullableStruct_f;
        std::string NullableStruct_fClassName     = "java/lang/Integer";
        std::string NullableStruct_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            NullableStruct_fClassName.c_str(), NullableStruct_fCtorSignature.c_str(), dataResponse.nullableStruct.Value().f.Raw(),
            NullableStruct_f);
        jobject NullableStruct_g;
        std::string NullableStruct_gClassName     = "java/lang/Float";
        std::string NullableStruct_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(NullableStruct_gClassName.c_str(),
                                                                    NullableStruct_gCtorSignature.c_str(),
                                                                    dataResponse.nullableStruct.Value().g, NullableStruct_g);
        jobject NullableStruct_h;
        std::string NullableStruct_hClassName     = "java/lang/Double";
        std::string NullableStruct_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(NullableStruct_hClassName.c_str(),
                                                                     NullableStruct_hCtorSignature.c_str(),
                                                                     dataResponse.nullableStruct.Value().h, NullableStruct_h);

        jclass simpleStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_1 =
            env->GetMethodID(simpleStructStructClass_1, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        NullableStruct = env->NewObject(simpleStructStructClass_1, simpleStructStructCtor_1, NullableStruct_a, NullableStruct_b,
                                        NullableStruct_c, NullableStruct_d, NullableStruct_e, NullableStruct_f, NullableStruct_g,
                                        NullableStruct_h);
    }
    jobject OptionalStruct;
    if (!dataResponse.optionalStruct.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, OptionalStruct);
    }
    else
    {
        jobject OptionalStructInsideOptional;
        jobject OptionalStructInsideOptional_a;
        std::string OptionalStructInsideOptional_aClassName     = "java/lang/Integer";
        std::string OptionalStructInsideOptional_aCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            OptionalStructInsideOptional_aClassName.c_str(), OptionalStructInsideOptional_aCtorSignature.c_str(),
            dataResponse.optionalStruct.Value().a, OptionalStructInsideOptional_a);
        jobject OptionalStructInsideOptional_b;
        std::string OptionalStructInsideOptional_bClassName     = "java/lang/Boolean";
        std::string OptionalStructInsideOptional_bCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(
            OptionalStructInsideOptional_bClassName.c_str(), OptionalStructInsideOptional_bCtorSignature.c_str(),
            dataResponse.optionalStruct.Value().b, OptionalStructInsideOptional_b);
        jobject OptionalStructInsideOptional_c;
        std::string OptionalStructInsideOptional_cClassName     = "java/lang/Integer";
        std::string OptionalStructInsideOptional_cCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            OptionalStructInsideOptional_cClassName.c_str(), OptionalStructInsideOptional_cCtorSignature.c_str(),
            static_cast<uint8_t>(dataResponse.optionalStruct.Value().c), OptionalStructInsideOptional_c);
        jobject OptionalStructInsideOptional_d;
        jbyteArray OptionalStructInsideOptional_dByteArray =
            env->NewByteArray(static_cast<jsize>(dataResponse.optionalStruct.Value().d.size()));
        env->SetByteArrayRegion(OptionalStructInsideOptional_dByteArray, 0,
                                static_cast<jsize>(dataResponse.optionalStruct.Value().d.size()),
                                reinterpret_cast<const jbyte *>(dataResponse.optionalStruct.Value().d.data()));
        OptionalStructInsideOptional_d = OptionalStructInsideOptional_dByteArray;
        jobject OptionalStructInsideOptional_e;
        OptionalStructInsideOptional_e = env->NewStringUTF(
            std::string(dataResponse.optionalStruct.Value().e.data(), dataResponse.optionalStruct.Value().e.size()).c_str());
        jobject OptionalStructInsideOptional_f;
        std::string OptionalStructInsideOptional_fClassName     = "java/lang/Integer";
        std::string OptionalStructInsideOptional_fCtorSignature = "(I)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
            OptionalStructInsideOptional_fClassName.c_str(), OptionalStructInsideOptional_fCtorSignature.c_str(),
            dataResponse.optionalStruct.Value().f.Raw(), OptionalStructInsideOptional_f);
        jobject OptionalStructInsideOptional_g;
        std::string OptionalStructInsideOptional_gClassName     = "java/lang/Float";
        std::string OptionalStructInsideOptional_gCtorSignature = "(F)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<float>(
            OptionalStructInsideOptional_gClassName.c_str(), OptionalStructInsideOptional_gCtorSignature.c_str(),
            dataResponse.optionalStruct.Value().g, OptionalStructInsideOptional_g);
        jobject OptionalStructInsideOptional_h;
        std::string OptionalStructInsideOptional_hClassName     = "java/lang/Double";
        std::string OptionalStructInsideOptional_hCtorSignature = "(D)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<double>(
            OptionalStructInsideOptional_hClassName.c_str(), OptionalStructInsideOptional_hCtorSignature.c_str(),
            dataResponse.optionalStruct.Value().h, OptionalStructInsideOptional_h);

        jclass simpleStructStructClass_1;
        err = chip::JniReferences::GetInstance().GetClassRef(
            env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
            return;
        }
        jmethodID simpleStructStructCtor_1 =
            env->GetMethodID(simpleStructStructClass_1, "<init>",
                             "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                             "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
        if (simpleStructStructCtor_1 == nullptr)
        {
            ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
            return;
        }

        OptionalStructInsideOptional = env->NewObject(
            simpleStructStructClass_1, simpleStructStructCtor_1, OptionalStructInsideOptional_a, OptionalStructInsideOptional_b,
            OptionalStructInsideOptional_c, OptionalStructInsideOptional_d, OptionalStructInsideOptional_e,
            OptionalStructInsideOptional_f, OptionalStructInsideOptional_g, OptionalStructInsideOptional_h);
        chip::JniReferences::GetInstance().CreateOptional(OptionalStructInsideOptional, OptionalStruct);
    }
    jobject NullableOptionalStruct;
    if (!dataResponse.nullableOptionalStruct.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, NullableOptionalStruct);
    }
    else
    {
        jobject NullableOptionalStructInsideOptional;
        if (dataResponse.nullableOptionalStruct.Value().IsNull())
        {
            NullableOptionalStructInsideOptional = nullptr;
        }
        else
        {
            jobject NullableOptionalStructInsideOptional_a;
            std::string NullableOptionalStructInsideOptional_aClassName     = "java/lang/Integer";
            std::string NullableOptionalStructInsideOptional_aCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                NullableOptionalStructInsideOptional_aClassName.c_str(),
                NullableOptionalStructInsideOptional_aCtorSignature.c_str(), dataResponse.nullableOptionalStruct.Value().Value().a,
                NullableOptionalStructInsideOptional_a);
            jobject NullableOptionalStructInsideOptional_b;
            std::string NullableOptionalStructInsideOptional_bClassName     = "java/lang/Boolean";
            std::string NullableOptionalStructInsideOptional_bCtorSignature = "(Z)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<bool>(NullableOptionalStructInsideOptional_bClassName.c_str(),
                                                                       NullableOptionalStructInsideOptional_bCtorSignature.c_str(),
                                                                       dataResponse.nullableOptionalStruct.Value().Value().b,
                                                                       NullableOptionalStructInsideOptional_b);
            jobject NullableOptionalStructInsideOptional_c;
            std::string NullableOptionalStructInsideOptional_cClassName     = "java/lang/Integer";
            std::string NullableOptionalStructInsideOptional_cCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                NullableOptionalStructInsideOptional_cClassName.c_str(),
                NullableOptionalStructInsideOptional_cCtorSignature.c_str(),
                static_cast<uint8_t>(dataResponse.nullableOptionalStruct.Value().Value().c),
                NullableOptionalStructInsideOptional_c);
            jobject NullableOptionalStructInsideOptional_d;
            jbyteArray NullableOptionalStructInsideOptional_dByteArray =
                env->NewByteArray(static_cast<jsize>(dataResponse.nullableOptionalStruct.Value().Value().d.size()));
            env->SetByteArrayRegion(NullableOptionalStructInsideOptional_dByteArray, 0,
                                    static_cast<jsize>(dataResponse.nullableOptionalStruct.Value().Value().d.size()),
                                    reinterpret_cast<const jbyte *>(dataResponse.nullableOptionalStruct.Value().Value().d.data()));
            NullableOptionalStructInsideOptional_d = NullableOptionalStructInsideOptional_dByteArray;
            jobject NullableOptionalStructInsideOptional_e;
            NullableOptionalStructInsideOptional_e =
                env->NewStringUTF(std::string(dataResponse.nullableOptionalStruct.Value().Value().e.data(),
                                              dataResponse.nullableOptionalStruct.Value().Value().e.size())
                                      .c_str());
            jobject NullableOptionalStructInsideOptional_f;
            std::string NullableOptionalStructInsideOptional_fClassName     = "java/lang/Integer";
            std::string NullableOptionalStructInsideOptional_fCtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                NullableOptionalStructInsideOptional_fClassName.c_str(),
                NullableOptionalStructInsideOptional_fCtorSignature.c_str(),
                dataResponse.nullableOptionalStruct.Value().Value().f.Raw(), NullableOptionalStructInsideOptional_f);
            jobject NullableOptionalStructInsideOptional_g;
            std::string NullableOptionalStructInsideOptional_gClassName     = "java/lang/Float";
            std::string NullableOptionalStructInsideOptional_gCtorSignature = "(F)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<float>(NullableOptionalStructInsideOptional_gClassName.c_str(),
                                                                        NullableOptionalStructInsideOptional_gCtorSignature.c_str(),
                                                                        dataResponse.nullableOptionalStruct.Value().Value().g,
                                                                        NullableOptionalStructInsideOptional_g);
            jobject NullableOptionalStructInsideOptional_h;
            std::string NullableOptionalStructInsideOptional_hClassName     = "java/lang/Double";
            std::string NullableOptionalStructInsideOptional_hCtorSignature = "(D)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<double>(
                NullableOptionalStructInsideOptional_hClassName.c_str(),
                NullableOptionalStructInsideOptional_hCtorSignature.c_str(), dataResponse.nullableOptionalStruct.Value().Value().h,
                NullableOptionalStructInsideOptional_h);

            jclass simpleStructStructClass_2;
            err = chip::JniReferences::GetInstance().GetClassRef(
                env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct", simpleStructStructClass_2);
            if (err != CHIP_NO_ERROR)
            {
                ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
                return;
            }
            jmethodID simpleStructStructCtor_2 =
                env->GetMethodID(simpleStructStructClass_2, "<init>",
                                 "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/String;Ljava/lang/"
                                 "Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
            if (simpleStructStructCtor_2 == nullptr)
            {
                ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
                return;
            }

            NullableOptionalStructInsideOptional =
                env->NewObject(simpleStructStructClass_2, simpleStructStructCtor_2, NullableOptionalStructInsideOptional_a,
                               NullableOptionalStructInsideOptional_b, NullableOptionalStructInsideOptional_c,
                               NullableOptionalStructInsideOptional_d, NullableOptionalStructInsideOptional_e,
                               NullableOptionalStructInsideOptional_f, NullableOptionalStructInsideOptional_g,
                               NullableOptionalStructInsideOptional_h);
        }
        chip::JniReferences::GetInstance().CreateOptional(NullableOptionalStructInsideOptional, NullableOptionalStruct);
    }
    jobject NullableList;
    if (dataResponse.nullableList.IsNull())
    {
        NullableList = nullptr;
    }
    else
    {
        chip::JniReferences::GetInstance().CreateArrayList(NullableList);

        auto iter_NullableList_1 = dataResponse.nullableList.Value().begin();
        while (iter_NullableList_1.Next())
        {
            auto & entry_1 = iter_NullableList_1.GetValue();
            jobject newElement_1;
            std::string newElement_1ClassName     = "java/lang/Integer";
            std::string newElement_1CtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_1ClassName.c_str(), newElement_1CtorSignature.c_str(), static_cast<uint8_t>(entry_1), newElement_1);
            chip::JniReferences::GetInstance().AddToList(NullableList, newElement_1);
        }
    }
    jobject OptionalList;
    if (!dataResponse.optionalList.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, OptionalList);
    }
    else
    {
        jobject OptionalListInsideOptional;
        chip::JniReferences::GetInstance().CreateArrayList(OptionalListInsideOptional);

        auto iter_OptionalListInsideOptional_1 = dataResponse.optionalList.Value().begin();
        while (iter_OptionalListInsideOptional_1.Next())
        {
            auto & entry_1 = iter_OptionalListInsideOptional_1.GetValue();
            jobject newElement_1;
            std::string newElement_1ClassName     = "java/lang/Integer";
            std::string newElement_1CtorSignature = "(I)V";
            chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                newElement_1ClassName.c_str(), newElement_1CtorSignature.c_str(), static_cast<uint8_t>(entry_1), newElement_1);
            chip::JniReferences::GetInstance().AddToList(OptionalListInsideOptional, newElement_1);
        }
        chip::JniReferences::GetInstance().CreateOptional(OptionalListInsideOptional, OptionalList);
    }
    jobject NullableOptionalList;
    if (!dataResponse.nullableOptionalList.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, NullableOptionalList);
    }
    else
    {
        jobject NullableOptionalListInsideOptional;
        if (dataResponse.nullableOptionalList.Value().IsNull())
        {
            NullableOptionalListInsideOptional = nullptr;
        }
        else
        {
            chip::JniReferences::GetInstance().CreateArrayList(NullableOptionalListInsideOptional);

            auto iter_NullableOptionalListInsideOptional_2 = dataResponse.nullableOptionalList.Value().Value().begin();
            while (iter_NullableOptionalListInsideOptional_2.Next())
            {
                auto & entry_2 = iter_NullableOptionalListInsideOptional_2.GetValue();
                jobject newElement_2;
                std::string newElement_2ClassName     = "java/lang/Integer";
                std::string newElement_2CtorSignature = "(I)V";
                chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(
                    newElement_2ClassName.c_str(), newElement_2CtorSignature.c_str(), static_cast<uint8_t>(entry_2), newElement_2);
                chip::JniReferences::GetInstance().AddToList(NullableOptionalListInsideOptional, newElement_2);
            }
        }
        chip::JniReferences::GetInstance().CreateOptional(NullableOptionalListInsideOptional, NullableOptionalList);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, NullableInt, OptionalInt, NullableOptionalInt, NullableString, OptionalString,
                        NullableOptionalString, NullableStruct, OptionalStruct, NullableOptionalStruct, NullableList, OptionalList,
                        NullableOptionalList);
}
CHIPUnitTestingClusterSimpleStructEchoRequestCallback::CHIPUnitTestingClusterSimpleStructEchoRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterSimpleStructEchoRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterSimpleStructEchoRequestCallback::~CHIPUnitTestingClusterSimpleStructEchoRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterSimpleStructEchoRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::SimpleStructEchoRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterSimpleStructEchoRequestCallback,
                    void (*)(CHIPUnitTestingClusterSimpleStructEchoRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterSimpleStructEchoRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterSimpleStructEchoRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(
        env, javaCallbackRef, "onSuccess", "(Lchip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    jobject arg1_a;
    std::string arg1_aClassName     = "java/lang/Integer";
    std::string arg1_aCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_aClassName.c_str(), arg1_aCtorSignature.c_str(),
                                                                  dataResponse.arg1.a, arg1_a);
    jobject arg1_b;
    std::string arg1_bClassName     = "java/lang/Boolean";
    std::string arg1_bCtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1_bClassName.c_str(), arg1_bCtorSignature.c_str(),
                                                               dataResponse.arg1.b, arg1_b);
    jobject arg1_c;
    std::string arg1_cClassName     = "java/lang/Integer";
    std::string arg1_cCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_cClassName.c_str(), arg1_cCtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg1.c), arg1_c);
    jobject arg1_d;
    jbyteArray arg1_dByteArray = env->NewByteArray(static_cast<jsize>(dataResponse.arg1.d.size()));
    env->SetByteArrayRegion(arg1_dByteArray, 0, static_cast<jsize>(dataResponse.arg1.d.size()),
                            reinterpret_cast<const jbyte *>(dataResponse.arg1.d.data()));
    arg1_d = arg1_dByteArray;
    jobject arg1_e;
    arg1_e = env->NewStringUTF(std::string(dataResponse.arg1.e.data(), dataResponse.arg1.e.size()).c_str());
    jobject arg1_f;
    std::string arg1_fClassName     = "java/lang/Integer";
    std::string arg1_fCtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1_fClassName.c_str(), arg1_fCtorSignature.c_str(),
                                                                  dataResponse.arg1.f.Raw(), arg1_f);
    jobject arg1_g;
    std::string arg1_gClassName     = "java/lang/Float";
    std::string arg1_gCtorSignature = "(F)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<float>(arg1_gClassName.c_str(), arg1_gCtorSignature.c_str(),
                                                                dataResponse.arg1.g, arg1_g);
    jobject arg1_h;
    std::string arg1_hClassName     = "java/lang/Double";
    std::string arg1_hCtorSignature = "(D)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<double>(arg1_hClassName.c_str(), arg1_hCtorSignature.c_str(),
                                                                 dataResponse.arg1.h, arg1_h);

    jclass simpleStructStructClass_0;
    err = chip::JniReferences::GetInstance().GetClassRef(env, "chip/devicecontroller/ChipStructs$UnitTestingClusterSimpleStruct",
                                                         simpleStructStructClass_0);
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(Zcl, "Could not find class ChipStructs$UnitTestingClusterSimpleStruct");
        return;
    }
    jmethodID simpleStructStructCtor_0 = env->GetMethodID(simpleStructStructClass_0, "<init>",
                                                          "(Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/lang/Integer;[BLjava/lang/"
                                                          "String;Ljava/lang/Integer;Ljava/lang/Float;Ljava/lang/Double;)V");
    if (simpleStructStructCtor_0 == nullptr)
    {
        ChipLogError(Zcl, "Could not find ChipStructs$UnitTestingClusterSimpleStruct constructor");
        return;
    }

    arg1 = env->NewObject(simpleStructStructClass_0, simpleStructStructCtor_0, arg1_a, arg1_b, arg1_c, arg1_d, arg1_e, arg1_f,
                          arg1_g, arg1_h);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTimedInvokeRequestCallback::CHIPUnitTestingClusterTimedInvokeRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTimedInvokeRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTimedInvokeRequestCallback::~CHIPUnitTestingClusterTimedInvokeRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTimedInvokeRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TimedInvokeRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTimedInvokeRequestCallback, void (*)(CHIPUnitTestingClusterTimedInvokeRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTimedInvokeRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTimedInvokeRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "()V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    env->CallVoidMethod(javaCallbackRef, javaMethod);
}
CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback::CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback::~CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::UnitTesting::Commands::TestSimpleOptionalArgumentRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestSimpleOptionalArgumentRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/util/Optional;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    if (!dataResponse.arg1.HasValue())
    {
        chip::JniReferences::GetInstance().CreateOptional(nullptr, arg1);
    }
    else
    {
        jobject arg1InsideOptional;
        std::string arg1InsideOptionalClassName     = "java/lang/Boolean";
        std::string arg1InsideOptionalCtorSignature = "(Z)V";
        chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg1InsideOptionalClassName.c_str(),
                                                                   arg1InsideOptionalCtorSignature.c_str(),
                                                                   dataResponse.arg1.Value(), arg1InsideOptional);
        chip::JniReferences::GetInstance().CreateOptional(arg1InsideOptional, arg1);
    }

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
CHIPUnitTestingClusterTestEmitTestEventRequestCallback::CHIPUnitTestingClusterTestEmitTestEventRequestCallback(
    jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestEmitTestEventRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestEmitTestEventRequestCallback::~CHIPUnitTestingClusterTestEmitTestEventRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestEmitTestEventRequestCallback::CallbackFn(
    void * context, const chip::app::Clusters::UnitTesting::Commands::TestEmitTestEventRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestEmitTestEventRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestEmitTestEventRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestEmitTestEventRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestEmitTestEventRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess",
                                                  "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Boolean;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    std::string arg1ClassName     = "java/lang/Integer";
    std::string arg1CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1ClassName.c_str(), arg1CtorSignature.c_str(),
                                                                  dataResponse.arg1, arg1);
    jobject arg2;
    std::string arg2ClassName     = "java/lang/Integer";
    std::string arg2CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg2ClassName.c_str(), arg2CtorSignature.c_str(),
                                                                  static_cast<uint8_t>(dataResponse.arg2), arg2);
    jobject arg3;
    std::string arg3ClassName     = "java/lang/Boolean";
    std::string arg3CtorSignature = "(Z)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<bool>(arg3ClassName.c_str(), arg3CtorSignature.c_str(), dataResponse.arg3,
                                                               arg3);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1, arg2, arg3);
}
CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback::
    CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback(jobject javaCallback) :
    Callback::Callback<CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallbackType>(CallbackFn, this)
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
        return;
    }

    javaCallbackRef = env->NewGlobalRef(javaCallback);
    if (javaCallbackRef == nullptr)
    {
        ChipLogError(Zcl, "Could not create global reference for Java callback");
    }
}

CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback::
    ~CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback()
{
    JNIEnv * env = JniReferences::GetInstance().GetEnvForCurrentThread();
    if (env == nullptr)
    {
        ChipLogError(Zcl, "Could not delete global reference for Java callback");
        return;
    }
    env->DeleteGlobalRef(javaCallbackRef);
};

void CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback::CallbackFn(
    void * context,
    const chip::app::Clusters::UnitTesting::Commands::TestEmitTestFabricScopedEventRequest::DecodableType & dataResponse)
{
    chip::DeviceLayer::StackUnlock unlock;
    CHIP_ERROR err = CHIP_NO_ERROR;
    JNIEnv * env   = JniReferences::GetInstance().GetEnvForCurrentThread();
    jobject javaCallbackRef;
    jmethodID javaMethod;

    VerifyOrReturn(env != nullptr, ChipLogError(Zcl, "Error invoking Java callback: no JNIEnv"));

    std::unique_ptr<CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback,
                    void (*)(CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback *)>
        cppCallback(reinterpret_cast<CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback *>(context),
                    chip::Platform::Delete<CHIPUnitTestingClusterTestEmitTestFabricScopedEventRequestCallback>);
    VerifyOrReturn(cppCallback != nullptr, ChipLogError(Zcl, "Error invoking Java callback: failed to cast native callback"));

    javaCallbackRef = cppCallback->javaCallbackRef;
    // Java callback is allowed to be null, exit early if this is the case.
    VerifyOrReturn(javaCallbackRef != nullptr);

    err = JniReferences::GetInstance().FindMethod(env, javaCallbackRef, "onSuccess", "(Ljava/lang/Integer;)V", &javaMethod);
    VerifyOrReturn(err == CHIP_NO_ERROR, ChipLogError(Zcl, "Error invoking Java callback: %s", ErrorStr(err)));

    jobject arg1;
    std::string arg1ClassName     = "java/lang/Integer";
    std::string arg1CtorSignature = "(I)V";
    chip::JniReferences::GetInstance().CreateBoxedObject<uint8_t>(arg1ClassName.c_str(), arg1CtorSignature.c_str(),
                                                                  dataResponse.arg1, arg1);

    env->CallVoidMethod(javaCallbackRef, javaMethod, arg1);
}
} // namespace chip
