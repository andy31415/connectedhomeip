/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.InteractionInfo;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterWriteMapping {
  public Map<String, Map<String, InteractionInfo>> getWriteAttributeMap() {
    Map<String, Map<String, InteractionInfo>> writeAttributeMap = new HashMap<>();
    Map<String, InteractionInfo> writeIdentifyInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeIdentifyIdentifyTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo identifyidentifyTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeIdentifyIdentifyTimeCommandParams.put("value", identifyidentifyTimeCommandParameterInfo);
    InteractionInfo writeIdentifyIdentifyTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .writeIdentifyTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeIdentifyIdentifyTimeCommandParams);
    writeIdentifyInteractionInfo.put(
        "writeIdentifyTimeAttribute", writeIdentifyIdentifyTimeAttributeInteractionInfo);
    writeAttributeMap.put("identify", writeIdentifyInteractionInfo);
    Map<String, InteractionInfo> writeGroupsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("groups", writeGroupsInteractionInfo);
    Map<String, InteractionInfo> writeScenesInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("scenes", writeScenesInteractionInfo);
    Map<String, InteractionInfo> writeOnOffInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeOnOffOnTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffonTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffOnTimeCommandParams.put("value", onOffonTimeCommandParameterInfo);
    InteractionInfo writeOnOffOnTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeOnTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffOnTimeCommandParams);
    writeOnOffInteractionInfo.put("writeOnTimeAttribute", writeOnOffOnTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeOnOffOffWaitTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffoffWaitTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffOffWaitTimeCommandParams.put("value", onOffoffWaitTimeCommandParameterInfo);
    InteractionInfo writeOnOffOffWaitTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeOffWaitTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffOffWaitTimeCommandParams);
    writeOnOffInteractionInfo.put(
        "writeOffWaitTimeAttribute", writeOnOffOffWaitTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeOnOffStartUpOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffstartUpOnOffCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffStartUpOnOffCommandParams.put("value", onOffstartUpOnOffCommandParameterInfo);
    InteractionInfo writeOnOffStartUpOnOffAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeStartUpOnOffAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffStartUpOnOffCommandParams);
    writeOnOffInteractionInfo.put(
        "writeStartUpOnOffAttribute", writeOnOffStartUpOnOffAttributeInteractionInfo);
    writeAttributeMap.put("onOff", writeOnOffInteractionInfo);
    Map<String, InteractionInfo> writeOnOffSwitchConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeOnOffSwitchConfigurationSwitchActionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffSwitchConfigurationswitchActionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffSwitchConfigurationSwitchActionsCommandParams.put(
        "value", onOffSwitchConfigurationswitchActionsCommandParameterInfo);
    InteractionInfo writeOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffSwitchConfigurationCluster) cluster)
                  .writeSwitchActionsAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffSwitchConfigurationSwitchActionsCommandParams);
    writeOnOffSwitchConfigurationInteractionInfo.put(
        "writeSwitchActionsAttribute",
        writeOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo);
    writeAttributeMap.put("onOffSwitchConfiguration", writeOnOffSwitchConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeLevelControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeLevelControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControloptionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOptionsCommandParams.put("value", levelControloptionsCommandParameterInfo);
    InteractionInfo writeLevelControlOptionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOptionsAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOptionsCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOptionsAttribute", writeLevelControlOptionsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonOffTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnOffTransitionTimeCommandParams.put(
        "value", levelControlonOffTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOnOffTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnOffTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnOffTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnOffTransitionTimeAttribute",
        writeLevelControlOnOffTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnLevelCommandParams.put("value", levelControlonLevelCommandParameterInfo);
    InteractionInfo writeLevelControlOnLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnLevelAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnLevelCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnLevelAttribute", writeLevelControlOnLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnTransitionTimeCommandParams.put(
        "value", levelControlonTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOnTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnTransitionTimeAttribute",
        writeLevelControlOnTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControloffTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOffTransitionTimeCommandParams.put(
        "value", levelControloffTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOffTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOffTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOffTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOffTransitionTimeAttribute",
        writeLevelControlOffTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlDefaultMoveRateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControldefaultMoveRateCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlDefaultMoveRateCommandParams.put(
        "value", levelControldefaultMoveRateCommandParameterInfo);
    InteractionInfo writeLevelControlDefaultMoveRateAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeDefaultMoveRateAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlDefaultMoveRateCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeDefaultMoveRateAttribute", writeLevelControlDefaultMoveRateAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlStartUpCurrentLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlstartUpCurrentLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlStartUpCurrentLevelCommandParams.put(
        "value", levelControlstartUpCurrentLevelCommandParameterInfo);
    InteractionInfo writeLevelControlStartUpCurrentLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeStartUpCurrentLevelAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlStartUpCurrentLevelCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeStartUpCurrentLevelAttribute",
        writeLevelControlStartUpCurrentLevelAttributeInteractionInfo);
    writeAttributeMap.put("levelControl", writeLevelControlInteractionInfo);
    Map<String, InteractionInfo> writeBinaryInputBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBinaryInputBasicOutOfServiceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicoutOfServiceCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBinaryInputBasicOutOfServiceCommandParams.put(
        "value", binaryInputBasicoutOfServiceCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicOutOfServiceAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeOutOfServiceAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicOutOfServiceCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeOutOfServiceAttribute", writeBinaryInputBasicOutOfServiceAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicPresentValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicpresentValueCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBinaryInputBasicPresentValueCommandParams.put(
        "value", binaryInputBasicpresentValueCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicPresentValueAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writePresentValueAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicPresentValueCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writePresentValueAttribute", writeBinaryInputBasicPresentValueAttributeInteractionInfo);
    writeAttributeMap.put("binaryInputBasic", writeBinaryInputBasicInteractionInfo);
    Map<String, InteractionInfo> writeDescriptorInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("descriptor", writeDescriptorInteractionInfo);
    Map<String, InteractionInfo> writeBindingInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("binding", writeBindingInteractionInfo);
    Map<String, InteractionInfo> writeAccessControlInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("accessControl", writeAccessControlInteractionInfo);
    Map<String, InteractionInfo> writeActionsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("actions", writeActionsInteractionInfo);
    Map<String, InteractionInfo> writeBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBasicNodeLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basicnodeLabelCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicNodeLabelCommandParams.put("value", basicnodeLabelCommandParameterInfo);
    InteractionInfo writeBasicNodeLabelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeNodeLabelAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicNodeLabelCommandParams);
    writeBasicInteractionInfo.put(
        "writeNodeLabelAttribute", writeBasicNodeLabelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicLocationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basiclocationCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicLocationCommandParams.put("value", basiclocationCommandParameterInfo);
    InteractionInfo writeBasicLocationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeLocationAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicLocationCommandParams);
    writeBasicInteractionInfo.put(
        "writeLocationAttribute", writeBasicLocationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicLocalConfigDisabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basiclocalConfigDisabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBasicLocalConfigDisabledCommandParams.put(
        "value", basiclocalConfigDisabledCommandParameterInfo);
    InteractionInfo writeBasicLocalConfigDisabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeLocalConfigDisabledAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicLocalConfigDisabledCommandParams);
    writeBasicInteractionInfo.put(
        "writeLocalConfigDisabledAttribute", writeBasicLocalConfigDisabledAttributeInteractionInfo);
    writeAttributeMap.put("basic", writeBasicInteractionInfo);
    Map<String, InteractionInfo> writeOtaSoftwareUpdateProviderInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "otaSoftwareUpdateProvider", writeOtaSoftwareUpdateProviderInteractionInfo);
    Map<String, InteractionInfo> writeOtaSoftwareUpdateRequestorInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "otaSoftwareUpdateRequestor", writeOtaSoftwareUpdateRequestorInteractionInfo);
    Map<String, InteractionInfo> writeLocalizationConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeLocalizationConfigurationActiveLocaleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo localizationConfigurationactiveLocaleCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeLocalizationConfigurationActiveLocaleCommandParams.put(
        "value", localizationConfigurationactiveLocaleCommandParameterInfo);
    InteractionInfo writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LocalizationConfigurationCluster) cluster)
                  .writeActiveLocaleAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLocalizationConfigurationActiveLocaleCommandParams);
    writeLocalizationConfigurationInteractionInfo.put(
        "writeActiveLocaleAttribute",
        writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo);
    writeAttributeMap.put(
        "localizationConfiguration", writeLocalizationConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeTimeFormatLocalizationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeTimeFormatLocalizationHourFormatCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo timeFormatLocalizationhourFormatCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTimeFormatLocalizationHourFormatCommandParams.put(
        "value", timeFormatLocalizationhourFormatCommandParameterInfo);
    InteractionInfo writeTimeFormatLocalizationHourFormatAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TimeFormatLocalizationCluster) cluster)
                  .writeHourFormatAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTimeFormatLocalizationHourFormatCommandParams);
    writeTimeFormatLocalizationInteractionInfo.put(
        "writeHourFormatAttribute", writeTimeFormatLocalizationHourFormatAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTimeFormatLocalizationActiveCalendarTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo timeFormatLocalizationactiveCalendarTypeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTimeFormatLocalizationActiveCalendarTypeCommandParams.put(
        "value", timeFormatLocalizationactiveCalendarTypeCommandParameterInfo);
    InteractionInfo writeTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TimeFormatLocalizationCluster) cluster)
                  .writeActiveCalendarTypeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTimeFormatLocalizationActiveCalendarTypeCommandParams);
    writeTimeFormatLocalizationInteractionInfo.put(
        "writeActiveCalendarTypeAttribute",
        writeTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo);
    writeAttributeMap.put("timeFormatLocalization", writeTimeFormatLocalizationInteractionInfo);
    Map<String, InteractionInfo> writeUnitLocalizationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeUnitLocalizationTemperatureUnitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo unitLocalizationtemperatureUnitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeUnitLocalizationTemperatureUnitCommandParams.put(
        "value", unitLocalizationtemperatureUnitCommandParameterInfo);
    InteractionInfo writeUnitLocalizationTemperatureUnitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.UnitLocalizationCluster) cluster)
                  .writeTemperatureUnitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeUnitLocalizationTemperatureUnitCommandParams);
    writeUnitLocalizationInteractionInfo.put(
        "writeTemperatureUnitAttribute",
        writeUnitLocalizationTemperatureUnitAttributeInteractionInfo);
    writeAttributeMap.put("unitLocalization", writeUnitLocalizationInteractionInfo);
    Map<String, InteractionInfo> writePowerSourceConfigurationInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put("powerSourceConfiguration", writePowerSourceConfigurationInteractionInfo);
    Map<String, InteractionInfo> writePowerSourceInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("powerSource", writePowerSourceInteractionInfo);
    Map<String, InteractionInfo> writeGeneralCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeGeneralCommissioningBreadcrumbCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo generalCommissioningbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeGeneralCommissioningBreadcrumbCommandParams.put(
        "value", generalCommissioningbreadcrumbCommandParameterInfo);
    InteractionInfo writeGeneralCommissioningBreadcrumbAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .writeBreadcrumbAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeGeneralCommissioningBreadcrumbCommandParams);
    writeGeneralCommissioningInteractionInfo.put(
        "writeBreadcrumbAttribute", writeGeneralCommissioningBreadcrumbAttributeInteractionInfo);
    writeAttributeMap.put("generalCommissioning", writeGeneralCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeNetworkCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeNetworkCommissioningInterfaceEnabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioninginterfaceEnabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeNetworkCommissioningInterfaceEnabledCommandParams.put(
        "value", networkCommissioninginterfaceEnabledCommandParameterInfo);
    InteractionInfo writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .writeInterfaceEnabledAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeNetworkCommissioningInterfaceEnabledCommandParams);
    writeNetworkCommissioningInteractionInfo.put(
        "writeInterfaceEnabledAttribute",
        writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo);
    writeAttributeMap.put("networkCommissioning", writeNetworkCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeDiagnosticLogsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("diagnosticLogs", writeDiagnosticLogsInteractionInfo);
    Map<String, InteractionInfo> writeGeneralDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("generalDiagnostics", writeGeneralDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeSoftwareDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("softwareDiagnostics", writeSoftwareDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeThreadNetworkDiagnosticsInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put("threadNetworkDiagnostics", writeThreadNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeWiFiNetworkDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("wiFiNetworkDiagnostics", writeWiFiNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeEthernetNetworkDiagnosticsInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "ethernetNetworkDiagnostics", writeEthernetNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeBridgedDeviceBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBridgedDeviceBasicNodeLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedDeviceBasicnodeLabelCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBridgedDeviceBasicNodeLabelCommandParams.put(
        "value", bridgedDeviceBasicnodeLabelCommandParameterInfo);
    InteractionInfo writeBridgedDeviceBasicNodeLabelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .writeNodeLabelAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBridgedDeviceBasicNodeLabelCommandParams);
    writeBridgedDeviceBasicInteractionInfo.put(
        "writeNodeLabelAttribute", writeBridgedDeviceBasicNodeLabelAttributeInteractionInfo);
    writeAttributeMap.put("bridgedDeviceBasic", writeBridgedDeviceBasicInteractionInfo);
    Map<String, InteractionInfo> writeSwitchInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("switch", writeSwitchInteractionInfo);
    Map<String, InteractionInfo> writeAdministratorCommissioningInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "administratorCommissioning", writeAdministratorCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeOperationalCredentialsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("operationalCredentials", writeOperationalCredentialsInteractionInfo);
    Map<String, InteractionInfo> writeGroupKeyManagementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("groupKeyManagement", writeGroupKeyManagementInteractionInfo);
    Map<String, InteractionInfo> writeFixedLabelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("fixedLabel", writeFixedLabelInteractionInfo);
    Map<String, InteractionInfo> writeUserLabelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("userLabel", writeUserLabelInteractionInfo);
    Map<String, InteractionInfo> writeBooleanStateInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("booleanState", writeBooleanStateInteractionInfo);
    Map<String, InteractionInfo> writeModeSelectInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeModeSelectStartUpModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo modeSelectstartUpModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeModeSelectStartUpModeCommandParams.put("value", modeSelectstartUpModeCommandParameterInfo);
    InteractionInfo writeModeSelectStartUpModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .writeStartUpModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeModeSelectStartUpModeCommandParams);
    writeModeSelectInteractionInfo.put(
        "writeStartUpModeAttribute", writeModeSelectStartUpModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeModeSelectOnModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo modeSelectonModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeModeSelectOnModeCommandParams.put("value", modeSelectonModeCommandParameterInfo);
    InteractionInfo writeModeSelectOnModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .writeOnModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeModeSelectOnModeCommandParams);
    writeModeSelectInteractionInfo.put(
        "writeOnModeAttribute", writeModeSelectOnModeAttributeInteractionInfo);
    writeAttributeMap.put("modeSelect", writeModeSelectInteractionInfo);
    Map<String, InteractionInfo> writeDoorLockInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeDoorLockLanguageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocklanguageCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeDoorLockLanguageCommandParams.put("value", doorLocklanguageCommandParameterInfo);
    InteractionInfo writeDoorLockLanguageAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeLanguageAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockLanguageCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeLanguageAttribute", writeDoorLockLanguageAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockAutoRelockTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockautoRelockTimeCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeDoorLockAutoRelockTimeCommandParams.put(
        "value", doorLockautoRelockTimeCommandParameterInfo);
    InteractionInfo writeDoorLockAutoRelockTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeAutoRelockTimeAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockAutoRelockTimeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeAutoRelockTimeAttribute", writeDoorLockAutoRelockTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockSoundVolumeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksoundVolumeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockSoundVolumeCommandParams.put("value", doorLocksoundVolumeCommandParameterInfo);
    InteractionInfo writeDoorLockSoundVolumeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeSoundVolumeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockSoundVolumeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeSoundVolumeAttribute", writeDoorLockSoundVolumeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockOperatingModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockoperatingModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockOperatingModeCommandParams.put("value", doorLockoperatingModeCommandParameterInfo);
    InteractionInfo writeDoorLockOperatingModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeOperatingModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockOperatingModeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeOperatingModeAttribute", writeDoorLockOperatingModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnableOneTouchLockingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenableOneTouchLockingCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnableOneTouchLockingCommandParams.put(
        "value", doorLockenableOneTouchLockingCommandParameterInfo);
    InteractionInfo writeDoorLockEnableOneTouchLockingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnableOneTouchLockingAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnableOneTouchLockingCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnableOneTouchLockingAttribute",
        writeDoorLockEnableOneTouchLockingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnablePrivacyModeButtonCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenablePrivacyModeButtonCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnablePrivacyModeButtonCommandParams.put(
        "value", doorLockenablePrivacyModeButtonCommandParameterInfo);
    InteractionInfo writeDoorLockEnablePrivacyModeButtonAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnablePrivacyModeButtonAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnablePrivacyModeButtonCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnablePrivacyModeButtonAttribute",
        writeDoorLockEnablePrivacyModeButtonAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockWrongCodeEntryLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockwrongCodeEntryLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockWrongCodeEntryLimitCommandParams.put(
        "value", doorLockwrongCodeEntryLimitCommandParameterInfo);
    InteractionInfo writeDoorLockWrongCodeEntryLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeWrongCodeEntryLimitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockWrongCodeEntryLimitCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeWrongCodeEntryLimitAttribute",
        writeDoorLockWrongCodeEntryLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockUserCodeTemporaryDisableTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockuserCodeTemporaryDisableTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockUserCodeTemporaryDisableTimeCommandParams.put(
        "value", doorLockuserCodeTemporaryDisableTimeCommandParameterInfo);
    InteractionInfo writeDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeUserCodeTemporaryDisableTimeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockUserCodeTemporaryDisableTimeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeUserCodeTemporaryDisableTimeAttribute",
        writeDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockRequirePINforRemoteOperationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockrequirePINforRemoteOperationCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockRequirePINforRemoteOperationCommandParams.put(
        "value", doorLockrequirePINforRemoteOperationCommandParameterInfo);
    InteractionInfo writeDoorLockRequirePINforRemoteOperationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeRequirePINforRemoteOperationAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockRequirePINforRemoteOperationCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeRequirePINforRemoteOperationAttribute",
        writeDoorLockRequirePINforRemoteOperationAttributeInteractionInfo);
    writeAttributeMap.put("doorLock", writeDoorLockInteractionInfo);
    Map<String, InteractionInfo> writeWindowCoveringInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeWindowCoveringModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringmodeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeWindowCoveringModeCommandParams.put("value", windowCoveringmodeCommandParameterInfo);
    InteractionInfo writeWindowCoveringModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .writeModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeWindowCoveringModeCommandParams);
    writeWindowCoveringInteractionInfo.put(
        "writeModeAttribute", writeWindowCoveringModeAttributeInteractionInfo);
    writeAttributeMap.put("windowCovering", writeWindowCoveringInteractionInfo);
    Map<String, InteractionInfo> writeBarrierControlInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("barrierControl", writeBarrierControlInteractionInfo);
    Map<String, InteractionInfo> writePumpConfigurationAndControlInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writePumpConfigurationAndControlLifetimeRunningHoursCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControllifetimeRunningHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writePumpConfigurationAndControlLifetimeRunningHoursCommandParams.put(
        "value", pumpConfigurationAndControllifetimeRunningHoursCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeLifetimeRunningHoursAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlLifetimeRunningHoursCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeLifetimeRunningHoursAttribute",
        writePumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControllifetimeEnergyConsumedCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams.put(
        "value", pumpConfigurationAndControllifetimeEnergyConsumedCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeLifetimeEnergyConsumedAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeLifetimeEnergyConsumedAttribute",
        writePumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writePumpConfigurationAndControlOperationModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControloperationModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writePumpConfigurationAndControlOperationModeCommandParams.put(
        "value", pumpConfigurationAndControloperationModeCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlOperationModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeOperationModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlOperationModeCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeOperationModeAttribute",
        writePumpConfigurationAndControlOperationModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writePumpConfigurationAndControlControlModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControlcontrolModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writePumpConfigurationAndControlControlModeCommandParams.put(
        "value", pumpConfigurationAndControlcontrolModeCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlControlModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeControlModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlControlModeCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeControlModeAttribute",
        writePumpConfigurationAndControlControlModeAttributeInteractionInfo);
    writeAttributeMap.put(
        "pumpConfigurationAndControl", writePumpConfigurationAndControlInteractionInfo);
    Map<String, InteractionInfo> writeThermostatInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeThermostatOccupiedCoolingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatoccupiedCoolingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatOccupiedCoolingSetpointCommandParams.put(
        "value", thermostatoccupiedCoolingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatOccupiedCoolingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeOccupiedCoolingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatOccupiedCoolingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeOccupiedCoolingSetpointAttribute",
        writeThermostatOccupiedCoolingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatOccupiedHeatingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatoccupiedHeatingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatOccupiedHeatingSetpointCommandParams.put(
        "value", thermostatoccupiedHeatingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatOccupiedHeatingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeOccupiedHeatingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatOccupiedHeatingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeOccupiedHeatingSetpointAttribute",
        writeThermostatOccupiedHeatingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminHeatSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinHeatSetpointLimitCommandParams.put(
        "value", thermostatminHeatSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMinHeatSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinHeatSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinHeatSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinHeatSetpointLimitAttribute",
        writeThermostatMinHeatSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMaxHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatmaxHeatSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMaxHeatSetpointLimitCommandParams.put(
        "value", thermostatmaxHeatSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMaxHeatSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMaxHeatSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMaxHeatSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMaxHeatSetpointLimitAttribute",
        writeThermostatMaxHeatSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminCoolSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinCoolSetpointLimitCommandParams.put(
        "value", thermostatminCoolSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMinCoolSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinCoolSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinCoolSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinCoolSetpointLimitAttribute",
        writeThermostatMinCoolSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMaxCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatmaxCoolSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMaxCoolSetpointLimitCommandParams.put(
        "value", thermostatmaxCoolSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMaxCoolSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMaxCoolSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMaxCoolSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMaxCoolSetpointLimitAttribute",
        writeThermostatMaxCoolSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinSetpointDeadBandCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminSetpointDeadBandCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinSetpointDeadBandCommandParams.put(
        "value", thermostatminSetpointDeadBandCommandParameterInfo);
    InteractionInfo writeThermostatMinSetpointDeadBandAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinSetpointDeadBandAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinSetpointDeadBandCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinSetpointDeadBandAttribute",
        writeThermostatMinSetpointDeadBandAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatControlSequenceOfOperationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatcontrolSequenceOfOperationCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatControlSequenceOfOperationCommandParams.put(
        "value", thermostatcontrolSequenceOfOperationCommandParameterInfo);
    InteractionInfo writeThermostatControlSequenceOfOperationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeControlSequenceOfOperationAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatControlSequenceOfOperationCommandParams);
    writeThermostatInteractionInfo.put(
        "writeControlSequenceOfOperationAttribute",
        writeThermostatControlSequenceOfOperationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatSystemModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatsystemModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatSystemModeCommandParams.put("value", thermostatsystemModeCommandParameterInfo);
    InteractionInfo writeThermostatSystemModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeSystemModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatSystemModeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeSystemModeAttribute", writeThermostatSystemModeAttributeInteractionInfo);
    writeAttributeMap.put("thermostat", writeThermostatInteractionInfo);
    Map<String, InteractionInfo> writeFanControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeFanControlFanModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlfanModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlFanModeCommandParams.put("value", fanControlfanModeCommandParameterInfo);
    InteractionInfo writeFanControlFanModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeFanModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlFanModeCommandParams);
    writeFanControlInteractionInfo.put(
        "writeFanModeAttribute", writeFanControlFanModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlFanModeSequenceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlfanModeSequenceCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlFanModeSequenceCommandParams.put(
        "value", fanControlfanModeSequenceCommandParameterInfo);
    InteractionInfo writeFanControlFanModeSequenceAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeFanModeSequenceAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlFanModeSequenceCommandParams);
    writeFanControlInteractionInfo.put(
        "writeFanModeSequenceAttribute", writeFanControlFanModeSequenceAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlPercentSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlpercentSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlPercentSettingCommandParams.put(
        "value", fanControlpercentSettingCommandParameterInfo);
    InteractionInfo writeFanControlPercentSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writePercentSettingAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlPercentSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writePercentSettingAttribute", writeFanControlPercentSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlSpeedSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlspeedSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlSpeedSettingCommandParams.put(
        "value", fanControlspeedSettingCommandParameterInfo);
    InteractionInfo writeFanControlSpeedSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeSpeedSettingAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlSpeedSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeSpeedSettingAttribute", writeFanControlSpeedSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlRockSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlrockSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlRockSettingCommandParams.put("value", fanControlrockSettingCommandParameterInfo);
    InteractionInfo writeFanControlRockSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeRockSettingAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlRockSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeRockSettingAttribute", writeFanControlRockSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlWindSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlwindSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlWindSettingCommandParams.put("value", fanControlwindSettingCommandParameterInfo);
    InteractionInfo writeFanControlWindSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeWindSettingAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlWindSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeWindSettingAttribute", writeFanControlWindSettingAttributeInteractionInfo);
    writeAttributeMap.put("fanControl", writeFanControlInteractionInfo);
    Map<String, InteractionInfo> writeThermostatUserInterfaceConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        thermostatUserInterfaceConfigurationtemperatureDisplayModeCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams.put(
        "value", thermostatUserInterfaceConfigurationtemperatureDisplayModeCommandParameterInfo);
    InteractionInfo
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                      .writeTemperatureDisplayModeAttribute(
                          (DefaultClusterCallback) callback,
                          (Integer) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeTemperatureDisplayModeAttribute",
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatUserInterfaceConfigurationkeypadLockoutCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams.put(
        "value", thermostatUserInterfaceConfigurationkeypadLockoutCommandParameterInfo);
    InteractionInfo writeThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                  .writeKeypadLockoutAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeKeypadLockoutAttribute",
        writeThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        thermostatUserInterfaceConfigurationscheduleProgrammingVisibilityCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams.put(
        "value",
        thermostatUserInterfaceConfigurationscheduleProgrammingVisibilityCommandParameterInfo);
    InteractionInfo
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                      .writeScheduleProgrammingVisibilityAttribute(
                          (DefaultClusterCallback) callback,
                          (Integer) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeScheduleProgrammingVisibilityAttribute",
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo);
    writeAttributeMap.put(
        "thermostatUserInterfaceConfiguration",
        writeThermostatUserInterfaceConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeColorControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeColorControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControloptionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlOptionsCommandParams.put("value", colorControloptionsCommandParameterInfo);
    InteractionInfo writeColorControlOptionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeOptionsAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlOptionsCommandParams);
    writeColorControlInteractionInfo.put(
        "writeOptionsAttribute", writeColorControlOptionsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlWhitePointXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlwhitePointXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlWhitePointXCommandParams.put(
        "value", colorControlwhitePointXCommandParameterInfo);
    InteractionInfo writeColorControlWhitePointXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeWhitePointXAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlWhitePointXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeWhitePointXAttribute", writeColorControlWhitePointXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlWhitePointYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlwhitePointYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlWhitePointYCommandParams.put(
        "value", colorControlwhitePointYCommandParameterInfo);
    InteractionInfo writeColorControlWhitePointYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeWhitePointYAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlWhitePointYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeWhitePointYAttribute", writeColorControlWhitePointYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRXCommandParams.put(
        "value", colorControlcolorPointRXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRXAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRXAttribute", writeColorControlColorPointRXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRYCommandParams.put(
        "value", colorControlcolorPointRYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRYAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRYAttribute", writeColorControlColorPointRYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRIntensityCommandParams.put(
        "value", colorControlcolorPointRIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRIntensityAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRIntensityAttribute",
        writeColorControlColorPointRIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGXCommandParams.put(
        "value", colorControlcolorPointGXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGXAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGXAttribute", writeColorControlColorPointGXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGYCommandParams.put(
        "value", colorControlcolorPointGYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGYAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGYAttribute", writeColorControlColorPointGYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGIntensityCommandParams.put(
        "value", colorControlcolorPointGIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGIntensityAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGIntensityAttribute",
        writeColorControlColorPointGIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBXCommandParams.put(
        "value", colorControlcolorPointBXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBXAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBXAttribute", writeColorControlColorPointBXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBYCommandParams.put(
        "value", colorControlcolorPointBYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBYAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBYAttribute", writeColorControlColorPointBYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBIntensityCommandParams.put(
        "value", colorControlcolorPointBIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBIntensityAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBIntensityAttribute",
        writeColorControlColorPointBIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlStartUpColorTemperatureMiredsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstartUpColorTemperatureMiredsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlStartUpColorTemperatureMiredsCommandParams.put(
        "value", colorControlstartUpColorTemperatureMiredsCommandParameterInfo);
    InteractionInfo writeColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeStartUpColorTemperatureMiredsAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlStartUpColorTemperatureMiredsCommandParams);
    writeColorControlInteractionInfo.put(
        "writeStartUpColorTemperatureMiredsAttribute",
        writeColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo);
    writeAttributeMap.put("colorControl", writeColorControlInteractionInfo);
    Map<String, InteractionInfo> writeBallastConfigurationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBallastConfigurationMinLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationminLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationMinLevelCommandParams.put(
        "value", ballastConfigurationminLevelCommandParameterInfo);
    InteractionInfo writeBallastConfigurationMinLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeMinLevelAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationMinLevelCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeMinLevelAttribute", writeBallastConfigurationMinLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationMaxLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationmaxLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationMaxLevelCommandParams.put(
        "value", ballastConfigurationmaxLevelCommandParameterInfo);
    InteractionInfo writeBallastConfigurationMaxLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeMaxLevelAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationMaxLevelCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeMaxLevelAttribute", writeBallastConfigurationMaxLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationIntrinsicBalanceFactorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationintrinsicBalanceFactorCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationIntrinsicBalanceFactorCommandParams.put(
        "value", ballastConfigurationintrinsicBalanceFactorCommandParameterInfo);
    InteractionInfo writeBallastConfigurationIntrinsicBalanceFactorAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeIntrinsicBalanceFactorAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationIntrinsicBalanceFactorCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeIntrinsicBalanceFactorAttribute",
        writeBallastConfigurationIntrinsicBalanceFactorAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeBallastConfigurationBallastFactorAdjustmentCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationballastFactorAdjustmentCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationBallastFactorAdjustmentCommandParams.put(
        "value", ballastConfigurationballastFactorAdjustmentCommandParameterInfo);
    InteractionInfo writeBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeBallastFactorAdjustmentAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationBallastFactorAdjustmentCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeBallastFactorAdjustmentAttribute",
        writeBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampTypeCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBallastConfigurationLampTypeCommandParams.put(
        "value", ballastConfigurationlampTypeCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampTypeAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampTypeCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampTypeAttribute", writeBallastConfigurationLampTypeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampManufacturerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampManufacturerCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBallastConfigurationLampManufacturerCommandParams.put(
        "value", ballastConfigurationlampManufacturerCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampManufacturerAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampManufacturerAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampManufacturerCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampManufacturerAttribute",
        writeBallastConfigurationLampManufacturerAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampRatedHoursCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampRatedHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampRatedHoursCommandParams.put(
        "value", ballastConfigurationlampRatedHoursCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampRatedHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampRatedHoursAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampRatedHoursCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampRatedHoursAttribute",
        writeBallastConfigurationLampRatedHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampBurnHoursCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampBurnHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampBurnHoursCommandParams.put(
        "value", ballastConfigurationlampBurnHoursCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampBurnHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampBurnHoursAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampBurnHoursCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampBurnHoursAttribute",
        writeBallastConfigurationLampBurnHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampAlarmModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampAlarmModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationLampAlarmModeCommandParams.put(
        "value", ballastConfigurationlampAlarmModeCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampAlarmModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampAlarmModeAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampAlarmModeCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampAlarmModeAttribute",
        writeBallastConfigurationLampAlarmModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampBurnHoursTripPointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampBurnHoursTripPointCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampBurnHoursTripPointCommandParams.put(
        "value", ballastConfigurationlampBurnHoursTripPointCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampBurnHoursTripPointAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampBurnHoursTripPointCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampBurnHoursTripPointAttribute",
        writeBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo);
    writeAttributeMap.put("ballastConfiguration", writeBallastConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeIlluminanceMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("illuminanceMeasurement", writeIlluminanceMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeTemperatureMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("temperatureMeasurement", writeTemperatureMeasurementInteractionInfo);
    Map<String, InteractionInfo> writePressureMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("pressureMeasurement", writePressureMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeFlowMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("flowMeasurement", writeFlowMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeRelativeHumidityMeasurementInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "relativeHumidityMeasurement", writeRelativeHumidityMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeOccupancySensingInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("occupancySensing", writeOccupancySensingInteractionInfo);
    Map<String, InteractionInfo> writeWakeOnLanInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("wakeOnLan", writeWakeOnLanInteractionInfo);
    Map<String, InteractionInfo> writeChannelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("channel", writeChannelInteractionInfo);
    Map<String, InteractionInfo> writeTargetNavigatorInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("targetNavigator", writeTargetNavigatorInteractionInfo);
    Map<String, InteractionInfo> writeMediaPlaybackInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("mediaPlayback", writeMediaPlaybackInteractionInfo);
    Map<String, InteractionInfo> writeMediaInputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("mediaInput", writeMediaInputInteractionInfo);
    Map<String, InteractionInfo> writeLowPowerInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("lowPower", writeLowPowerInteractionInfo);
    Map<String, InteractionInfo> writeKeypadInputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("keypadInput", writeKeypadInputInteractionInfo);
    Map<String, InteractionInfo> writeContentLauncherInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeContentLauncherSupportedStreamingProtocolsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo contentLaunchersupportedStreamingProtocolsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeContentLauncherSupportedStreamingProtocolsCommandParams.put(
        "value", contentLaunchersupportedStreamingProtocolsCommandParameterInfo);
    InteractionInfo writeContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .writeSupportedStreamingProtocolsAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeContentLauncherSupportedStreamingProtocolsCommandParams);
    writeContentLauncherInteractionInfo.put(
        "writeSupportedStreamingProtocolsAttribute",
        writeContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo);
    writeAttributeMap.put("contentLauncher", writeContentLauncherInteractionInfo);
    Map<String, InteractionInfo> writeAudioOutputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("audioOutput", writeAudioOutputInteractionInfo);
    Map<String, InteractionInfo> writeApplicationLauncherInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("applicationLauncher", writeApplicationLauncherInteractionInfo);
    Map<String, InteractionInfo> writeApplicationBasicInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("applicationBasic", writeApplicationBasicInteractionInfo);
    Map<String, InteractionInfo> writeAccountLoginInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("accountLogin", writeAccountLoginInteractionInfo);
    Map<String, InteractionInfo> writeElectricalMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("electricalMeasurement", writeElectricalMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeTestInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeTestBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testbooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestBooleanCommandParams.put("value", testbooleanCommandParameterInfo);
    InteractionInfo writeTestBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeBooleanAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestBooleanCommandParams);
    writeTestInteractionInfo.put("writeBooleanAttribute", writeTestBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestBitmap8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testbitmap8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestBitmap8CommandParams.put("value", testbitmap8CommandParameterInfo);
    InteractionInfo writeTestBitmap8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeBitmap8Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestBitmap8CommandParams);
    writeTestInteractionInfo.put("writeBitmap8Attribute", writeTestBitmap8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestBitmap16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testbitmap16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestBitmap16CommandParams.put("value", testbitmap16CommandParameterInfo);
    InteractionInfo writeTestBitmap16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeBitmap16Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestBitmap16CommandParams);
    writeTestInteractionInfo.put(
        "writeBitmap16Attribute", writeTestBitmap16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestBitmap32CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testbitmap32CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestBitmap32CommandParams.put("value", testbitmap32CommandParameterInfo);
    InteractionInfo writeTestBitmap32AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeBitmap32Attribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestBitmap32CommandParams);
    writeTestInteractionInfo.put(
        "writeBitmap32Attribute", writeTestBitmap32AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestBitmap64CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testbitmap64CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestBitmap64CommandParams.put("value", testbitmap64CommandParameterInfo);
    InteractionInfo writeTestBitmap64AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeBitmap64Attribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestBitmap64CommandParams);
    writeTestInteractionInfo.put(
        "writeBitmap64Attribute", writeTestBitmap64AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestInt8uCommandParams.put("value", testint8uCommandParameterInfo);
    InteractionInfo writeTestInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt8uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt8uCommandParams);
    writeTestInteractionInfo.put("writeInt8uAttribute", writeTestInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestInt16uCommandParams.put("value", testint16uCommandParameterInfo);
    InteractionInfo writeTestInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt16uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt16uCommandParams);
    writeTestInteractionInfo.put("writeInt16uAttribute", writeTestInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt24uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint24uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt24uCommandParams.put("value", testint24uCommandParameterInfo);
    InteractionInfo writeTestInt24uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt24uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt24uCommandParams);
    writeTestInteractionInfo.put("writeInt24uAttribute", writeTestInt24uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt32uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint32uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt32uCommandParams.put("value", testint32uCommandParameterInfo);
    InteractionInfo writeTestInt32uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt32uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt32uCommandParams);
    writeTestInteractionInfo.put("writeInt32uAttribute", writeTestInt32uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt40uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint40uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt40uCommandParams.put("value", testint40uCommandParameterInfo);
    InteractionInfo writeTestInt40uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt40uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt40uCommandParams);
    writeTestInteractionInfo.put("writeInt40uAttribute", writeTestInt40uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt48uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint48uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt48uCommandParams.put("value", testint48uCommandParameterInfo);
    InteractionInfo writeTestInt48uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt48uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt48uCommandParams);
    writeTestInteractionInfo.put("writeInt48uAttribute", writeTestInt48uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt56uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint56uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt56uCommandParams.put("value", testint56uCommandParameterInfo);
    InteractionInfo writeTestInt56uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt56uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt56uCommandParams);
    writeTestInteractionInfo.put("writeInt56uAttribute", writeTestInt56uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt64uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint64uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt64uCommandParams.put("value", testint64uCommandParameterInfo);
    InteractionInfo writeTestInt64uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt64uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt64uCommandParams);
    writeTestInteractionInfo.put("writeInt64uAttribute", writeTestInt64uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestInt8sCommandParams.put("value", testint8sCommandParameterInfo);
    InteractionInfo writeTestInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt8sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt8sCommandParams);
    writeTestInteractionInfo.put("writeInt8sAttribute", writeTestInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestInt16sCommandParams.put("value", testint16sCommandParameterInfo);
    InteractionInfo writeTestInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt16sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt16sCommandParams);
    writeTestInteractionInfo.put("writeInt16sAttribute", writeTestInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt24sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint24sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt24sCommandParams.put("value", testint24sCommandParameterInfo);
    InteractionInfo writeTestInt24sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt24sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt24sCommandParams);
    writeTestInteractionInfo.put("writeInt24sAttribute", writeTestInt24sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt32sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint32sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt32sCommandParams.put("value", testint32sCommandParameterInfo);
    InteractionInfo writeTestInt32sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt32sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt32sCommandParams);
    writeTestInteractionInfo.put("writeInt32sAttribute", writeTestInt32sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt40sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint40sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt40sCommandParams.put("value", testint40sCommandParameterInfo);
    InteractionInfo writeTestInt40sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt40sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt40sCommandParams);
    writeTestInteractionInfo.put("writeInt40sAttribute", writeTestInt40sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt48sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint48sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt48sCommandParams.put("value", testint48sCommandParameterInfo);
    InteractionInfo writeTestInt48sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt48sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt48sCommandParams);
    writeTestInteractionInfo.put("writeInt48sAttribute", writeTestInt48sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt56sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint56sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt56sCommandParams.put("value", testint56sCommandParameterInfo);
    InteractionInfo writeTestInt56sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt56sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt56sCommandParams);
    writeTestInteractionInfo.put("writeInt56sAttribute", writeTestInt56sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestInt64sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testint64sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestInt64sCommandParams.put("value", testint64sCommandParameterInfo);
    InteractionInfo writeTestInt64sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeInt64sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestInt64sCommandParams);
    writeTestInteractionInfo.put("writeInt64sAttribute", writeTestInt64sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestEnum8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testenum8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestEnum8CommandParams.put("value", testenum8CommandParameterInfo);
    InteractionInfo writeTestEnum8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeEnum8Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestEnum8CommandParams);
    writeTestInteractionInfo.put("writeEnum8Attribute", writeTestEnum8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestEnum16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testenum16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestEnum16CommandParams.put("value", testenum16CommandParameterInfo);
    InteractionInfo writeTestEnum16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeEnum16Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestEnum16CommandParams);
    writeTestInteractionInfo.put("writeEnum16Attribute", writeTestEnum16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestFloatSingleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testfloatSingleCommandParameterInfo =
        new CommandParameterInfo("value", Float.class, Float.class);
    writeTestFloatSingleCommandParams.put("value", testfloatSingleCommandParameterInfo);
    InteractionInfo writeTestFloatSingleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeFloatSingleAttribute(
                      (DefaultClusterCallback) callback, (Float) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestFloatSingleCommandParams);
    writeTestInteractionInfo.put(
        "writeFloatSingleAttribute", writeTestFloatSingleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestFloatDoubleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testfloatDoubleCommandParameterInfo =
        new CommandParameterInfo("value", Double.class, Double.class);
    writeTestFloatDoubleCommandParams.put("value", testfloatDoubleCommandParameterInfo);
    InteractionInfo writeTestFloatDoubleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeFloatDoubleAttribute(
                      (DefaultClusterCallback) callback, (Double) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestFloatDoubleCommandParams);
    writeTestInteractionInfo.put(
        "writeFloatDoubleAttribute", writeTestFloatDoubleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testoctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestOctetStringCommandParams.put("value", testoctetStringCommandParameterInfo);
    InteractionInfo writeTestOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestOctetStringCommandParams);
    writeTestInteractionInfo.put(
        "writeOctetStringAttribute", writeTestOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestLongOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testlongOctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestLongOctetStringCommandParams.put("value", testlongOctetStringCommandParameterInfo);
    InteractionInfo writeTestLongOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeLongOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestLongOctetStringCommandParams);
    writeTestInteractionInfo.put(
        "writeLongOctetStringAttribute", writeTestLongOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testcharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestCharStringCommandParams.put("value", testcharStringCommandParameterInfo);
    InteractionInfo writeTestCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestCharStringCommandParams);
    writeTestInteractionInfo.put(
        "writeCharStringAttribute", writeTestCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestLongCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testlongCharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestLongCharStringCommandParams.put("value", testlongCharStringCommandParameterInfo);
    InteractionInfo writeTestLongCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeLongCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestLongCharStringCommandParams);
    writeTestInteractionInfo.put(
        "writeLongCharStringAttribute", writeTestLongCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestEpochUsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testepochUsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestEpochUsCommandParams.put("value", testepochUsCommandParameterInfo);
    InteractionInfo writeTestEpochUsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeEpochUsAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestEpochUsCommandParams);
    writeTestInteractionInfo.put("writeEpochUsAttribute", writeTestEpochUsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestEpochSCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testepochSCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestEpochSCommandParams.put("value", testepochSCommandParameterInfo);
    InteractionInfo writeTestEpochSAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeEpochSAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestEpochSCommandParams);
    writeTestInteractionInfo.put("writeEpochSAttribute", writeTestEpochSAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testvendorIdCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestVendorIdCommandParams.put("value", testvendorIdCommandParameterInfo);
    InteractionInfo writeTestVendorIdAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeVendorIdAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestVendorIdCommandParams);
    writeTestInteractionInfo.put(
        "writeVendorIdAttribute", writeTestVendorIdAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestEnumAttrCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testenumAttrCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestEnumAttrCommandParams.put("value", testenumAttrCommandParameterInfo);
    InteractionInfo writeTestEnumAttrAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeEnumAttrAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestEnumAttrCommandParams);
    writeTestInteractionInfo.put(
        "writeEnumAttrAttribute", writeTestEnumAttrAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestRangeRestrictedInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testrangeRestrictedInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestRangeRestrictedInt8uCommandParams.put(
        "value", testrangeRestrictedInt8uCommandParameterInfo);
    InteractionInfo writeTestRangeRestrictedInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeRangeRestrictedInt8uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestRangeRestrictedInt8uCommandParams);
    writeTestInteractionInfo.put(
        "writeRangeRestrictedInt8uAttribute",
        writeTestRangeRestrictedInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestRangeRestrictedInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testrangeRestrictedInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestRangeRestrictedInt8sCommandParams.put(
        "value", testrangeRestrictedInt8sCommandParameterInfo);
    InteractionInfo writeTestRangeRestrictedInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeRangeRestrictedInt8sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestRangeRestrictedInt8sCommandParams);
    writeTestInteractionInfo.put(
        "writeRangeRestrictedInt8sAttribute",
        writeTestRangeRestrictedInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestRangeRestrictedInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testrangeRestrictedInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestRangeRestrictedInt16uCommandParams.put(
        "value", testrangeRestrictedInt16uCommandParameterInfo);
    InteractionInfo writeTestRangeRestrictedInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeRangeRestrictedInt16uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestRangeRestrictedInt16uCommandParams);
    writeTestInteractionInfo.put(
        "writeRangeRestrictedInt16uAttribute",
        writeTestRangeRestrictedInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestRangeRestrictedInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testrangeRestrictedInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestRangeRestrictedInt16sCommandParams.put(
        "value", testrangeRestrictedInt16sCommandParameterInfo);
    InteractionInfo writeTestRangeRestrictedInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeRangeRestrictedInt16sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestRangeRestrictedInt16sCommandParams);
    writeTestInteractionInfo.put(
        "writeRangeRestrictedInt16sAttribute",
        writeTestRangeRestrictedInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestTimedWriteBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testtimedWriteBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestTimedWriteBooleanCommandParams.put("value", testtimedWriteBooleanCommandParameterInfo);
    InteractionInfo writeTestTimedWriteBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeTimedWriteBooleanAttribute(
                      (DefaultClusterCallback) callback,
                      (Boolean) commandArguments.get("value"),
                      10000);
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestTimedWriteBooleanCommandParams);
    writeTestInteractionInfo.put(
        "writeTimedWriteBooleanAttribute", writeTestTimedWriteBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestGeneralErrorBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testgeneralErrorBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestGeneralErrorBooleanCommandParams.put(
        "value", testgeneralErrorBooleanCommandParameterInfo);
    InteractionInfo writeTestGeneralErrorBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeGeneralErrorBooleanAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestGeneralErrorBooleanCommandParams);
    writeTestInteractionInfo.put(
        "writeGeneralErrorBooleanAttribute", writeTestGeneralErrorBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterErrorBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testclusterErrorBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterErrorBooleanCommandParams.put(
        "value", testclusterErrorBooleanCommandParameterInfo);
    InteractionInfo writeTestClusterErrorBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeClusterErrorBooleanAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterErrorBooleanCommandParams);
    writeTestInteractionInfo.put(
        "writeClusterErrorBooleanAttribute", writeTestClusterErrorBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestUnsupportedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testunsupportedCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestUnsupportedCommandParams.put("value", testunsupportedCommandParameterInfo);
    InteractionInfo writeTestUnsupportedAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeUnsupportedAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestUnsupportedCommandParams);
    writeTestInteractionInfo.put(
        "writeUnsupportedAttribute", writeTestUnsupportedAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestNullableBooleanCommandParams.put("value", testnullableBooleanCommandParameterInfo);
    InteractionInfo writeTestNullableBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableBooleanAttribute(
                      (DefaultClusterCallback) callback, (Boolean) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableBooleanCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableBooleanAttribute", writeTestNullableBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableBitmap8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableBitmap8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableBitmap8CommandParams.put("value", testnullableBitmap8CommandParameterInfo);
    InteractionInfo writeTestNullableBitmap8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableBitmap8Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableBitmap8CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableBitmap8Attribute", writeTestNullableBitmap8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableBitmap16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableBitmap16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableBitmap16CommandParams.put("value", testnullableBitmap16CommandParameterInfo);
    InteractionInfo writeTestNullableBitmap16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableBitmap16Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableBitmap16CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableBitmap16Attribute", writeTestNullableBitmap16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableBitmap32CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableBitmap32CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableBitmap32CommandParams.put("value", testnullableBitmap32CommandParameterInfo);
    InteractionInfo writeTestNullableBitmap32AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableBitmap32Attribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableBitmap32CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableBitmap32Attribute", writeTestNullableBitmap32AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableBitmap64CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableBitmap64CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableBitmap64CommandParams.put("value", testnullableBitmap64CommandParameterInfo);
    InteractionInfo writeTestNullableBitmap64AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableBitmap64Attribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableBitmap64CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableBitmap64Attribute", writeTestNullableBitmap64AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableInt8uCommandParams.put("value", testnullableInt8uCommandParameterInfo);
    InteractionInfo writeTestNullableInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt8uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt8uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt8uAttribute", writeTestNullableInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableInt16uCommandParams.put("value", testnullableInt16uCommandParameterInfo);
    InteractionInfo writeTestNullableInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt16uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt16uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt16uAttribute", writeTestNullableInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt24uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt24uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt24uCommandParams.put("value", testnullableInt24uCommandParameterInfo);
    InteractionInfo writeTestNullableInt24uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt24uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt24uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt24uAttribute", writeTestNullableInt24uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt32uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt32uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt32uCommandParams.put("value", testnullableInt32uCommandParameterInfo);
    InteractionInfo writeTestNullableInt32uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt32uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt32uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt32uAttribute", writeTestNullableInt32uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt40uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt40uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt40uCommandParams.put("value", testnullableInt40uCommandParameterInfo);
    InteractionInfo writeTestNullableInt40uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt40uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt40uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt40uAttribute", writeTestNullableInt40uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt48uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt48uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt48uCommandParams.put("value", testnullableInt48uCommandParameterInfo);
    InteractionInfo writeTestNullableInt48uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt48uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt48uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt48uAttribute", writeTestNullableInt48uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt56uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt56uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt56uCommandParams.put("value", testnullableInt56uCommandParameterInfo);
    InteractionInfo writeTestNullableInt56uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt56uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt56uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt56uAttribute", writeTestNullableInt56uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt64uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt64uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt64uCommandParams.put("value", testnullableInt64uCommandParameterInfo);
    InteractionInfo writeTestNullableInt64uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt64uAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt64uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt64uAttribute", writeTestNullableInt64uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableInt8sCommandParams.put("value", testnullableInt8sCommandParameterInfo);
    InteractionInfo writeTestNullableInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt8sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt8sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt8sAttribute", writeTestNullableInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableInt16sCommandParams.put("value", testnullableInt16sCommandParameterInfo);
    InteractionInfo writeTestNullableInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt16sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt16sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt16sAttribute", writeTestNullableInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt24sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt24sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt24sCommandParams.put("value", testnullableInt24sCommandParameterInfo);
    InteractionInfo writeTestNullableInt24sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt24sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt24sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt24sAttribute", writeTestNullableInt24sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt32sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt32sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt32sCommandParams.put("value", testnullableInt32sCommandParameterInfo);
    InteractionInfo writeTestNullableInt32sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt32sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt32sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt32sAttribute", writeTestNullableInt32sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt40sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt40sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt40sCommandParams.put("value", testnullableInt40sCommandParameterInfo);
    InteractionInfo writeTestNullableInt40sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt40sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt40sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt40sAttribute", writeTestNullableInt40sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt48sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt48sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt48sCommandParams.put("value", testnullableInt48sCommandParameterInfo);
    InteractionInfo writeTestNullableInt48sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt48sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt48sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt48sAttribute", writeTestNullableInt48sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt56sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt56sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt56sCommandParams.put("value", testnullableInt56sCommandParameterInfo);
    InteractionInfo writeTestNullableInt56sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt56sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt56sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt56sAttribute", writeTestNullableInt56sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableInt64sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableInt64sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestNullableInt64sCommandParams.put("value", testnullableInt64sCommandParameterInfo);
    InteractionInfo writeTestNullableInt64sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableInt64sAttribute(
                      (DefaultClusterCallback) callback, (Long) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableInt64sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableInt64sAttribute", writeTestNullableInt64sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableEnum8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableEnum8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableEnum8CommandParams.put("value", testnullableEnum8CommandParameterInfo);
    InteractionInfo writeTestNullableEnum8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableEnum8Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableEnum8CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableEnum8Attribute", writeTestNullableEnum8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableEnum16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableEnum16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableEnum16CommandParams.put("value", testnullableEnum16CommandParameterInfo);
    InteractionInfo writeTestNullableEnum16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableEnum16Attribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableEnum16CommandParams);
    writeTestInteractionInfo.put(
        "writeNullableEnum16Attribute", writeTestNullableEnum16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableFloatSingleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableFloatSingleCommandParameterInfo =
        new CommandParameterInfo("value", Float.class, Float.class);
    writeTestNullableFloatSingleCommandParams.put(
        "value", testnullableFloatSingleCommandParameterInfo);
    InteractionInfo writeTestNullableFloatSingleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableFloatSingleAttribute(
                      (DefaultClusterCallback) callback, (Float) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableFloatSingleCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableFloatSingleAttribute", writeTestNullableFloatSingleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableFloatDoubleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableFloatDoubleCommandParameterInfo =
        new CommandParameterInfo("value", Double.class, Double.class);
    writeTestNullableFloatDoubleCommandParams.put(
        "value", testnullableFloatDoubleCommandParameterInfo);
    InteractionInfo writeTestNullableFloatDoubleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableFloatDoubleAttribute(
                      (DefaultClusterCallback) callback, (Double) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableFloatDoubleCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableFloatDoubleAttribute", writeTestNullableFloatDoubleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableOctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestNullableOctetStringCommandParams.put(
        "value", testnullableOctetStringCommandParameterInfo);
    InteractionInfo writeTestNullableOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableOctetStringCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableOctetStringAttribute", writeTestNullableOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableCharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestNullableCharStringCommandParams.put(
        "value", testnullableCharStringCommandParameterInfo);
    InteractionInfo writeTestNullableCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableCharStringCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableCharStringAttribute", writeTestNullableCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableEnumAttrCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableEnumAttrCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableEnumAttrCommandParams.put("value", testnullableEnumAttrCommandParameterInfo);
    InteractionInfo writeTestNullableEnumAttrAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableEnumAttrAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableEnumAttrCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableEnumAttrAttribute", writeTestNullableEnumAttrAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableRangeRestrictedInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableRangeRestrictedInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableRangeRestrictedInt8uCommandParams.put(
        "value", testnullableRangeRestrictedInt8uCommandParameterInfo);
    InteractionInfo writeTestNullableRangeRestrictedInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableRangeRestrictedInt8uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableRangeRestrictedInt8uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableRangeRestrictedInt8uAttribute",
        writeTestNullableRangeRestrictedInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableRangeRestrictedInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableRangeRestrictedInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableRangeRestrictedInt8sCommandParams.put(
        "value", testnullableRangeRestrictedInt8sCommandParameterInfo);
    InteractionInfo writeTestNullableRangeRestrictedInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableRangeRestrictedInt8sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableRangeRestrictedInt8sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableRangeRestrictedInt8sAttribute",
        writeTestNullableRangeRestrictedInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableRangeRestrictedInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableRangeRestrictedInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableRangeRestrictedInt16uCommandParams.put(
        "value", testnullableRangeRestrictedInt16uCommandParameterInfo);
    InteractionInfo writeTestNullableRangeRestrictedInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableRangeRestrictedInt16uAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableRangeRestrictedInt16uCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableRangeRestrictedInt16uAttribute",
        writeTestNullableRangeRestrictedInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestNullableRangeRestrictedInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testnullableRangeRestrictedInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestNullableRangeRestrictedInt16sCommandParams.put(
        "value", testnullableRangeRestrictedInt16sCommandParameterInfo);
    InteractionInfo writeTestNullableRangeRestrictedInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestCluster) cluster)
                  .writeNullableRangeRestrictedInt16sAttribute(
                      (DefaultClusterCallback) callback, (Integer) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestNullableRangeRestrictedInt16sCommandParams);
    writeTestInteractionInfo.put(
        "writeNullableRangeRestrictedInt16sAttribute",
        writeTestNullableRangeRestrictedInt16sAttributeInteractionInfo);
    writeAttributeMap.put("test", writeTestInteractionInfo);
    return writeAttributeMap;
  }
}
